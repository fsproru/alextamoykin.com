<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>alextamoykin.com</title>
   
   <link>http://alextamoykin.com/</link>
   <description>Building world-class software, teams, and products.</description>
   <language>en-us</language>
   <managingEditor> Alex Tamoykin</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Unlock the power of Remote Workforce for Your Business</title>
	  <link>//unlock-the-power-of-remote-workforce-for-your-business</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2020-03-22T00:00:00-07:00</pubDate>
	  <guid>//unlock-the-power-of-remote-workforce-for-your-business</guid>
	  <description><![CDATA[
	     <h1 id="what-is-remote-workforce">What is Remote Workforce</h1>

<p>A traditional way to do business is to come to an office to do the work. In some industries like factory manufacturing, it’s the only option. That being said, with the current state of technology and especially for thought workers like software engineers, it’s no longer a requirement. With a high-performance laptop and an Internet connection, you can work from anywhere in the world, including your home office. Remote workforce unlocks limitless possibilities for your business like getting access to a larger and more cost-efficient pool of talent internationally.</p>

<h1 id="why-remote-is-great">Why Remote is Great</h1>

<h2 id="big-companies-go-remote">Big Companies Go Remote</h2>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/0804137501/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0804137501&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=371cd9783dd11848c153f3886880a408"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0804137501&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0804137501" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<p>Large companies like <a href="https://www.pluralsight.com/blog/teams/collaborating-at-github-with-a-60--remote-workforce" target="_blank">Github</a> (bought by Microsoft), <a href="https://www.glassdoor.com/Overview/Working-at-InVision-EI_IE912781.11,19.htm" target="_blank">InVision</a>, <a href="https://37signals.com/" target="_blank">37signals</a> (makers of <a href="https://basecamp.com/" target="_blank">Basecamp</a> and creators of <a href="https://rubyonrails.org/" target="_blank">Ruby on Rails</a>) already operate remotely. There are books written on a subject like <a href="https://www.amazon.com/gp/product/0804137501/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0804137501&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=7975a9b05dc299f15f7e104f0228bebc" target="_blank">Remote</a>.</p>

<p>More and more companies adopt remote work as a standard practice.</p>

<h2 id="the-world-is-your-oyster">The World is Your Oyster</h2>

<p>The remote workforce unlocks the possibility of hiring people outside of your city and even country. You can have a truly international team of professionals working in lockstep with you. Needless to say, that due to the cost of living difference between the United States and the rest of the world, you’ll get some amazingly skilled and motivated professionals at the fraction of the cost of a local US employee. No need to worry about immigration either. Remote workers can be hired as individual contractors for your business reducing the complexity of your payroll.</p>

<p>With remote, you’re tapping into a larger pool of talent than in your local city. It’s especially helpful if you’re looking to fulfill multiple roles at your company and the local job market is very competitive.</p>

<p>Worth noting that in some countries, higher education is more accessible and less costly than in the US. So yes, you can hire a remote worker who actually knows how software algorithms and data structures work ;-)</p>

<h2 id="more-productivity-and-focus">More Productivity and Focus</h2>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/1455586692/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1455586692&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=6bba21ed40b76c40d75ee5518f222af8"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1455586692&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=1455586692" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<p>Working at the office, especially with an open floor plan, can be distracting. It’s very easy to spend your entire day between meetings, random conversations with your peers, especially with the hard work requiring a high amount of mental energy and concentration like software engineering.</p>

<p>Working remotely solves this problem. With a properly set up personal office, there are fewer distractions, leaving more time for individual contributions. A book on a subject is my all-time favorite: <a href="https://www.amazon.com/gp/product/1455586692/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1455586692&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=46b086be5569689988b467402a54c7ce" target="_blank">Deep Work</a>: Rules for Focused Success In a Distracted World.</p>

<h1 id="how-to-work-with-a-remote-team">How To Work With a Remote Team</h1>

<h2 id="video-calls">Video Calls</h2>

<p>Regular meetings like standups, sprint plannings, retrospectives, debugging sessions can happen over video calls. The most popular options are <a href="https://zoom.us/" target="_blank">Zoom</a>, <a href="https://www.gotomeeting.com/" target="_blank">GoToMeeting</a>, <a href="https://gsuite.google.com/products/meet/" target="_blank">Google Meet</a> (aka Google Hangouts). Most of the video conferencing software allows you to add multiple attendees, share your camera and your screen. It’s especially useful if you would like to walk your team through a presentation. If you have an issue you need some help with, you can have a video call with your remote co-worker to troubleshoot it over a screen sharing session.</p>

<h2 id="messaging--chat">Messaging / Chat</h2>

<p>With the evolution of the messaging software, it’s now more efficient to communicate over messaging than talking to a large group. The advantages of using messaging for your communication are that it’s searchable, can be referred to later on, and it works for communicating with your entire team regardless of the physical location of your team members. Most notable options are <a href="https://slack.com/" target="_blank">Slack</a>, <a href="https://products.office.com/en-us/microsoft-teams/group-chat-software" target="_blank">Microsoft Teams</a>, <a href="https://www.atlassian.com/software/hipchat/downloads" target="_blank">HipChat</a>.</p>

<h2 id="tracking-progress">Tracking Progress</h2>

<p>You most likely already use these tools to track your projects. <a href="https://www.atlassian.com/software/jira" target="_blank">Jira</a>, <a href="https://trello.com/" target="_blank">Trello</a>, <a href="http://asana.com" target="_blank">Asana</a>, <a href="https://monday.com/" target="_blank">Monday</a> or a good old school spreadsheet (yes, people still do it, and it works great!) are available to track your team’s progress. Remote team members are assigned some tickets to work on. Once the work is started, the ticket is moved to in progress, then in QA, and to done. All steps along the way you’ll know exactly who works on what and when the work is ready to be reviewed.</p>

<h2 id="pushing-code">Pushing Code</h2>

<p>Chances are that you’re already using these tools too. There is no need to host a private git repository on your secret server in a closet. Services like <a href="https://github.com/" target="_blank">Github</a>, <a href="https://about.gitlab.com/" target="_blank">GitLab</a>, and <a href="https://bitbucket.org/" target="_blank">BitBucket</a> are available for your team. You can set the individual permissions for each code repository and assign different permissions to your engineers as you see fit. All code gets pushed to the same repository. Remote workers will follow your standard code review procedure using the same code standards that you already have.</p>

<h2 id="testing">Testing</h2>

<p>Stopping by at your developer’s desk to see the progress is inefficient and distractive. So you should be already using services like <a href="https://developer.apple.com/testflight/" target="_blank">TestFlight</a> and <a href="https://firebase.google.com/products/app-distribution" target="_blank">Firebase</a> to distribute your test builds for your mobile app. The websites are deployed to your QA or staging environment for testing which you can access from your web browser. You can check the database with your database client like <a href="https://www.sequelpro.com/" target="_blank">Sequel Pro</a> or <a href="https://www.navicat.com/" target="_blank">Navicat</a>. Your API can be tested with <a href="https://www.postman.com/" target="_blank">Postman</a>. And your cloud is easy to manage using <a href="https://getcommandeer.com/" target="_blank">Commandeer</a>.</p>

<h2 id="security">Security</h2>

<p>Security is the top priority for remote workers. At <a href="https://rightbalance.io/" target="_blank">Right Balance</a>, we follow the best security practices like using <a href="https://en.wikipedia.org/wiki/Virtual_private_network" target="_blank">VPN</a>, <a href="https://en.wikipedia.org/wiki/Secure_Shell" target="_blank">SSH</a> keys, hard disk encryption, being able to erase a laptop remotely, and more.</p>

<h1 id="conclusion">Conclusion</h1>

<p>With the current state of technology, remote workers enable your business to achieve greater heights. And as you can see, it’s not that different from your current way of working anyway. At Right Balance, we’re always here to help with remote software engineering. With our top-level software engineers in Russia and Latin America, we’re able to have around the globe time zone coverage. Seamlessly integrating into your team, and delivering some fantastic results.</p>

<p>If you ever need software development help, don’t hesitate to reach out at contact@rightbalance.io or +1.424.259.2285.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Do You Have To Become a Manager To Advance As a Software Engineer?</title>
	  <link>//do-you-have-to-become-a-manager-to-advance-as-a-software-engineer</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2018-08-10T00:00:00-07:00</pubDate>
	  <guid>//do-you-have-to-become-a-manager-to-advance-as-a-software-engineer</guid>
	  <description><![CDATA[
	     <p>The short answer is no. Some people say you have to become a manager in order to advance in your career as a software engineer. This is not necessarily true. It depends on what company your work for, the type of work you do, and your personal preference. After reading this post, you’ll know the path to advance as a software engineer regardless of becoming a manager or not.</p>

<h3 id="why-advancing-in-your-career-benefits-everyone">Why advancing in your career benefits everyone</h3>

<p>When you grow, you’re able to deliver a better quality product, your company gets better as a result of that. In addition to it, you solve harder challenges, <a href="/software-engineer-salary-dollar-dollar-bill-yall">make more money</a>, have more impact at the company, and it’s more fun!</p>

<h3 id="how">How</h3>

<p>In technology companies (i.e. companies where technology plays a major part in product development) engineering management recognizes the value of growing their engineers regardless of them becoming managers or not. Here comes a typical engineering ladder:</p>

<p><img src="/assets/images/engineering_ladder_diagram.png" alt="Typical Engineering Ladder" async="true" /></p>

<p>Different companies have different levels and ladders. Underlying principals stay the same. The goal of the ladder is to provide a framework for engineers to grow within the company.</p>

<p>As you can see, all engineers start from Software Engineer I and make it’s way to Staff Software Engineer. A Staff Software engineer demonstrates a great level of individual contributions in addition to leading moderate size projects and teams. At this point, the engineer has a choice of focusing on management skills or technical skills. If the engineer decides to take the management track, the engineer becomes an Engineering Manager, then a Director of Engineering, VP of Engineering, and CTO. All management related roles include growing the team, hiring, people management, resource planning, and so on.</p>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/1594484805/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1594484805&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=40f71fdebcea2a56f8f674b048a6c765"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1594484805&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=1594484805" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<p>One of the basic principals of people management is keeping the team motivated. I highly recommend reading the book called <a href="https://www.amazon.com/gp/product/1594484805/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=1594484805&amp;linkId=d1dced0c8f563243a3ff97864a66a382" target="_blank">Drive by Daniel Pink.</a>. It’s a great book talking about what drives us as human beings. You want to make sure to provide people on your team with autonomy, mastery, and purpose to keep your teammates motivated. It goes over the reasons behind it with some case studies and some suggestions on implementing it at your workplace. Another good read is the all-time classic called <a href="https://www.amazon.com/gp/product/0321934113/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0321934113&amp;linkId=df3daf1e07ef06b56ad51bbbaa32511a" target="_blank">Peopleware</a>.</p>

<p>Alternatively, the engineer has a choice of staying on the technical track to become a Principal Software Engineer and then a Senior Principal Software Engineer. In this role, the engineer makes technological and architectural contributions across the entire company and improves engineering performance as a result of that.</p>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/0134032802/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0134032802&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=993a83c211014757e438477ed1087438"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0134032802&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0134032802" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>
<p>It’s important to note that a Principal Software Engineer also has to have some managerial skills since the impact of this person’s work spans across the entire organization. There are numerous books on the subject. My favorite is <a href="https://www.amazon.com/gp/product/0134032802/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0134032802&amp;linkId=46a5776c76ddec05de77943cb1798fba" target="_blank">The Art of Scalability</a>. It starts by describing different functions of the technical organization, how they are all connected together, and how it connects with technology. It’s interesting to note that even though the technology aspect is quite hard to implement, it’s connecting technology with business functions of the organization is what gives the best results.</p>

<p>No matter which way you go, as long as you grow within the company, you’ll have more impact, bring more value and you’ll get paid more. At the end of the days, it’s just a personal preference. If you like coding and you’re not a big fan of people management, you can safely stick to the technical track. If you’re passionate about hiring, mentoring, and people management then talk to your manager about getting on the management track when the right time comes.</p>

<h3 id="final-words">Final words</h3>

<p>We spend so much of our life working on products. You want to make sure you’re happy at your workplace. Talk to your manager about your long-term career goals and plans. Everybody wins when you grow. Work hard, have fun and the right things will happen.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Monorepo. One Repo To Rule Them All.</title>
	  <link>//monorepo-one-repo-to-rule-them-all</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2018-05-13T00:00:00-07:00</pubDate>
	  <guid>//monorepo-one-repo-to-rule-them-all</guid>
	  <description><![CDATA[
	     <p>You start having more applications as your system grows. Even if you started with something like a mobile app, you’ll need a backend for it as well as an admin portal (which is usually a website). As engineers, we’re taught to <a href="/serverless-microservices-on-aws-lambda">modularize our software</a>. This article challenges this principal proposing putting all our apps is a single repository for greater efficiency. Keep on reading to learn how.</p>

<h2 id="what-is-a-monorepo">What is a monorepo</h2>
<p>Imagine you have a mobile app, an admin website, and your backend. Traditionally, each one of these apps lives inside its own code repository. On the other hand, you can have all your apps in a single code repository called the monorepo. This way, all apps are located in a single repo that shares the same changelog.</p>

<h2 id="monorepo-advantages">Monorepo Advantages</h2>
<p>As you probably heard <a href="https://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltext" target="_blank">Google</a> and <a href="https://code.facebook.com/posts/218678814984400/scaling-mercurial-at-facebook/" target="_blank">Facebook</a> use a monorepo for their projects. There are numerous reasons for it. At the end of the days, it all comes down to efficiency. Managing your code in a single repository is easier than managing it in multiple repositories. Here is an example:</p>

<h3 id="developer-efficiency">1. Developer Efficiency</h3>
<p>If you need to make a change across all three apps in separate repositories, you’ll need to make the following steps:</p>

<ol>
  <li>Make a change in the app.</li>
  <li>Create a pull request to review the app code.</li>
  <li>Make a change on the backend.</li>
  <li>Create a pull request to review your backend code.</li>
  <li>Make a change on the website.</li>
  <li>Create another pull request to review your web code.</li>
  <li>Merge all three.</li>
</ol>

<p>When you have all apps in a single repository, the need for making different pull requests goes away. This way, you make all changes in one pull request, have your code reviewed once and move on.</p>

<h3 id="simplified-versioning">2. Simplified Versioning</h3>
<p>If your apps are all in different code repositories, each app has to have a different version. Maintaining and matching these versions can be tedious. Monorepo solves this problem by simply having all apps in a single repository.</p>

<h3 id="easier-code-sharing">3. Easier Code Sharing</h3>
<p>Monorepo simplifies code sharing which is beneficial to the health of the codebase overall. Shared code is easier to maintain since the change in a shared component propagates to all places that use it. In addition to it, it’s just easier to move things around and extract the code into reusable components in a monorepo. In case of multiple repositories, you need to extract your code into a different repository and create multiple pull requests to use it in separate projects.</p>

<p><img src="/assets/images/corn_sharing.gif" alt="Sharing" async="true" /></p>

<h2 id="how-to-implement-a-monorepo-in-your-project">How to implement a monorepo in your project</h2>
<p>Depending on your technical stack, there are tools out there (like <a href="https://github.com/lerna/lerna" target="_blank">Learna</a> for the Javascript world)
which help you to implement the monorepo structure efficiently. That being said, you don’t have to use these tools if you don’t see fit. It is possible to implement monorepo yourself if it’s the best thing to do. Either way, you’ll need to deal with the following things:</p>

<h3 id="continuous-integration">1. Continuous Integration</h3>
<p>Since all projects are inside a single repository, you now need to determine which project has changed on each code push. If you’re using git, you can see what files are changed with the following command:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span>git diff commitSha1..commitSha2 --name-only</code></pre></figure>

<p>Then you can detect the project name in the diff with the tools like <em>grep</em>. This will help you to determine which project is changed so you can run the build just for this project and/or it’s dependencies. This technique allows you to keep your builds fast instead of re-running all projects on every single change which doesn’t scale well.</p>

<h3 id="deployment">2. Deployment</h3>
<p>Once you determine which project is changed, you can deploy just the projects that changed or the projects that rely on the changed project. Depending on your system, you’ll need to have different jobs dependent on each other. If you use <a href="https://circleci.com/" target="_blank">CircleCI</a>, it supports specifying dependencies between jobs out of the box in the version 2.0 using <a href="https://circleci.com/docs/2.0/workflows/" target="_blank">workflows</a>. Other CI/CD systems have similar capabilities.</p>

<h3 id="documentation">3. Documentation</h3>
<p>Once all your apps are in the same repo, it’s easy to lose track of your documentation. Make sure you maintain the accurate and up to date documentation for each app. It should be crystal clear where the documentation for each app is. This way each developer can get each app up and running quickly and get to implementing features.</p>

<h2 id="final-words">Final words</h2>
<p>Time and time again I realize that you have to always challenge the status quo. Things move quickly, technologies evolve, so as our users. What worked yesterday is not necessarily what works today. Monorepo is one of the examples of it. Challenging the status quo is how we innovate and build better products. So, go ahead, challenge the way you do things, there is always a better way.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Developer Ethics. 5 Ways To Apply Your Unique Skill To Make A Difference</title>
	  <link>//developer-ethics-apply-your-unique-skill-to-make-a-difference</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2018-03-11T00:00:00-08:00</pubDate>
	  <guid>//developer-ethics-apply-your-unique-skill-to-make-a-difference</guid>
	  <description><![CDATA[
	     <p>As software engineers, we develop products affecting lives of millions of people every single day. This post helps you make better product and engineering decisions.</p>

<h2 id="software-development-is-a-unique-skill-to-have">Software development is a unique skill to have</h2>

<p>Software engineering is really hard. It may look easy on the surface, especially after doing a couple of online courses. It is relatively straightforward to build software by following a template like with <a href="http://rubyonrails.org/" target="_blank">Ruby on Rails</a>. However, no solution is perfect. Sooner or later you’ll need to deviate from the template and things get much more complicated. That’s where you need to know  <a href="https://en.wikipedia.org/wiki/Data_structure" target="_blank">data structures</a>, <a href="https://en.wikipedia.org/wiki/Big_O_notation" target="_blank">Big O notation</a>, <a href="https://en.wikipedia.org/wiki/Software_architecture" target="_blank">software architecture</a>, and many more other things. It takes a lifetime to master all these concepts. In addition to it, software changes rapidly. Technologies that are used to be relevant 5 years ago are no longer relevant. You need to keep up with it in order to stay current. In order to really succeed in software development, the person needs to be detail oriented. That’s why there are many software developers on the job market and there are not that many good ones. If you have this unique skill to write software, you should use it wisely. In wrong hands, your software can overcharge, miss lead, or sometimes even kill people. With big power, comes great responsibility.</p>

<p><img src="https://media.giphy.com/media/fItgT774J3nWw/200w_d.gif" alt="Master Yoda" async="true" /></p>

<h2 id="how-to-apply-your-skill">How to apply your skill</h2>

<h3 id="align-with-the-company-mission">1) Align with the company mission</h3>

<p>If you’re not aligned with your company’s mission, you’re simply wasting your time. Make sure the company you work for does something you believe in. This way, you make better product decisions, you’re more engaged, and more productive. It is also better for your career since you grow as a software engineer faster at the company you’re aligned with.</p>

<h3 id="keep-code-standards-high">2) Keep code standards high</h3>

<p>It’s important to keep the right balance between quality and speed of delivery. We all have deadlines and milestones. Even at crunch time, keep in mind that cutting corners will backfire on you sooner or later. A bug in a system may cost you wasted developer hours, money, customers or sometimes even people’s lives. Make sure your software is solid, write automated tests, do code reviews, etc. Engineering best practices are here for a reason. That being said, sometimes you have to introduce <a href="/5-rules-of-managing-technical-debt-how-to-keep-moving-fast-today-and-tomorrow">technical debt</a>. Make sure to pay it off.</p>

<h3 id="respect-privacy">3) Respect Privacy</h3>

<p>Be mindful of customer data and security. Encrypt sensitive data and personally identifiable information. Put yourself in the shoes of a real customer before implementing your feature.</p>

<h3 id="improve-human-society">4) Improve Human Society</h3>

<p>Think about what your product does besides just making money. Is it improving people lives? Does it make us human beings better? If the answer to these question is yes, you’re in a good place. Make sure you maintain the right balance between doing good and making money. There is always a way to make both things work.</p>

<h3 id="share-the-knowledge">5) Share the knowledge</h3>

<p>Go beyond coding during the day and getting a paycheck. Chances are you’re using free <a href="https://opensource.org/" target="_blank">Open Source</a> packages like <a href="https://nodejs.org/" target="_blank">Node.js</a> or even <a href="https://en.wikipedia.org/wiki/Linux" target="_blank">Linux</a>. Give back to the community. There are many different ways to do it ranging from making open source contributions to writing a blog post or doing a talk at a local <a href="https://meetup.com/" target="_blank">meetup</a>. Together, we can accomplish a lot more.</p>

<h2 id="final-words">Final Words</h2>

<p>I hope this post inspires you to do great things. Since an early age, I always believed in improving human society using technology. Humans can build tools. It’s what got humankind this far. Software is a great tool most of us use every day. Enough talk. So go ahead and build something great.</p>

	  ]]></description>
	</item>

	<item>
	  <title>How to Reduce Manual QA, Increase Product Quality and Iterate Faster</title>
	  <link>//how-to-reduce-manual-qa-increase-quality-of-your-product-and-iterate-faster</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2017-11-12T00:00:00-08:00</pubDate>
	  <guid>//how-to-reduce-manual-qa-increase-quality-of-your-product-and-iterate-faster</guid>
	  <description><![CDATA[
	     <p>Product development is a very complex task involving ideation, product and project management, design, software engineering and testing. As you develop more features, manually testing every feature becomes impossible over time. The number of bugs increases and the development cycle slows down. This post demonstrates how to automate your quality assurance efforts to increase the quality of your product and iterate faster.</p>

<h3 id="why-reduce-manual-qa">Why reduce manual QA</h3>
<p>Let’s take a look at a typical software development cycle with only manual QA.</p>

<p><img src="/assets/images/development_cycle_with_manual_qa.jpg" alt="Software Development Cycle with Manual QA" async="true" /></p>

<p>Let’s say you have two teams, a software development team, and a QA team. Software engineers only write application code, the QA team tests the developed product. Once a new release is developed under phase 1, the software goes to the QA team. The QA team executes manual tests by going through the user interface and making sure the product works right in phase 2. If a bug is found in phase 3, the QA team tells the development team how to reproduce the bug. Sometimes a product manager is involved to prioritize bug fixes to go in certain releases. As you can see, it’s a complex process involving communication between developers and QA engineers on a regular basis. In addition to it, there are only so many manual tests that a human can execute per day.</p>

<p><strong>Manual QA doesn’t scale well.</strong> As I mentioned previously, what happens after you develop more and more features, a number of manual tests increases and teams usually make one of the following decisions. They either hire more QA staff (which may be challenging for startups with limited capital) or execute fewer tests. Unfortunately, most of the companies I’ve seen go with the second approach which causes bugs, loss of customers, and lost revenue.</p>

<p>There is another way, have computers execute tests for you.</p>

<h3 id="what-are-automated-tests">What are automated tests</h3>
<p>When you write a piece of software, you want to make sure it works correctly. Let’s say, you implemented a login screen in your mobile app. After you’re done with your task, you may go ahead, stand up the app and try logging into the system. After you move on to the next feature, you test the next feature is a similar way. As you develop more features, you can’t possibly test all features you developed to date. It will simply take you too much time to test every feature manually every time you change the code. What ends up happening is that you break previously developed functionality without even realizing it.</p>

<p>That’s where automated tests come in. An automated test is a piece of code that executes your manual test. You write it once and execute it with one command any number of times you want. In the example of the login screen, you write a test that stands up the app and taps into a field with an invisible finger, enters some information and checks that the user is successfully logged in.</p>

<p><img src="/assets/images/development_cycle_with_automated_qa.jpg" alt="Software Development Cycle with Automated QA" async="true" /></p>

<p>As you can see from the following diagram, all 3 steps of software development happen during the same development phase. It involves fewer people, it lowers communication overhead and increases quality (computers are more consistent at running tests than humans).</p>

<h3 id="how-to-automate-your-tests">How to automate your tests</h3>

<ul>
  <li>
    <h4 id="product-managers-to-provide-clear-requirements">Product Managers to provide clear requirements</h4>
    <p>Developing and trying to automate an undefined product is very expensive. If requirements constantly change, both, the application code and automated tests need to be constantly rewritten. In addition to it, it’s tough to identify the best testing strategy if you don’t know what kind of product you’re building. Make sure your product manager provides clear acceptance criteria for every user story.</p>
  </li>
  <li>
    <h4 id="engineers-write-unit-and-integration-tests">Engineers write unit and integration tests</h4>
    <p>The problem with a manual test is that you need to have a human executing it every single time which is expensive. If you automate your test, you spend a little more effort upfront by writing it. Then, you have your <a href="https://en.wikipedia.org/wiki/Continuous_integration" target="_blank">continuous integration</a> servers running tests for you as many times and as often as you would like.</p>
  </li>
  <li>
    <h4 id="dont-automate-every-single-thing">Don’t automate every single thing</h4>
    <p>It’s a delicate balance between what makes sense to automate and what doesn’t. You have to compare a time cost and a benefit. In some cases, an integration test gives you the most bang for the buck. In some cases, it’s easier to test an isolated piece of logic with a unit test instead.</p>
  </li>
  <li>
    <h4 id="qa-engineers-test-interactions-between-systems">QA engineers test interactions between systems</h4>
    <p>If your product consists of multiple systems (like a mobile front end, a web front end, multiple back-end services, etc), it’s important to test all pieces altogether. Software engineers make sure every system is functioning correctly. However, it doesn’t really matter if each piece works as expected if the system as a whole doesn’t work. Cross-functional tests are the toughest to write. Make sure you automate the tests you execute most often manually first to be more efficient.</p>
  </li>
</ul>

<h3 id="final-words">Final words</h3>
<p>Automated tests are a great way to increase quality and iterate faster. If you keep your tests healthy, you can ship your software to production at any time. It allows your business to move quicker, iterate and learn faster. Writing automated tests is an important skill for every software engineer. It takes some time to develop and it pays off big time. Every system is different. That’s why you need to constantly challenge yourself with writing fewer tests that cover more functionality.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Serverless Microservices with AWS Lambda. How to Build a Robust and Cost Effective Back End product.</title>
	  <link>//serverless-microservices-on-aws-lambda</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2017-10-15T00:00:00-07:00</pubDate>
	  <guid>//serverless-microservices-on-aws-lambda</guid>
	  <description><![CDATA[
	     <p>You probably heard a lot of hype about the serverless technology like AWS Lambda and microservices. After reading this blog post, you’ll know about pros and cons of using serverless microservices. You’ll also know how to implement an infinitely scalable back end using microservices on AWS Lambda.</p>

<h3 id="why-bother-with-serverless-microservices">Why bother with serverless microservices</h3>
<p>Before we dive into reasons behind using serverless microservices, we need to understand the difference between microservices and a monolith.</p>

<h4 id="what-is-a-monolith">What is a Monolith</h4>
<p><img src="/assets/images/monolith.jpg" alt="Monolith" async="true" /></p>

<p>A monolith is a single back end application. All code is usually located inside a single repository. The entire back end application usually runs on a single server. Even though it’s quicker to build a monolith back end in a short term with frameworks like <a href="http://rubyonrails.org/" target="_blank">Ruby on Rails</a>, <a href="https://www.djangoproject.com/" target="_blank">Django</a> or similar, it has some disadvantages in the long run. As you probably guessed, it’s harder to have multiple developers work in the same code repository as it grows bigger. The biggest disadvantage is resiliency, if there is an issue in a part of the app, the whole back end is down and your app or a website is unusable.</p>

<h4 id="what-are-microservices">What are Microservices</h4>
<p><img src="/assets/images/lights.jpg" alt="Microservices" async="true" /></p>

<p>The <a href="https://en.wikipedia.org/wiki/Microservices" target="_blank">microservices</a> architecture solves these problems. The entire back end consists of multiple small services communicating with each other over HTTP or through a messaging system like <a href="https://www.rabbitmq.com/" target="_blank">RabbitMQ</a>, <a href="https://aws.amazon.com/sqs/" target="_blank">AWS SQS</a> or similar. Microservices take some time to set up. Once the core architecture is set up, you get the advantages like easy work parallelization and increased resiliency. Each developer can work on its own microservice without causing code conflicts with another developer. Each developer can develop a domain expertise allowing to develop features quicker and have a greater sense of ownership. In addition to the increased speed of development, if one microservice is down, the whole system is unaffected. Most of your app or a website functions as normal even though a small part has a problem. This way, there is no interruption of service and your business is better overall because of that.</p>

<h4 id="what-is-serverless">What is serverless</h4>
<p>Serverless is a concept that is developed recently. A traditional back end system is deployed and ran on a server or a group of servers. The advantage of a traditional server approach is that you have control over your own servers and the infrastructure behind it. One of the main disadvantages is an increased cost. Not only you have to hire <a href="https://en.wikipedia.org/wiki/DevOps" target="_blank">DevOps</a> or infrastructure engineers to build and maintain the infrastructure, you also pay for idle servers. Serverless technology solves these problems. With serverless pattern, you use a service that runs your code and maintains the infrastructure behind it. You only pay for the time it takes to process each request. AWS has a service for it called <a href="https://aws.amazon.com/lambda/" target="_blank">AWS Lambda</a>, Microsoft offers similar <a href="https://azure.microsoft.com/en-us/services/functions/" target="_blank">Azure Functions</a>, Google Cloud has <a href="https://cloud.google.com/functions/" target="_blank">Cloud Functions</a>.</p>

<h3 id="how-to-implement-serverless-microservices-on-aws-lambda">How to implement serverless microservices on AWS Lambda</h3>
<p>As you can see, serverless microservices offer increased resiliency, faster speed of development at a lower infrastructure cost.
Let’s figure out how to implement it on AWS Lambda.</p>

<h4 id="create-a-lambda-role-in-iam">Create a lambda role in IAM</h4>
<p>In order to run your lambda on AWS, you’ll need to create a role in IAM and assign permissions to it. Go to IAM, select Roles, click “Create new role”. Attach a policy based on what resources your lambda needs to access. AWSLambdaBasicExecutionRole should work for a very basic case.</p>

<h4 id="write-your-lambda">Write your lambda</h4>
<p>Go to AWS console and choose the Lambda service, click “create function”. You can either choose from existing templates or chose to “Author from scratch”. Choose API Gateway as a trigger and click the “Next” button. As you can see on the next screen, a typical lambda consists of one function named handler. Here is an example:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">'Hello from Lambda'</span><span class="p">);</span>
<span class="p">};</span></code></pre></figure>

<p>Implement your business logic inside the handler function. Once the work is done, call the callback function. Pass null as a first parameter to your callback to indicate success. The second argument is the data returned by the function. If you would like to return a failure, return an error object as a first parameter instead. Here is an example of a lambda function indicating a failure.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">callback</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">"Execution Failed"</span><span class="p">);</span>
<span class="p">};</span></code></pre></figure>

<p>It’s important to note that you have to call the callback function to tell the system that your lambda is done. If you don’t do so, the function keeps running unless it times out. Catch your errors and call your callback explicitly to handle errors.</p>

<p>After you finished implementing your business logic, choose a Role that you created in IAM previously and hit “Next”.</p>

<h4 id="api-gateway">API Gateway</h4>
<p>AWS API Gateway is another service from AWS that helps us to receive an HTTP request. It also helps us to connect the request with our lambda for later processing. If you didn’t read the post on <a href="/build-mobile-apps-faster-with-api-gateway">developing mobile apps faster with AWS API Gateway</a>, I highly recommend it. You’ll know how to simplify even more of your infrastructure to move even faster.</p>

<p>Go to the AWS API Gateway service. If you chose an existing API when you created your lambda, your lambda will be connected to the existing API. If you didn’t have any API before, a new API will be created. From here, you can customize your request, response, headers, etc. You can also create new endpoints and connect them with new lambdas. Every time a request comes in, your lambda will be invoked automatically.</p>

<h4 id="lambda-environments">Lambda Environments</h4>
<p>If you have multiple environments, you will need to create multiple versions of your lambda corresponding to each environment. <a href="https://www.npmjs.com/package/node-lambda" target="_blank">node-lambda npm package</a> handles it out of the box if you specify the –environment parameter. node-lambda also helps you automate the deployment of your lambdas. This way you can develop and test your lambda locally. You can use your version control system. It also allows you to deploy your lambdas to AWS with a single command and your changes will be available in seconds.</p>

<p>Now that you have several versions of your lambda, let’s say hello-world-development and hello-world-staging, you can connect it to the same API using stage variables. Go to your API on AWS API Gateway, click on Stages. For each one of your stages, select your stage, go to the “Stage Variables” tab and create a stage variable named “environment”. For the development stage, set the environment stage variable value to “development”, set it to “staging” for the staging stage. Repeat the same for all your stages.</p>

<p>The last step is configuring the lambda name based on the value of the stage variable named “environment”. Go to your AWS API Gateway, create a new resource and a method, choose the Lambda integration type. In the “Lambda Function” field, specify the name of your function followed by -${stageVariables.environment}. For example, if the name of your lambda is hello-world, enter hello-world-${stageVariables.environment}.</p>

<p><img src="/assets/images/connecting_lambda_with_api_gateway.png" alt="Connecting Lambda with API Gateway" async="true" /></p>

<p>Next, you’ll be prompted by an alert explaining how to grant a permission to execute your lambda with all possible values of your stage variables. Copy the command from this alert, replace ${stageVariables.environment} with your environment name. Run this command from the terminal to grant permissions. Repeat for each environment name.</p>

<p><img src="/assets/images/lambda_allow_permissions.png" alt="Grant permissions for each lambda environment" async="true" /></p>

<h4 id="warm-up-times">Warm up times</h4>
<p>Another thing to take into consideration is warm up times. Since a lambda is ephemeral it’s not running all the time like traditional servers. The very first request usually takes several seconds to warm up any lambda. Subsequent requests are processed quickly. If you develop a real-time API with AWS Lambda, consider setting up Cloud Watch triggers to keep real-time lambdas always warm.</p>

<h3 id="updates">Updates</h3>

<p>Technology evolves quickly and I highly recommend looking into <a href="https://serverless.com" target="_blank">Serverless Framework</a>. Check out the talk I gave at <a href="https://js.la" target="_blank">js.la</a> which has some updated info on serverless:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/PpXIAcwDQI0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen=""></iframe>

<h3 id="final-words">Final words</h3>
<p>Serverless microservices is a cost effective way to develop a resilient back end faster. It takes a little work up front to set it up. Once it’s set up, you start developing your lambdas which are isolated and “infinitely” scalable. This way you can spend more time developing your business logic instead of supporting the infrastructure behind it.</p>

<p>The main takeaway is that you have to think about your application requirements today and tomorrow. I’ve seen so many companies implementing a monolith infrastructure in a hurry, getting stuck with it later, scratching it and starting over again. In order to set yourself up for success, your system needs to be extensible so you can change the pieces of it without affecting the whole system. Microservices is one way of doing it. Think about how you can make your system modular on your project.</p>

<p><em>Thanks to <a href="https://www.flickr.com/photos/otubo" target="_blank">otubo</a>, <a href="https://www.flickr.com/photos/timparkinson" target="_blank">timparkinson</a>, and <a href="https://www.flickr.com/photos/kwanie" target="_blank">kwanie</a> for providing awesome images.</em></p>

	  ]]></description>
	</item>

	<item>
	  <title>5 Rules of Managing Technical Debt. How to Keep Moving Fast Today and Tomorrow.</title>
	  <link>//5-rules-of-managing-technical-debt-how-to-keep-moving-fast-today-and-tomorrow</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2017-09-03T00:00:00-07:00</pubDate>
	  <guid>//5-rules-of-managing-technical-debt-how-to-keep-moving-fast-today-and-tomorrow</guid>
	  <description><![CDATA[
	     <p>If you’re a nontechnical person, you probably heard the terms like <a href="https://www.agilealliance.org/project-management-and-technical-debt/" target="_blank">technical debt</a>, refactoring, and a hack before. Knowing what is technical debt helps you work productively with software engineers. This post explains what technical debt is and how to manage it efficiently.</p>

<h3 id="what-is-technical-debt">What is Technical Debt</h3>
<p>Technical debt is similar to credit card debt. You can spend some extra money now with a credit card. If you won’t pay it back shortly, you’ll be charged interest. If you don’t pay it off for a long time, the amount you owe increases drastically. This decreases your credit score which is hard to recover from.</p>

<p>Taking on technical debt in software product development is very similar to it. In order to accomplish a certain feature faster in the short term, a developer can apply a hack. If the hack is not replaced with a well made out solution, the code around it decays over time. In addition to it, software is built on top of other software. We all use libraries and operating systems. Technologies change and the system needs maintenance updates as time goes by, even if there are no new features being developed. If maintenance updates are not addressed, it also increases your technical debt.</p>

<p><img src="/assets/images/credit_cards.jpg" alt="Credit Card Debt" /></p>

<h3 id="why-taking-on-more-technical-debt-slows-you-down">Why Taking on More Technical Debt Slows You Down</h3>
<p>As you apply more hacks, your future development gets slower, you have more bugs in the product, and you get closer to the point when you need to start over. I’ve seen several companies in the past abandoning and rewriting their entire application from scratch since they were not able to make meaningful progress anymore.</p>

<h3 id="how-to-manage-technical-debt">How to Manage Technical Debt</h3>

<h4 id="get-on-the-same-page-with-engineers-and-stakeholders">Get on the same page with engineers and stakeholders</h4>
<p>It’s crucially important for everyone on your engineering team and for stakeholders to understand the implications of endlessly taking on technical debt. Set up and maintain high code standards and high test coverage on your engineering team. Make sure that stakeholders understand the technical debt concept and how it affects speed and quality of the product. Aligning everyone’s expectations goes a long way.</p>

<h4 id="pay-it-off-right-after-you-introduced-it">Pay it off right after you introduced it</h4>
<p>Every system has technical debt. Sometimes we need to focus on short-term goals. In this case, it’s ok to introduce technical debt <em>if and only if</em> you can pay it off right after you introduced it. The companies that ignore this important fact and continue to what seems like “moving quickly” will eventually slow down to a halt.</p>

<h4 id="revisit-your-architecture-regularly">Revisit your architecture regularly</h4>
<p>What worked several months ago will not necessarily work now. Especially in startups where businesses grow and change fast, it’s important to revisit decisions made in the past. Take your time to <a href="/why-nothing-makes-me-happier-than-deleting-code">refactor (or better yet, delete) code that no longer makes sense</a> in order to accomplish the needs of today. Bring it up with your team as a part of your <a href="/why-throwing-more-features-at-the-product-doesnt-work">retrospectives</a> and make action items to make sure it gets done.</p>

<p><img src="/assets/images/make_it_rain.gif" alt="Make It Rain" /></p>

<h4 id="pay-off-big-debt-incrementally">Pay off big debt incrementally</h4>
<p>When we deal with legacy systems, it may be bigger than a task of one software engineer to refactor it. In this case, make a plan on how you want it to look and change it one piece at the time. It’s important to maintain the vision of what you want this legacy system to be at the end.</p>

<h4 id="leave-the-codebase-in-a-better-place-than-when-you-started">Leave the codebase in a better place than when you started</h4>
<p>I can’t emphasize it enough. All that matters if everyone makes incremental progress towards making the codebase better. It’s impractical to stop feature development to get rid of all technical debt. Maintaining the right balance between feature delivery and paying off technical debt is the key.</p>

<h3 id="final-words">Final Words</h3>
<p>Every system out there has technical debt. Managing it effectively is a skill that can be learned. Technical debt is a risk. It’s best to avoid risk and sometimes you have to take it. As long as the team is disciplined about paying it off, it’s ok. At the end of the days, we all want to ship quality product and managing technical debt is a part of it.</p>

<p><em>Photos are provided by <a href="https://www.flickr.com/photos/p_valdivieso/" target="_blank">p_valdivieso</a> and <a href="https://www.flickr.com/photos/smemon" target="_blank">smemon</a></em></p>

	  ]]></description>
	</item>

	<item>
	  <title>Build Mobile Apps Faster with AWS API Gateway</title>
	  <link>//build-mobile-apps-faster-with-api-gateway</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2017-08-12T00:00:00-07:00</pubDate>
	  <guid>//build-mobile-apps-faster-with-api-gateway</guid>
	  <description><![CDATA[
	     <p>As developers, we want to make sure we add the most value to our products. One of the main ways to add value to a mobile app is making a great UI. After reading this post, you’ll learn how to automate a common task of JSON parsing so you can focus on building a great UI (which is more fun to do anyway 😉)</p>

<h3 id="why-we-care-about-parsing-json-data">Why we care about parsing JSON data</h3>

<p>The answer is simple. Most apps are API powered. In order to make our apps useful, we need to fetch data either from our own back end API or from an external web service. A typical networking architecture for a mobile app looks like this:</p>

<p><img src="/assets/images/typical_networking_architecture.jpeg" alt="Typical Networking Architecture" async="true" /></p>

<p>The data is usually provided by a back end API. Which is consumed by our mobile app over HTTPS. Inside the iOS app, we have a request object responsible for sending and receiving network requests. Once the data is fetched from the network, it’s parsed from JSON and mapped to your model object. After the model object is ready, it can be used by a view controller. This data is now can be displayed in our UI.</p>

<p>As you can see, even a typical networking architecture is complex. There are 4 moving pieces that require integration between each other. The more moving pieces we have in the system, the more potential bugs we have in the app.</p>

<p>Imagine the world where our networking architecture is simplified and it looks like this:</p>

<p><img src="/assets/images/simplified_networking_architecture.jpeg" alt="Simplified Networking Architecture" async="true" /></p>

<p>This architecture is simpler, the request and the JSON parsing components go away completely. Both of these components that you had to code yourself previously are replaced by an auto-generated API Gateway package. The only thing you have to do is to integrate this package with your view controller.</p>

<h3 id="what-is-api-gateway">What is API Gateway</h3>

<p>Before we dive into technicalities of integrating AWS API Gateway into your app, let’s figure out what API Gateway is. API Gateway is an architecture pattern. It allows a client (in our case a mobile app) to request data from a single location (an API Gateway). Instead of requesting multiple pieces of data from different places, API gateway takes our request and figures out which service request the data from. It allows for the micro services architecture on the back end. As an added benefit, both sides (the client and the server) can be changed independently of each other. Which leads to faster release cycles and faster product delivery.</p>

<p>Amazon Web Services (AWS) has its own implementation of the API Gateway pattern called AWS API Gateway. Here is how it looks:</p>

<p><img src="/assets/images/api_gateway_ui.png" alt="AWS API Gateway" async="true" /></p>

<p>There is a web interface available where you can define your API. You can define resources and methods like in any REST API. AWS API Gateway also has an API of its own available as an <a href="https://docs.aws.amazon.com/apigateway/api-reference/" target="_blank">HTTP API</a>. You can also access it from a <a href="http://docs.aws.amazon.com/cli/latest/reference/apigateway/" target="_blank">command line tool</a>.</p>

<p>The best part about AWS API Gateway is that you can generate a client side SDK. This SDK allows you to hit the API you defined and parse a response automatically.</p>

<p><img src="/assets/images/api_gateway_generate_sdk.png" alt="Generate AWS API Gateway SDK" async="true" /></p>

<p>As you can see, there are several options. You can generate an SDK for your Android app, a Javascript website, iOS in Objective-C (<a href="/objective-c-is-dead-why-and-how-to-build-mobile-apps-in-swift">if you’re still stuck in the 90s</a>), iOS in Swift, and Java SDK.</p>

<h3 id="how-to-integrate-aws-api-gateway-sdk-into-your-mobile-app">How to integrate AWS API Gateway SDK into your mobile app.</h3>

<p>In order to integrate the auto-generated SDK into your mobile app, you’ll need to write a little bit of code. Once you set up the initial infrastructure, updating it to support new endpoints is trivial. The code below is in Swift which you can use for your iOS app. Integrating it into an Android, Javascript or a Java app is similar.</p>

<h4 id="back-end-api-type-protocol">Back End API Type protocol</h4>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">protocol</span> <span class="kt">BackEndAPIType</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">createUser</span><span class="p">(</span>
    <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span>
    <span class="nv">completion</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">((</span><span class="kt">NetworkResult</span><span class="o">&lt;</span><span class="kt">User</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">))</span>
  <span class="o">...</span>
<span class="p">}</span></code></pre></figure>

<p>Let’s start with defining a protocol for our back end API. All our API classes will implement this protocol. In our example, it has just one function that creates a user with a name and a completion block. A completion block accepts NetworkResult. NetworkResult is a generic enum specialized with a type of our model (in our case User). Let’s dive into the NetworkResult next.</p>

<h4 id="network-result">Network Result</h4>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">enum</span> <span class="kt">NetworkResult</span><span class="o">&lt;</span><span class="kt">ModelResult</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">case</span> <span class="nf">success</span><span class="p">(</span><span class="kt">ModelResult</span><span class="p">)</span>
  <span class="k">case</span> <span class="nf">failure</span><span class="p">(</span><span class="kt">BackEndAPIError</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>NetworkResult is an enum with two cases: success and failure. The success case has an associated value of our result model. A failure case has an associated value of a BackEndAPIError which we define next.</p>

<h4 id="back-end-api-error">Back End API Error</h4>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">enum</span> <span class="kt">BackEndAPIError</span><span class="p">:</span> <span class="kt">Error</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">missingData</span>
  <span class="k">case</span> <span class="n">mockConfiguration</span>
  <span class="k">case</span> <span class="nf">other</span><span class="p">(</span><span class="nv">error</span><span class="p">:</span> <span class="kt">Error</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>The BackEndAPIError enum implements the Error protocol. You can define your custom errors here. For example, return the missingData error if your request came back with no data. If none of the common cases apply, return the other case with an associated value of the error coming from the back end. Now, most of our networking infrastructure pieces are defined, let’s start making concrete implementations of the BackEndAPIType protocol.</p>

<h4 id="live-back-end-api">Live Back End API</h4>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">LiveBackEndAPI</span><span class="p">:</span> <span class="kt">BackEndAPIType</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">client</span><span class="p">:</span> <span class="kt">MyBackEndAPIClient</span>

  <span class="nf">init</span><span class="p">(</span><span class="nv">apiKey</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">baseURL</span><span class="p">:</span> <span class="kt">URL</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">client</span><span class="p">:</span> <span class="kt">MyBackEndAPIClient</span> <span class="o">=</span> <span class="kt">MyBackEndAPIClient</span><span class="o">.</span><span class="nf">default</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">client</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">apiKey</span> <span class="o">=</span> <span class="n">apiKey</span> <span class="p">{</span>
      <span class="k">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">apiKey</span> <span class="o">=</span> <span class="n">apiKey</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">baseURL</span> <span class="o">=</span> <span class="n">baseURL</span> <span class="p">{</span>
      <span class="k">let</span> <span class="nv">endpoint</span> <span class="o">=</span> <span class="kt">AWSEndpoint</span><span class="p">(</span><span class="nv">region</span><span class="p">:</span> <span class="n">client</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">regionType</span><span class="p">,</span> <span class="nv">service</span><span class="p">:</span> <span class="o">.</span><span class="kt">APIGateway</span><span class="p">,</span> <span class="nv">url</span><span class="p">:</span> <span class="n">baseURL</span><span class="p">)</span>
      <span class="k">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">baseURL</span> <span class="o">=</span> <span class="n">baseURL</span>
      <span class="k">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">endpoint</span> <span class="o">=</span> <span class="n">endpoint</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">createUser</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">((</span><span class="kt">NetworkResult</span><span class="o">&lt;</span><span class="kt">User</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">client</span><span class="o">.</span><span class="nf">userPost</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="n">name</span><span class="p">)</span><span class="o">.</span><span class="n">continueWith</span> <span class="p">{</span> <span class="n">task</span> <span class="k">in</span>
      <span class="k">self</span><span class="o">.</span><span class="nf">processExpectingData</span><span class="p">(</span><span class="nv">task</span><span class="p">:</span> <span class="n">task</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="n">completion</span><span class="p">)</span>
      <span class="k">return</span> <span class="kc">nil</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">private</span> <span class="kd">private</span> <span class="kd">func</span> <span class="n">processExpectingData</span><span class="o">&lt;</span><span class="kt">Model</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">task</span><span class="p">:</span> <span class="kt">AWSTask</span><span class="o">&lt;</span><span class="kt">Model</span><span class="o">&gt;</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="p">((</span><span class="kt">NetworkResult</span><span class="o">&lt;</span><span class="kt">Model</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">error</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="n">error</span> <span class="p">{</span>
      <span class="nf">completion</span><span class="p">(</span><span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="o">.</span><span class="nf">other</span><span class="p">(</span><span class="nv">error</span><span class="p">:</span> <span class="n">error</span><span class="p">)))</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="n">result</span> <span class="p">{</span>
      <span class="nf">completion</span><span class="p">(</span><span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nf">completion</span><span class="p">(</span><span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="o">.</span><span class="n">missingData</span><span class="p">))</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The first implementation of the BackEndAPIType protocol is LiveBackEndAPI. As you might’ve guessed by its name, this class makes live requests to the server. LiveBackEndAPI holds the reference to the client class coming from the AWS API Gateway SDK (it’s named MyBackEndAPIClient in our case). If you have multiple environments (like development, staging, production), you can define a different set of keys for each environment and pass it inside the initializer to configure it appropriately. Once LiveBackEndAPI is initialized, we can call the AWS API Gateway provided function called userPost on the client object. It will make a real HTTP request and give us back an AWSTask class containing either an error or a result. If your request is successful, your result will contain a fully instantiated model (in our case a User) with its fields mapped to the values from the payload.</p>

<h4 id="mock-back-end-api">Mock Back End API</h4>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">MockBackEndAPI</span><span class="p">:</span> <span class="kt">BackEndAPIType</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">createUser</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">((</span><span class="kt">NetworkResult</span><span class="o">&lt;</span><span class="kt">User</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">))</span> <span class="p">{</span>
    <span class="nf">completeWithMockUser</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="n">completion</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">private</span> <span class="kd">func</span> <span class="nf">completeWithMockUser</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="p">((</span><span class="kt">NetworkResult</span><span class="o">&lt;</span><span class="kt">User</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">user</span> <span class="o">=</span> <span class="kt">User</span><span class="p">()</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nf">assertionFailure</span><span class="p">(</span><span class="s">"Failed to create a mock version of a model. Make sure the mock models are used correctly."</span><span class="p">)</span>
      <span class="nf">completion</span><span class="p">(</span><span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="o">.</span><span class="n">mockConfiguration</span><span class="p">))</span>
      <span class="k">return</span>
    <span class="p">}</span>
    <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
    <span class="nf">completion</span><span class="p">(</span><span class="o">.</span><span class="nf">success</span><span class="p">(</span><span class="n">user</span><span class="p">))</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The second concrete implementation of our BackEndAPIType protocol is MockBackEndAPI. It doesn’t make live requests and it’s used primarily in automated tests (both UI and unit tests) and for local development. It’s very useful to use a mock API for writing a robust and a repeatable test suite. You also get a benefit of being able to develop against a non-functioning or even non-existent back end API.</p>

<h4 id="default-api">Default API</h4>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">struct</span> <span class="kt">BackEndAPI</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="k">let</span> <span class="nv">APIKey</span> <span class="o">=</span> <span class="s">"super_secure_key"</span>
  <span class="kd">static</span> <span class="k">let</span> <span class="nv">baseURL</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"https://api.example.com"</span><span class="p">)</span>

 <span class="kd">static</span> <span class="k">var</span> <span class="nv">defaultAPI</span><span class="p">:</span> <span class="kt">BackEndAPIType</span> <span class="p">{</span>
    <span class="k">if</span> <span class="kt">ProcessInfo</span><span class="o">.</span><span class="n">isRunningTests</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kt">MockBackEndAPI</span><span class="p">()</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">let</span> <span class="nv">liveBackEnd</span> <span class="o">=</span> <span class="kt">LiveBackEndAPI</span><span class="p">(</span><span class="nv">apiKey</span><span class="p">:</span> <span class="kt">APIKey</span><span class="p">,</span> <span class="nv">baseURL</span><span class="p">:</span> <span class="n">baseURL</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">liveBackEnd</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The final piece of our network infrastructure is BackEndAPI. It has a static property called defaultAPI which returns us an instance of MockBackEndAPI or a LiveBackEndAPI depending on whether the process runs inside tests or not. The isRunningTests property is specific to each project. There are multiple ways of figuring out whether your process is running inside a test. One of the options is detecting an XCTest class inside the process environment or setting an environment variable of your own.</p>

<h3 id="thats-it">That’s it</h3>

<p><img src="/assets/images/funny_dog_2.jpg" alt="That's it" async="true" /></p>

<p>As you saw, we didn’t have to write any JSON parsing code (which is tedious to write). If you update your API, you just export a new SDK, add it to your app and integrate the new endpoints with your app. It involves significantly less effort and allows you to move faster.</p>

<h3 id="should-you-use-api-gateway-for-your-project">Should you use API Gateway for your project?</h3>

<p>It depends. I’m a firm believer in the value of working code. If there is already an existing API in your project, even if this code is old, as long as you don’t have to touch it, there is no need to rewrite it. What you can try is migrating towards using API Gateway gradually. You can try one endpoint, see how it goes and then migrate the rest.</p>

<p>On the other hand, if you’re starting on a new greenfield project I would definitely give API Gateway a shot. Especially if you’re looking to implement the micro services architecture on the back end. AWS API Gateway also integrates well with AWS Lambda, which is their severless product allowing for cost efficient request execution.</p>

<h3 id="final-words">Final words</h3>

<p><img src="/assets/images/focus_on_what_matters_most.jpg" alt="Focus on what matters most" async="true" /></p>

<p>We covered a lot of things in this post. We found out why consuming data is important since most apps are API powered. We went over the API Gateway pattern and learned how we can simplify our app’s networking architecture to take advantage of AWS API Gateway.</p>

<p>I want to leave you with one takeaway. As software engineers, we play a crucial role in human society. We build tech products which millions of people use every day. In order to continue to do so, we have to focus on what matters most. In mobile apps, the most value is in the user facing UI and the data. The plumbing in between is important and the UI and the data are more important. Using API Gateway is only one of the ways of achieving it. Your project may have a different way of delivering the most value. Let it be your challenge,  think about the ways to focus on what matters most.</p>

<h3 id="more-info">More Info</h3>

<ul>
  <li>You can learn more about <a href="https://aws.amazon.com/api-gateway/" target="_blank">AWS API Gateway here</a>.</li>
  <li>It was great presenting this talk at <a href="https://www.meetup.com/CocoaHeads-LA/events/241390659/" target="_blank">CocoaHeads LA</a>. Come join us on <a href="https://www.meetup.com/CocoaHeads-LA/" target="_blank">meetup.com</a>.</li>
  <li>Here the <a href="https://speakerdeck.com/fsproru/build-mobile-apps-faster-with-aws-api-gateway" target="_blank">slides</a> and the video recording. Enjoy!</li>
</ul>

<iframe width="560" height="315" src="https://www.youtube.com/embed/WZyiLTgmmzc" frameborder="0" allowfullscreen=""></iframe>

	  ]]></description>
	</item>

	<item>
	  <title>Why Nothing Makes Me Happier Than Deleting Code</title>
	  <link>//why-nothing-makes-me-happier-than-deleting-code</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2017-04-02T00:00:00-07:00</pubDate>
	  <guid>//why-nothing-makes-me-happier-than-deleting-code</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. - Antoine de Saint-Exupery</p>
</blockquote>

<h3 id="what">What</h3>
<p>Wait, what? How can deleting code make you happy? Aren’t software engineers paid to write code? Great software engineers are hired to build great products. It indeed involves writing code and deleting unnecessary code makes writing new code even easier. This post explains how to leverage code deletion to your advantage as a software engineer.</p>

<h3 id="why">Why</h3>
<p>Deleting code benefits you, your team and your product. Here is why:</p>

<ul>
  <li>It makes your product easier to use.</li>
  <li>It reduces code complexity, lowers compile times, and lowers test suite run time.</li>
  <li>It makes developers happier. Less code, fewer problems.</li>
</ul>

<p><img src="/assets/images/less_code_fewer_problems.jpg" alt="Less Code Fewer Problems" /></p>

<h3 id="how">How</h3>

<h4 id="focus-on-the-core-experience">Focus on the core experience.</h4>
<p>It’s easy to get distracted by a new shiny feature of a competitor. It’s tempting to implement <a href="/why-throwing-more-features-at-the-product-doesnt-work">more and more features</a> to enhance core user experience. At the end of the days, your core experience has to work. This is what users will come back in your app for. More additional features will distract your user from core experience which you don’t want to do.</p>

<h4 id="use-analytics-to-determine-what-users-actually-use-delete-the-rest">Use analytics to determine what users actually use, delete the rest.</h4>
<p>If you don’t have analytics in your app, you make your product and business decisions based on assumptions. In order to make a real difference in your product development, choose your direction on actual metrics. This way you can see the effect of every feature you ship. Take a look at how the app is used. It may turn out that some portions of the app or a website aren’t used as much. At this point, you can either delete it to simplify the user experience. Alternatively, it gives you a chance to rebuild the under-performing areas of the app if it makes sense to do so.</p>

<h4 id="if-you-dont-need-it-delete-it">If you don’t need it, delete it.</h4>
<p>Over and over again, I hear the concern about leaving existing code in place just in case we need it in the future. The truth is, you don’t need it most of the time. Even if you’ll need it in the future, your system will change so significantly over time so you’ll need to rewrite it anyway. At the end of the days, if you need your old code, your version control system will help you with that. This mentality goes well with the <a href="https://en.wikipedia.org/wiki/You_aren't_gonna_need_it" target="_blank">YAGNI principle</a>.</p>

<h4 id="stick-to-the-kiss-principlehttpsenwikipediaorgwikikissprincipletargetblank">Stick to the <a href="https://en.wikipedia.org/wiki/KISS_principle" target="_blank">KISS principle</a>.</h4>
<p>Keeping things simple is the best thing you can do when building complex systems. Even if building extra capabilities for your product is a more exciting thing to do from a software development perspective, no one benefits from an over-engineered system. Complex systems are hard to use, hard to maintain and it’s prone to bugs. Keep your code simple and always seek opportunities to simplify already complicated pieces of your software architecture. It will pay big dividends over time.</p>

<p><img src="/assets/images/kiss.gif" alt="Kiss" /></p>

<h3 id="final-words">Final words</h3>
<p>At the end of the days, it doesn’t really matter how much code you write. What matters is how fast you can build quality software that drives the business towards success. It’s not fun to be a part of failing startup with great technology that doesn’t help the business. Nor it’s fun to be at the growing business and not being able to iterate fast because of high technical debt. In order to maintain the right balance, you need to determine what’s important for the business. Make important things work really well and leave the rest behind.</p>

	  ]]></description>
	</item>

	<item>
	  <title>5 Steps To Hire Best Software Engineers. 0 to 100 real quick!</title>
	  <link>//5-steps-to-hire-best-software-engineers-0-to-100-real-quick</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2017-02-05T00:00:00-08:00</pubDate>
	  <guid>//5-steps-to-hire-best-software-engineers-0-to-100-real-quick</guid>
	  <description><![CDATA[
	     <div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/0812993012/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0812993012&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=2120756ab226e93d40edaaa7fb74a759"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0812993012&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0812993012" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<h3 id="why">Why</h3>
<p>Hiring is important. Your team is the most valuable asset of the company. Products come and go, markets and technologies change. The team is what makes a company a success! If you’re running a tech company, your software engineers are going to play a vital part in your success. This post explains how to hire best engineers.</p>

<blockquote>
  <p>If you give a good idea to a mediocre team, they will screw it up. If you give a mediocre idea to a brilliant team, they will either fix it or throw it away and come up with something better. - Ed Catmull. Co-Founder of Pixar and the author of <a href="https://www.amazon.com/gp/product/0812993012/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0812993012&amp;linkId=4f4cc7ef29a896fb2d82c61b4f0a582a" target="_blank">Creativity, Inc</a></p>
</blockquote>

<h3 id="sourcing-candidates">1. Sourcing candidates</h3>
<p>The first step, source a lot of candidates. Hiring pipeline is a funnel. There should be a lot of candidates at the very top of the funnel. Only the best engineers who are the right fit will get the offer. In my experience, from 10 engineers there is 1 decent engineer. Also, keep in mind that about 50% of candidates accept the offer. In order to find the right people, source a lot of candidates. Here are the places to look at:</p>

<ul>
  <li><strong>References.</strong> This is the most effective way to get candidates. If a person you trust recommends you an engineer whom he/she worked with before, you should contact this candidate as soon as possible. Great developers want to work with more great developers and this kind of candidates tend to fit well culturally.</li>
  <li><strong>LinkedIn.</strong> Look at some top developer profiles on LinkedIn. On each profile, there is usually a section called “People Also Viewed” with even more profiles. You can click on each of them and then, rinse, repeat. Reach out to developers asking for their interest. You never know who is looking or who is ready to move on.</li>
  <li><strong>Job Postings.</strong> Create a job posting on <a href="https://jobs.github.com/post#create" target="_blank">Github</a>, <a href="http://talent.stackoverflow.com/jobs/create?cw=1" target="_blank">StackOverflow</a> or <a href="https://angel.co/recruiting" target="_blank">Angel List</a>. Keep in mind, the market is hot, so make sure your posting looks attractive.</li>
</ul>

<h3 id="phone-screen">2. Phone screen</h3>
<p>Now that you got in touch with your prospective candidates, schedule a phone screen with them. You’ll have to do a lot of phone screens so it’s important to keep it efficient. I usually do a 45-minute call which is broken down into 3 parts:</p>

<ul>
  <li><strong>Ice-breaker.</strong> I tell about the opportunity and ask questions about the resume. Starting with a question like “How much do you know about the company X ?” can save you some time so you can focus on filling the gaps. Then I ask a couple of questions about the resume. The key here is to keep your questions focused. In this case, you can verify whether they really have the experience listed.</li>
  <li><strong>Simple coding exercise.</strong> I usually do interviews over a video chat like Google Hangout. I ask a candidate to share the screen and implement a simple coding challenge. The candidate is encouraged to ask questions and walk me through the implementation. This step is meant to be a conversation rather than coding in silence. Seeing a person code in real time reveals a lot of things like debugging skills, algorithm choices and communication skills.</li>
  <li><strong>Finishing questions.</strong> This is where high-level architecture or framework knowledge questions go. At the end of the interview, I answer questions the candidate has for me.</li>
</ul>

<h3 id="in-house-interview">3. In-house interview</h3>

<p><img src="/assets/images/job_interview_prank.gif" alt="Job interview prank" async="true" /></p>

<blockquote>
  <p>Be mindful about your and candidate’s time.</p>
</blockquote>

<p>Bring the candidate on-site to show them around the office and meet the team. Your team’s time is valuable, so is the candidate time. Some companies prefer to have a full day on-site interview. I usually keep it short with just two rounds of interviews with developers. Developers go in pairs. Make sure the team synced up before the interview and everybody knows which questions to answer. It’s important to probe for these things:</p>

<ul>
  <li><strong>Code quality.</strong> The most important thing is to figure out if they can write great quality code in a reasonable timeframe. It’s good to give a candidate a moderately complex problem and work with them on coding a solution. You want to make sure the candidate makes reasonable choices. It’s ok to make minor mistakes if they can see it and fix it. Keep in mind that the code you see during the interview will be the code you’ll see in your code base if the person gets hired.</li>
  <li><strong>Cultural fit.</strong> Would you want to work next to this person every day? Does the candidate communicate well? Do you like the person’s attitude? If you’re interviewing a person, these are the questions to ask yourself.</li>
</ul>

<blockquote>
  <p>Treat the candidate the same way you would like to be treated.</p>
</blockquote>

<p>Developer time is a finite resource. If it’s clear that the person is not a fit from the first pair of interviewers, tell the candidate so and stop the interview. Have you ever been in the interview where you didn’t hear anything back? It’s not fun to be in this situation so treat people the way you would like to be treated. Tell the candidate why it’s not the right fit and what they can improve. If you see the potential, tell the candidate that you would like to touch base in the next 6 to 12 months to see if the situation is improved. If you’re not comfortable delivering this feedback in person on the day of the interview then walk out the candidate and follow up the next day over the phone or email.</p>

<p>On the other end, if the candidate made it to the end of the in-house interview, communicate to the candidate that the interview is finished. Tell the candidate that you’ll get back to him/her in the next couple of days.</p>

<h3 id="references">4. References</h3>
<p>Request at least 3 references and call each of them. Ask them about their experience working with the candidate. Ask what the person is good at and what he/she needs to improve. Keep in mind that it will take time since people have their own schedules. It’s important to move quickly. If you’re super excited about the candidate you can make an offer contingent on a reference check.</p>

<h3 id="offer">5. Offer</h3>
<p>You should be excited about the candidate you would like to hire. Get all participants in the room, have each interviewer to write down their outcome. Each person’s outcome should be unaffected by anybody’s opinion. Go around the room where each person reveals the score with the reasoning behind it. If there is a consensus in the room, it’s a pretty easy decision to make. If you’re on the fence, it may be tempting to bring the candidate for another round for more information. From my experience, you don’t get more information after the in-house interview. Make a decision with the information you have. If you’re not sure, the answer is no.</p>

<p>Keep in mind, great software engineers are not on a job market for a long time. You have to move quick. After you know the outcome, communicate it to the candidate. If the answer is no, explain why politely. If the answer is yes, communicate it to the candidate and send the candidate an offer letter. Give a candidate some time to think and follow up on a decision. Good luck!</p>

<h3 id="final-words">Final words</h3>
<p>Hiring is a long play game. You should never hire people you don’t like. Even if you have a lot of work to do, it’s never worth it. Be patient and keep interviewing. Every person counts and hiring the right software engineer will greatly increase your chances of success!</p>

	  ]]></description>
	</item>


</channel>
</rss>
