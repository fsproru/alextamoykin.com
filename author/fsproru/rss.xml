<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>alextamoykin.com</title>
   
   <link>http://alextamoykin.com/</link>
   <description>Building world-class software, teams, and products.</description>
   <language>en-us</language>
   <managingEditor> Alex Tamoykin</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>5 Steps To Hire Best Software Engineers. 0 to 100 real quick!</title>
	  <link>//5-steps-to-hire-best-software-engineers-0-to-100-real-quick</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2017-02-05T00:00:00-08:00</pubDate>
	  <guid>//5-steps-to-hire-best-software-engineers-0-to-100-real-quick</guid>
	  <description><![CDATA[
	     <div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/0812993012/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0812993012&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=2120756ab226e93d40edaaa7fb74a759"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0812993012&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0812993012" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<h3 id="why">Why</h3>
<p>Hiring is important. Your team is the most valuable asset of the company. Products come and go, markets and technologies change. The team is what makes a company a success! If you’re running a tech company, your software engineers are going to play a vital part in your success. This post explains how to hire best engineers.</p>

<blockquote>
  <p>If you give a good idea to a mediocre team, they will screw it up. If you give a mediocre idea to a brilliant team, they will either fix it or throw it away and come up with something better. - Ed Catmull. Co-Founder of Pixar and the author of <a href="https://www.amazon.com/gp/product/0812993012/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0812993012&amp;linkId=4f4cc7ef29a896fb2d82c61b4f0a582a" target="_blank">Creativity, Inc</a></p>
</blockquote>

<h3 id="sourcing-candidates">1. Sourcing candidates</h3>
<p>The first step, source a lot of candidates. Hiring pipeline is a funnel. There should be a lot of candidates at the very top of the funnel. Only the best engineers who are the right fit will get the offer. In my experience, from 10 engineers there is 1 decent engineer. Also, keep in mind that about 50% of candidates accept the offer. In order to find the right people, source a lot of candidates. Here are the places to look at:</p>

<ul>
  <li><strong>References.</strong> This is the most effective way to get candidates. If a person you trust recommends you an engineer who he/she worked with before, you should contact this candidate as soon as possible. Great developers want to work with more great developers and this kind of candidates tend to fit well culturally.</li>
  <li><strong>LinkedIn.</strong> Look at some top developer profiles on LinkedIn. On each profile, there is usually a section called “People Also Viewed” with even more profiles. You can click on each of them and then, rinse, repeat. Reach out to developers asking for their interest. You never know who is looking or who is ready to move on.</li>
  <li><strong>Job Postings.</strong> Create a job posting on <a href="https://jobs.github.com/post#create" target="_blank">Github</a>, <a href="http://talent.stackoverflow.com/jobs/create?cw=1" target="_blank">StackOverflow</a> or <a href="https://angel.co/recruiting" target="_blank">Angel List</a>. Keep in mind, the market is hot, so make sure your posting looks attractive.</li>
</ul>

<h3 id="phone-screen">2. Phone screen</h3>
<p>Now that you got in touch with your prospective candidates, schedule a phone screen with them. You’ll have to do a lot of phone screens so it’s important to keep it efficient. I usually do a 45-minute call which is broken down into 3 parts:</p>

<ul>
  <li><strong>Ice-breaker.</strong> I tell about the opportunity and ask questions about the resume. Starting with a question like “How much do you know about the company X ?” can save you some time so you can focus on filling the gaps. Then I ask a couple of questions about the resume. The key here is to keep your questions focused. In this case, you can verify whether they really have the experience listed.</li>
  <li><strong>Simple coding exercise.</strong> I usually do interviews over a video chat like Google Hangout. I ask a candidate to share the screen and implement a simple coding challenge. The candidate is encouraged to ask questions and walk me through the implementation. This step is meant to be a conversation rather than coding in silence. Seeing a person code in real time reveals a lot of things like debugging skills, algorithm choices and communication skills.</li>
  <li><strong>Finishing questions.</strong> This is where high-level architecture or framework knowledge questions go. At the end of the interview, I answer questions the candidate has for me.</li>
</ul>

<h3 id="in-house-interview">3. In house interview</h3>

<p><img src="/assets/images/job_interview_prank.gif" alt="Job interview prank" async="true" /></p>

<blockquote>
  <p>Be mindful about your and candidate’s time.</p>
</blockquote>

<p>Bring the candidate on-site to show them around the office and meet the team. Your team’s time is valuable, so is the candidate time. Some companies prefer to have a full day on-site interview. I usually keep it short with just two rounds of interviews with developers. Developers go in pairs. Make sure the team synced up before the interview and everybody knows which questions to answer. It’s important to probe for these things:</p>

<ul>
  <li><strong>Code quality.</strong> The most important thing is to figure out if they can write great quality code in a reasonable timeframe. It’s good to give a candidate a moderately complex problem and work with them on coding a solution. You want to make sure the candidate makes reasonable choices. It’s ok to make minor mistakes if they can see it and fix it. Keep in mind that the code you see during the interview will be the code you’ll see in your code base if the person gets hired.</li>
  <li><strong>Cultural fit.</strong> Would you want to work next to this person every day? Does the candidate communicate well? Do you like the person’s attitude? If you’re interviewing a person, these are the questions to ask yourself.</li>
</ul>

<blockquote>
  <p>Treat the candidate the same way you would like to be treated.</p>
</blockquote>

<p>Developer time is a finite resource. If it’s clear that the person is not a fit from the first pair of interviewers, tell the candidate so and stop the interview. Have you ever been in the interview where you didn’t hear anything back? It’s not fun to be in this situation so treat people the way you would like to be treated. Tell the candidate why it’s not the right fit and what they can improve. If you see the potential, tell the candidate that you would like to touch base in the next 6 to 12 months to see if the situation is improved. If you’re not comfortable delivering this feedback in person on the day of the interview then walk out the candidate and follow up the next day over the phone or email.</p>

<p>On the other end, if the candidate made it to the end of the in-house interview, communicate to the candidate that the interview is finished. Tell the candidate that you’ll get back to him/her in the next couple of days.</p>

<h3 id="references">4. References</h3>
<p>Request at least 3 references and call each of them. Ask them about their experience working with the candidate. Ask what the person is good at and what he/she needs to improve. Keep in mind that it will take time since people have their own schedules. It’s important to move quickly. If you’re super excited about the candidate you can make an offer contingent on a reference check.</p>

<h3 id="offer">5. Offer</h3>
<p>You should be excited about the candidate you would like to hire. Get all participants in the room, have each interviewer to write down their outcome. Each person’s outcome should be unaffected by anybody’s opinion. Go around the room where each person reveals the score with the reasoning behind it. If there is a consensus in the room, it’s a pretty easy decision to make. If you’re on the fence, it may be tempting to bring the candidate for another round for more information. From my experience, you don’t get more information after the in-house interview. Make a decision with the information you have. If you’re not sure, the answer is no.</p>

<p>Keep in mind, great software engineers are not on a job market for a long time. You have to move quick. After you know the outcome, communicate it to the candidate. If the answer is no, explain why politely. If the answer is yes, communicate it to the candidate and send the candidate an offer letter. Give a candidate some time to think and follow up on a decision. Good luck!</p>

<h3 id="final-words">Final words</h3>
<p>Hiring is a long play game. You should never hire people you don’t like. Even if you have a lot of work to do, it’s never worth it. Be patient and keep interviewing. Every person counts and hiring the right software engineer will greatly increase your chances of success!</p>

	  ]]></description>
	</item>

	<item>
	  <title>Objective-C Is Dead, Why and How To Build Mobile Apps in Swift.</title>
	  <link>//objective-c-is-dead-why-and-how-to-build-mobile-apps-in-swift</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2017-01-08T00:00:00-08:00</pubDate>
	  <guid>//objective-c-is-dead-why-and-how-to-build-mobile-apps-in-swift</guid>
	  <description><![CDATA[
	     <p>Even though there is a plenty of Objective-C out there, if you’re not writing Swift now, you’re way behind as a <a href="/10-steps-to-become-a-senior-software-engineer/">software engineer</a> and as an engineering organization. This blog post goes over challenges behind using the Swift programming language at a legacy project and how to overcome them.</p>

<h4 id="why-swift">Why Swift</h4>
<ul>
  <li>At this point, Swift is becoming mainstream for iOS app development. It reached a stable place and the API doesn’t change much. There is a plenty of Swift packages.</li>
  <li>More and more <a href="http://crunchybagel.com/building-command-line-tools-with-swift/" target="blank">command line tools</a> are written in Swift outside of mobile app development.</li>
  <li>Swift is picking up momentum on the server-side. There are several server-side swift frameworks available already and <a href="https://swift.org/server-apis/" target="_blank">Apple is now really pushing for server-side Swift</a>.</li>
  <li>Swift is a better language than Objective-C and <a href="http://www.infoworld.com/article/2920333/mobile-development/swift-vs-objective-c-10-reasons-the-future-favors-swift.html" target="blank">this awesome post explains pretty well why</a>. It’s faster, safer, more expressive, and more fun to work with.</li>
  <li>Knowing Swift becomes a requirement for a mobile app developer. If it’s not a requirement for the job you’re applying for, you probably don’t want to work there anyway.</li>
</ul>

<p>I know that you may be using Objective-C and you became very efficient at it. It’s time for a change, so be a <a href="/why-developer-athletes-get-the-best-engineering-jobs">developer athlete</a> and let it go.</p>

<p><img src="/assets/images/let_it_go.gif" alt="Let it go" /></p>

<h4 id="starting-a-new-project-in-swift">Starting a new project in Swift</h4>

<p>Back in August 2014, when I was running the engineering team at AwesomenessTV, I wouldn’t start a new project in Swift. We decided to start a project in Objective-C and migrate to Swift overtime. Here is a quick presentation from the <a href="http://www.meetup.com/LASwift/events/204003792/" target="_blank">LA Swift Meetup</a> explaining the reasoning behind it:</p>

<script async="" class="speakerdeck-embed" data-id="f5daa57536c84933814d37a70730385f" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p>Fast forward a couple of years and my decision would be completely opposite. If you’re starting a new project now, don’t hesitate and choose the Swift language.</p>

<h4 id="migrating-an-existing-objective-c-project-to-swift">Migrating an existing Objective-C project to Swift</h4>

<p>Since Objective-C has been around for almost 20 years, there is a lot of useful code written. Chances are that your existing project is either written in Objective-C entirely or most of the project is written in Objective-C. No worries, here are the steps to migrate it to Swift seamlessly:</p>

<h5 id="commit-to-the-swift-migration-as-a-team">Commit to the Swift migration as a team</h5>
<div class="left-align">
<a target="_blank" href="https://www.amazon.com/gp/product/0385528752/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0385528752&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=47210f7dd43a00a4e662ed2e85cb6129"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0385528752&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0385528752" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<p>Hopefully, you’re on the team with like-minded innovative app developers. If not, there is some work that needs to be done. Depending on your team, you may hold a team meeting where you bring your Swift migration proposal. Come prepared with a detailed plan (we’ll go over that in a bit). If you follow the <a href="/why-throwing-more-features-at-the-product-doesnt-work">Agile Methodology</a>, the best place to bring it up is a retrospective meeting. If you have some old school developers on the team, have a casual conversation with each of them separately. Tell them about your plan and ask them for their opinion. They will feel invested in the outcome. A great book on the topic is <a href="https://www.amazon.com/gp/product/0385528752/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0385528752&amp;linkId=b6b63d68a2b2afdb94968948f614f4ef" target="_blank">Switch: How to Change Things When Change Is Hard</a>.</p>

<h5 id="start-writing-tests-and-new-code-in-swift">Start writing tests and new code in Swift</h5>
<p>Migrating the entire Objective-C codebase to Swift in one shot doesn’t make sense. The benefit of re-writing things in Swift is to improve your code and to make a solid foundation for future changes. If there is some solid Objective-C code in the app that works well and you don’t have to modify it, it doesn’t make sense to re-write it. Focus on new code. The two obvious candidates are your new tests and new code files. Set up your <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html" target="_blank">Objective-C bridging header</a>, start writing new files and in Swift and just reuse the existing Objective-C code. Create <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Extensions.html" target="_blank">Swift Extensions</a> for an already existing Objective-C class if it makes sense.</p>

<h5 id="if-youre-modifying-an-objective-c-file-convert-it-to-swift">If you’re modifying an Objective-C file, convert it to Swift</h5>
<p>If your files are small in size, converting an Objective-C file to Swift may be a straightforward talk as you’re in it. I do it pretty frequently and it’s a great way to make progress on the Swift migration without sacrificing feature velocity.</p>

<h4 id="final-words">Final words</h4>
<p>It’s the best time to be an iOS mobile app developer. Swift is a fantastic programming language and the mobile app industry is a great place to be in. There are new exciting mobile apps built every day. In order to make this world better, we need a better language. So leave the legacy behind and innovate!</p>

	  ]]></description>
	</item>

	<item>
	  <title>Why Developer Athletes Get The Best Engineering Jobs</title>
	  <link>//why-developer-athletes-get-the-best-engineering-jobs</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-11-13T00:00:00-08:00</pubDate>
	  <guid>//why-developer-athletes-get-the-best-engineering-jobs</guid>
	  <description><![CDATA[
	     <h3 id="who-is-a-developer-athlete">Who is a developer athlete</h3>

<p>Let’s first define a developer athlete. As I previously outlined in the <a href="/10-steps-to-become-a-senior-software-engineer/">10 Steps To Become a Senior Software Engineer post</a>, you can become very efficient at computer programming, then what ? Once you know your techstack in and out, it’s time to expand your horizons and become a developer athlete. A developer athlete can dive into any techstack and be productive very fast by building on existing experience in computer engineering.</p>

<h3 id="why-would-you-want-to-be-a-developer-athlete">Why would you want to be a developer athlete</h3>

<p>A developer athlete is a generalist computer software engineer. These kind of players are much more valuable on the team because of the following reasons:</p>

<ol>
  <li>Techstacks change frequently. The whole entire techstack changes completely every 5 years. I went through several techstack changes in my career.</li>
  <li>The company (especially a startup) changes it’s course frequently. In order to stay agile, you have to be open to solving different problems and to using new tools. Developer athletes occupy the best engineering jobs and get the best <a href="/software-engineer-salary-dollar-dollar-bill-yall">software engineer salary</a>.</li>
  <li>Operating in one techstack becomes boring over time. Great players become bored from doing the same thing over and over again. They branch out into a different technology to keep themselves engaged at work.</li>
</ol>

<h3 id="how-do-you-become-an-athlete">How do you become an athlete</h3>

<p><img src="/assets/images/cat_workout.gif" alt="Cat workout" /></p>

<h4 id="demonstrate-the-can-do-anything-attitude">1. Demonstrate the “can do anything” attitude</h4>

<p>You have to get outside of your comfort zone and to be open to diving into any technology. It sounds crazy, and you’ll be surprised how far apart it puts you against your competition. You make your team a lot stronger and lot more resilient by being able to deliver quality work in any techstack. It is true that you don’t go deep into a specific technology and it doesn’t matter as much since you’re already an expert in one techstack. At some point, your team will lose an engineer and the ability to jump in and help out is crucial for the business.</p>

<h4 id="pay-attention-to-the-basics">2. Pay attention to the basics</h4>

<blockquote>
  <p>Focus on fundamentals, the rest will change anyway</p>
</blockquote>

<p>As you get comfortable with changing techstacks, you’ll see that fundamentals stay the same in every single one of them. Whether you’re a web developer writing your next project in Javascript or doing app development in Swift, the fundamentals are the same. All programs are compiled into machine code that gets executed on a processor. It’s true that you don’t have to worry as much about some low level aspects like memory management when using high level programming languages. You still need to understand what happens under the hood in order to build software that performs well.</p>

<h4 id="stay-open-minded">3. Stay open minded</h4>

<p>One phrase that I often hear from junior developers is: “I hate language X and I will never do it.”. Never say never. If you would like to step up your game, you need to appreciate a particular technology for it’s strengths. You’ll also need to know it’s weaknesses. Even though a lot of people “hate” PHP, we wouldn’t be here without it. Most of the software problems that I’ve seen are not about the language you use, it’s about your architecture.</p>

<h4 id="stay-current">4. Stay current</h4>

<p>I learn at least one new programming language and one new framework a year. I picked up Swift 3.0 as a language and Android as a whole new platform this year. Once you master the fundamentals and become efficient at one techstack, you’ll start recognizing patterns. It helps you to take your learning speed onto the whole another level where you can pick up pretty much any techstack quickly. The key here is to pay attention to tech industry dynamics and play around with new technologies. You never know, it may be the best tool for the job on your next project.</p>

<h4 id="exercise-eat-and-sleep-well">5. Exercise, eat and sleep well</h4>

<p>As you grow, your responsibilities grow with it so as the impact of your decisions. The ability to be present in a high stakes meeting or the ability to focus while coding is key. Think of yourself as an athlete that needs rest before the next race. Your brain needs rest while sleeping. Your body needs an exercise and the right nutrition to operate well. All these systems are connected and it affects your ability to execute during the day.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Ship On Time: How to Give Accurate Software Estimates</title>
	  <link>//ship-on-time-how-to-give-accurate-software-estimates</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-10-30T00:00:00-07:00</pubDate>
	  <guid>//ship-on-time-how-to-give-accurate-software-estimates</guid>
	  <description><![CDATA[
	     <p>Imagine your CEO casually asks you: “Hey, how long would it take you to implement the feature X?”. You don’t want to disappoint your CEO and you’re feeling pressured for an answer, so you respond: “It’s pretty simple, I’ll get it done in a week.”. The CEO is happy, you’re fired up. As you’re working on the feature, you find our that you have an external dependency that makes it tricky. The code needs to be refactored and there are no tests. At the end of the week, the CEO shows up again. He/she already sold it to a prospective client but you now need to deliver bad news. We’ve all been there. After reading this post, you’ll know how to prevent it from happening.</p>

<h2 id="why-software-estimates-are-important">Why software estimates are important</h2>
<ol>
  <li>Stakeholders need it to make business decisions</li>
  <li>It helps you understand what you need to build</li>
  <li>It helps you understand how you need to build it</li>
</ol>

<h2 id="how-you-can-estimate">How you can estimate</h2>
<p>One of my old bosses from Russia brought up a simple formula:</p>

<blockquote>
  <p>Think of a worst possible case, double it and you’ll still be wrong. - My Old Boss</p>
</blockquote>

<p>Even though it sounds like a joke, there is something we can learn from it. You can’t predict it exactly right, period. You may know a lot of things, but you don’t know what you don’t know. A software is built on top of other software and you can’t control it completely. There is a technique that I developed over the years that will help you to get it very close. Here are the steps:</p>

<h3 id="gather-requirements">Gather requirements</h3>

<blockquote>
  <p>If you don’t know where you are going, you’ll end up someplace else. - Yogi Berra</p>
</blockquote>

<p>The minute someone asks you about a new feature, ask questions to clarify details. It will lead to more questions and unknowns. Rinse, repeat until you get all your questions answered.</p>

<p>Here is an example. Let’s say we would like to build new profile screen for your user. How should this screen look? Where should the avatar be located? What color is the font, what size it is ? How long should a bio be ? Should we allow editing the bio? Etc.</p>

<h3 id="break-it-down">Break it down</h3>
<p><img src="/assets/images/break_it_down.gif" alt="Break It Down" async="true" /></p>

<p>Now that you have all your questions answered, it’s time to do your homework and break it down. The goal is to break down every individual requirement into small tasks so you can clearly estimate each of them. If your estimate seems high, break down a big task into a set of smaller tasks. Keep breaking it down until your estimate is clear and reasonable. Some people prefer doing it in hours, some people use points. We’ll use hours in this example to keep it simple.</p>

<ul>
  <li>Profile screen scaffold - 0.5 hour</li>
  <li>Serve a user avatar URL from the back end - 1 hour</li>
  <li>Display an avatar image centered on the screen - 0.5 hour</li>
  <li>Serve a user bio from the back end - 0.5 hour</li>
  <li>Display a bio on the profile screen - 0.5 hour</li>
  <li>Create an edit bio endpoint on the back end - 1 hour</li>
  <li>Present a new edit bio screen when user taps on a bio - 1 hour</li>
  <li>Send a bio request and update the bio on the profile screen - 1.5 hours</li>
</ul>

<p>Total: 6.5 hours</p>

<p>This is just a hypothetical example. Your estimates may be different depending on the state of your app, your familiarity with the codebase or even the team you’re on. Factor risk in your individual estimates.</p>

<h3 id="estimate">Estimate</h3>
<p>If you made it to this point, you’re in a pretty good shape. The hardest part is already done and all you need to do is to plug numbers into a simple formula:</p>

<p><strong>Estimate = Total + (Risk Factor * Total)</strong></p>

<p>Yes, a risk factor. Always factor in a risk factor. There is always something that you didn’t think of or something is outside of your control. The exact number varies from project to project. I’ve seen projects executed with a 20% risk factor with an established team and a solid codebase. And I saw a risk factor being as high as 100% for systems that need to talk to some weird unreliable API.</p>

<h3 id="communicate">Communicate</h3>
<p>Communicate your estimate to your steak holders, commit to it and start development. Show progress often and ask for feedback. It allows you to accomplish the following:</p>

<ol>
  <li>It keeps stakeholders involved</li>
  <li>Stakeholders see your progress</li>
  <li>You can course correct early if anything changes</li>
</ol>

<p>I was once in a situation where a feature set wasn’t presented to a stakeholder properly in the very beginning. As a result, a stakeholder had different expectations. If we would show progress earlier, it would be easier to course correct.</p>

<h3 id="falling-behind-re-negotiate">Falling behind? Re-negotiate</h3>
<p>As with any commitment, here are the only things you can do:</p>

<ul>
  <li>Fulfill the commitment, or</li>
  <li>Avoid the commitment, or</li>
  <li>Re-negotiate</li>
</ul>

<p>Notice that failing to deliver on your commitment is not an option. Even though delivering bad news is uncomfortable, failing to deliver your commitment is even worse. People loose trust in your which is hard to recover from. Do one of the things above instead.</p>

<h2 id="final-words">Final words</h2>
<p>At the end of the days, it all comes down to communication. Chose your words wisely and make sure the other side understands you. You are a part of the team and getting expectations aligned makes everyone’s life easier. There is no harm in delivering even bad updates early. People will appreciate it in the long run. You’ll be off sometimes in your estimation and it’s fine as long as you can communicate clearly and re-negotiate. You’ll get better at estimation over time. You may also notice that estimation takes time. You’ll be in a better place if you take your time to estimate your project properly instead of giving a wrong estimate on the spot. Giving accurate estimates is a crucial soft skill for a <a href="/10-steps-to-become-a-senior-software-engineer/">Senior Software Engineer</a>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Software Engineer Salary: Dollar Dollar Bill Y'All</title>
	  <link>//software-engineer-salary-dollar-dollar-bill-yall</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-10-16T00:00:00-07:00</pubDate>
	  <guid>//software-engineer-salary-dollar-dollar-bill-yall</guid>
	  <description><![CDATA[
	     <p>Are software engineers fairly compensated at your company? Do you or your colleagues focus on building the product instead of getting a raise? Everyone needs to be properly incentivised in order for the team to succeed. Fair software developer salary plays a big part in it. After reading this blog post, you’ll know to play this game right.</p>

<h2 id="the-best-a-salary-can-do-for-you-is-make-you-forget-about-it">The best a salary can do for you is make you forget about it</h2>
<p>If you want to know the actual numbers, keep reading till the end. What matters more than numbers is <em>you and your team focusing on building the product</em>. This is how you win. On the other end, trying to maximize your salary is a slippery slope. You can’t win this game because of the following reasons:</p>

<ol>
  <li>You can always find a place that will pay you more</li>
  <li>Focusing on a promotion doesn’t make you a better software engineer</li>
  <li>The company (especially if it’s an early stage startup) has limited cash that will evaporate if everyone in a company focuses on getting more salary</li>
</ol>

<h2 id="a-higher-salary-doesnt-mean-a-better-job">A higher salary doesn’t mean a better job</h2>
<p>Imagine you’re interviewing at multiple companies and you get an offer that is way above what everyone is willing to pay. You may be excited like this dude:
<img src="/assets/images/excited.gif" alt="Excited dude" async="true" />
If a company wants to pay you a salary significantly above the market, in most cases, there is a reason for it. It may be a big company with a lot of cash and boring work to do. Or the company may be struggling to find people who believe in their mission. Don’t get the high number distract you. Make sure you join a solid team that you can learn from. You’ll spend a lot of time with this group of people every day. Find the company with the vision you believe in. These things matter more than your salary in the grand scheme of things.</p>

<h2 id="ask-for-the-right-number-no-more-no-less">Ask for the right number. No more, no less.</h2>
<p>You should ask for a fair market salary in your geographic area. Look at the salary statistic sites like <a href="https://salary.com" target="blank">salary.com</a> for your experience level and take it as a guiding factor. Don’t accept the offer drastically below or above your current level since you don’t want to be in either of these two situations:</p>

<ol>
  <li>You are underpaid. Let’s say you got excited about a new hot startup. You really want to work there but they say they can’t pay you a reasonable salary for some reason. Maybe money is not super important to you because of your lifestyle and you say yes to it. Sooner or later, your friend developer from another company will tell you how much he/she makes and you’ll eventually quit.</li>
  <li>You are overpaid. The employer really wants to hire you and they decide to pay a price above your level. Even though you’ll get paid a lot of money, your employer will have extremely high expectations of you. Most likely, these expectations will be unrealistic and they will be pressured to terminate you after reviewing engineering budget. In addition to it, your colleague at the same company will eventually know that you’re overpaid. News spread out quickly and it will ruin team morale.</li>
</ol>

<h2 id="negotiation-is-key">Negotiation is key</h2>
<div class="left-align">
<a href="https://www.amazon.com/gp/product/0931213207/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0931213207&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=99431d63288d3fd28e93cacc1f9e26f4"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0931213207&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0931213207" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<p>One of the most important skills to get the right developer salary is a negotiation. I recommend reading <a href="https://www.amazon.com/gp/product/0931213207/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0931213207&amp;linkId=cadf10a661a16a5100bc1d5f9d6dfeed" target="_blank">Negotiating Your Salary: How To Make $1000 a Minute</a>. It explains basic negotiation tactics for salary negotiation. One key advice that I took from this book is to avoid revealing your salary expectations until you make sure it’s the right fit. After being on both sides of the hiring process, I can definitely see how it helps both parties focus on what’s important. Revealing your salary expectations which may or may not fit in a pre-defined budget can be very distracting which can finish a conversation in the very beginning.</p>

<h2 id="how-important-tech-for-your-employer">How important tech for your employer</h2>
<p>Salary negotiation is a two-sided process. Let’s see how it looks from the employer’s perspective. In general, companies can be subdivided into tech companies and non-tech companies. In tech companies, technology plays a crucial role in product development. In other words, if the engineering department disappears, the company is in a big trouble. Engineers are valued in tech companies the most. In this situation, the main focus of the employer is to find top class developers. Every developer makes a massive impact on the business and there is not many great developers available in a current hot job market. You’ll learn the most in such a company and the employer will generally have no problem paying you what you’re worth.</p>

<p>On the other side, in non-tech companies, the main product is powered by an external technology as a service or operationally. Technology is a nice to have addition to the product. In this kind of environment, engineering has a secondary focus in the company. When something is not your primary focus, you would like to get it done cheap and fast. Non-tech companies can afford to hire low-quality talent because of the low technology impact for their business. It’s a good starting point if you are a junior developer. You won’t experience significant growth here and you won’t get paid as much. Make sure you choose the right company for your career stage.</p>

<h2 id="how-much-is-a-senior-software-engineer-salary">How much is a senior software engineer salary</h2>
<p><img src="/assets/images/kanye-west-make-it-rain-dollar.gif" alt="Kanye west makes it rain" />
Another reason to become a <a href="https://alextamoykin.com/10-steps-to-become-a-senior-software-engineer/">Senior Software Engineer</a> is a pretty good salary, comparing to the other professions. It depends on many factors. Junior software engineer salary in Los Angeles starts from $80,000 and it may go to $200,000 and above for a principal role at some companies. It depends on many factors like cost of living, geographic area, technical stack, job market etc.</p>

<h2 id="final-words">Final words</h2>
<p>Focus on your growth and the right thing will happen. The company will become stronger because you deliver a better product and your compensation package will grow with it. In a healthy company, it will always be the case. The main asset of the company, especially in the startup world is <em>the team</em>. If your team grows, the company grows. Companies you want to work in understand it and that’s why they have regular performance reviews and promotions.</p>

	  ]]></description>
	</item>

	<item>
	  <title>3 Must Read Books for Software Consultants</title>
	  <link>//3-must-read-books-for-software-consultants</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-09-12T21:54:34-07:00</pubDate>
	  <guid>//3-must-read-books-for-software-consultants</guid>
	  <description><![CDATA[
	     <p>There are a number of books that you can read on software consulting. These three books focus on the management and business development aspect of running a consulting shop. I specifically didn’t mention any technical books since there are a lot of different ways you can specialize in (if you are looking for tech books, keep reading, I have it for you at the end of this post). Even if these things don’t feel as attractive as diving into a new technology, it is vital to obtain business skills in a software development consulting world. It’s on a full time job there is no need to find work, when you freelance, you need to hustle to get clients. The good news that it’s not a rocket science, so these three books will get you up and running pretty fast:</p>

<h3 id="get-clients-now-by-c-j-haydenhttpswwwamazoncomgpproduct081443245xrefaslitlieutf8taghowtoprogramb-20camp1789creative9325linkcodeas2creativeasin081443245xlinkidd0222499a3fa0d9b0f1e3d475eba72ee">1. <a href="https://www.amazon.com/gp/product/081443245X/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=081443245X&amp;linkId=d0222499a3fa0d9b0f1e3d475eba72ee">Get Clients Now by C. J. Hayden</a></h3>
<div class="left-align">
<a href="https://www.amazon.com/gp/product/081443245X/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=081443245X&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=d54ee2399d30a695ca2bd1ae2b9494f0"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=081443245X&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=081443245X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<p>If you want to have clients, this is an absolute must read. I love the cookbook format of Get Clients Now. It describes a 28 marketing program that leads you to having clients. You choose the tactics that suit you best. If you are best at writing, there is a writing and publicity tactic. If you are great at public speaking, it goes in detail how to utilize it to get clients. After going through the program, you’ll obtain the necessary skills in marketing and sales. You can use these skills to continue having clients in the future. You can get it from Amazon <a href="https://www.amazon.com/gp/product/081443245X/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=081443245X&amp;linkId=d0222499a3fa0d9b0f1e3d475eba72ee">here</a>.</p>

<h3 id="getting-things-done-the-art-of-stress-free-productivity-by-david-allenhttpswwwamazoncomgpproduct0143126563refaslitlieutf8taghowtoprogramb-20camp1789creative9325linkcodeas2creativeasin0143126563linkid93a5923f4c2aaec3f72f17784368ae56">2. <a href="https://www.amazon.com/gp/product/0143126563/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0143126563&amp;linkId=93a5923f4c2aaec3f72f17784368ae56">Getting Things Done: The Art of Stress-Free Productivity by David Allen</a></h3>
<div class="left-align">
<a href="https://www.amazon.com/gp/product/0143126563/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0143126563&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=c57e35d7626da1e58b0374b13b0e8dbc"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0143126563&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0143126563" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>
<p>As you get more clients, you’ll need to do more business development, answer more emails, phone calls, etc. Combining it with coding which is a flow based activity is an art of it’s own. I like the Getting Things Done book because it talks about a framework that allows for efficient execution of both (coding and business development). After using the Getting Things Done methodology at work myself, I now successfully use it to run my errands and many things in life. Here is the <a href="https://www.amazon.com/gp/product/0143126563/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0143126563&amp;linkId=93a5923f4c2aaec3f72f17784368ae56">link to the book</a>.</p>

<h3 id="drive-the-surprising-truth-about-what-motivates-us-by-daniel-h-pinkhttpswwwamazoncomgpproduct1594484805refaslitlieutf8taghowtoprogramb-20camp1789creative9325linkcodeas2creativeasin1594484805linkidb3cf0259b22793a6472bfd20c1fbd9bb">3. <a href="https://www.amazon.com/gp/product/1594484805/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=1594484805&amp;linkId=b3cf0259b22793a6472bfd20c1fbd9bb">Drive: The Surprising Truth about What Motivates Us by Daniel H. Pink</a></h3>
<div class="left-align">
<a href="https://www.amazon.com/gp/product/1594484805/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1594484805&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=b7b583d425923e0f0d302283dacc3ec7"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1594484805&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=1594484805" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>
<p>In order to be successful in this business, you’ll need to stay motivated and motivate others. When you team grows, you’ll need to get them fired up about the new project. When a new prospect arrives, you’ll need to get him excited about your team and expertise. Even every time you wake up in a morning and go to work, you need to motivate yourself to do so. The reason I love this book is that it goes deep in explaining what motivates people. It’s combined with scientific studies. The author proposes the three major things on the path to sustainable motivation which are: autonomy, mastery and purpose. I highly recommend reading through it to understand how you can integrate it into your work and life. You can click here to get <a href="https://www.amazon.com/gp/product/1594484805/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=1594484805&amp;linkId=b3cf0259b22793a6472bfd20c1fbd9bb">this book</a>.</p>

<h3 id="bonus-freelancers-show-podcasthttpsdevchattvfreelancerstargetblank">Bonus: <a href="https://devchat.tv/freelancers" target="_blank">Freelancer’s Show Podcast</a></h3>
<div class="left-align">
<a href="https://devchat.tv/freelancers"><img src="/assets/images/freelancers_show_thumb.jpg" alt="The Freelancers Show Logo" /></a>
</div>
<p>This podcast is awesome. It’s ran by a long time developer <a href="https://twitter.com/cmaxw">Charles Max Wood</a>. He invites different kind of people to the podcast raging from software freelancers to finance people and lawyers. They discuss topics specific to software consulting and the new episodes come out regularly. I highly recommend to listen to the Freelancer’s Show Podcast as well as the rest of <a href="https://devchat.tv/">DevChat.tv podcasts</a></p>

<h3 id="recap">Recap</h3>
<p>These books are a good starting point and you can take it from here. You’ll start getting the fruits of your labor once your client pipeline is built and working. The good news is that once you get it all set up, you can continue focusing on fun stuff like technology. If you are looking for good reads to master your craft as a software engineer, I recommend reading my earlier post - <a href="http://howtoprogrambetter.com/10-steps-to-become-a-senior-software-engineer/">10 Steps To Become a Senior Software Engineer</a>.  Enjoy.</p>

<p><em>Photo by <a href="https://www.flickr.com/photos/themarmot">themarmot</a>, this post participates in the <a href="http://www.freelancermap.com/freelancer-tips/11536-blog-carnival--book-recommendations-for-freelancers" target="blank">Blog Carnival program on Freelancer Tips</a></em></p>

	  ]]></description>
	</item>

	<item>
	  <title>Top 5 Pitfalls of a Software Development Consultant</title>
	  <link>//top-5-pitfalls-of-a-software-development-consultant</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-09-09T21:35:22-07:00</pubDate>
	  <guid>//top-5-pitfalls-of-a-software-development-consultant</guid>
	  <description><![CDATA[
	     <p>If you never did software consulting, you’ll need to take care of several things. It’s important to do it right from the beginning in order to avoid issues later. I was lucky to have veteran consultants providing me with an advise. After running a software consultancy of my own, I’ve also learned several things the hard way. Here we go, my guest posts on top 5 consulting pitfalls at <a href="http://www.freelancermap.com/freelancer-tips/11534-top-5-pitfalls-of-a-software-development-consultant" target="blank">Freelancer Tips</a>.</p>

<p><em>Photo by <a href="http://www.flickr.com/photos/atoach">atoach</a></em></p>

	  ]]></description>
	</item>

	<item>
	  <title>Living in the Fastlane &#8211; Deploying 100 Apps to the App Store at Victorious</title>
	  <link>//living-in-the-fastlane-deploying-100-apps-to-the-app-store-at-victorious/</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-05-23T21:45:29-07:00</pubDate>
	  <guid>//living-in-the-fastlane-deploying-100-apps-to-the-app-store-at-victorious/</guid>
	  <description><![CDATA[
	     <p>If you need to submit more that one app to App Store or Google Play store, this talk is for you! Here is how we automated our App Deployment Pipeline. We can now submit ~100 apps to the App Store at Victorious with a single command. You’ll learn how to use Fastlane so you can use it for your needs too.</p>

<p>Here is the <a href="https://www.youtube.com/watch?v=pz3gVnIlpyI">video recording</a></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/pz3gVnIlpyI?controls=0" frameborder="0" allowfullscreen=""></iframe>

<p>and <a href="https://speakerdeck.com/fsproru/living-in-the-fastlane">slides</a></p>

<script async="" class="speakerdeck-embed" data-id="d40a008c79da4db695dcc0fcc4c2dbf9" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p><br />
Presented at the <a href="http://www.meetup.com/CocoaHeads-LA/events/230662812/" target="_blank">CocoaHeads Los Angeles meetup</a></p>

<p>Enjoy,</p>

<p>Alex</p>

	  ]]></description>
	</item>

	<item>
	  <title>Test Driven Development with Xcode</title>
	  <link>//test-driven-development-with-xcode/</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-03-13T22:11:26-07:00</pubDate>
	  <guid>//test-driven-development-with-xcode/</guid>
	  <description><![CDATA[
	     <p>Test Driven Development is a great way to take your code to a whole another level. In this presentation, we’ll talk about what is TDD, why TDD is awesome and how to do it in Xcode using Swift and XCTest</p>

<p>Here is the link to a <a href="https://youtu.be/06-9Xsd8saA">Video Recording</a></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/06-9Xsd8saA?controls=0" frameborder="0" allowfullscreen=""></iframe>

<p>and <a href="https://speakerdeck.com/fsproru/test-driven-development-with-xcode">Slides</a></p>

<script async="" class="speakerdeck-embed" data-id="c7250296330e420e857540912eee7a4f" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p><br />
Presented at <a href="http://www.meetup.com/CocoaHeads-LA/events/225155127/" target="_blank">CocoaHeads LA – Testing Edition</a></p>

<p>Enjoy,</p>

<p>Alex</p>

	  ]]></description>
	</item>

	<item>
	  <title>Interview at Swift Coders Podcast</title>
	  <link>//interview-at-swift-coders-podcast/</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-03-06T20:35:22-08:00</pubDate>
	  <guid>//interview-at-swift-coders-podcast/</guid>
	  <description><![CDATA[
	     <p>We’re big proponents of <a href="https://swift.org/" target="_blank" rel="nofollow">Swift</a>, Apple’s new programing language at <a href="http://rightbalance.io/" target="_blank" rel="nofollow">The Right Balance</a>. It’s exciting to see the Swift community evolving. It was great to speak at the opening podcast dedicated to Swift Development called <a href="http://swiftcoders.org/" target="_blank" rel="nofollow">Swift Coders</a>. Kudos to <a href="https://twitter.com/garricn" target="_blank" rel="nofollow">Garric Nahapetian</a> for putting it together.</p>

<p>Check out <a href="https://itunes.apple.com/us/podcast/swiftcoders/id1082937962?mt=2&amp;i=362557025" target="_blank" rel="nofollow">the first episode here</a>, we hope that you really like it.</p>

	  ]]></description>
	</item>


</channel>
</rss>
