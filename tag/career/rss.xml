<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>alextamoykin.com</title>
   
   <link>http://alextamoykin.com/</link>
   <description>Building world-class software, teams, and products.</description>
   <language>en-us</language>
   <managingEditor> Alex Tamoykin</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Hidden Costs of Hiring a Software Engineer</title>
	  <link>//hidden-costs-of-hiring-a-software-engineer</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2020-03-22T15:55:16-07:00</pubDate>
	  <guid>//hidden-costs-of-hiring-a-software-engineer</guid>
	  <description><![CDATA[
	     <p>You did a lot of work interviewing candidates and you found the right person, congratulations! Your new software engineer will soon join the team and there are some things you should take care of before he/she comes on board. Each person has an extra cost in addition to their compensation. Knowing how much money you spend per new engineer helps you with hiring plans. Also, it makes product road-map planning process much easier. There are a lot of things to consider, but no worries, this post lists most of them.</p>

<h4 id="compensation">Compensation</h4>
<p>The highest item on almost every engineering budget is a <a href="/software-engineer-salary-dollar-dollar-bill-yall" target="_blank">software developer salary</a>. Good software engineers are well worth the money. You don’t want to be in a situation where you constantly have to clean up after a bad and cheaper engineer. It hurts morale and slows the team down. Find the right people and pay them what they’re worth.</p>

<h4 id="recruitment-fees">Recruitment Fees</h4>
<p>If you use external recruiters, they will most likely charge you from 15% to 25% of a developer annual salary. Good software engineers are not on the job market for a long time and the market is very competitive. It may be worth it for the right candidate. I recommend introducing an internal referral program where people receive a bonus when they refer a developer from their personal network.</p>

<h4 id="furniture">Furniture</h4>

<h5 id="desk">Desk</h5>
<p>Your developers will spend most of their work day at the desk and you want to make sure they are comfortable. I recommend going with an adjustable desk. You can put it up or down depending on your preference and height. Since you spend most of the time typing in front of the computer, the key is to move around and a standing desk allows you to do so. There should be enough space on a table for a monitor, a laptop, a keyboard, a mouse / trackpad, etc. You can go very expensive with high-end models like <a href="https://www.geekdesk.com/" target="_blank">Geek Desk</a> or a simple <a href="http://www.ikea.com/us/en/catalog/products/S49084965/" target="_blank">standing desk from IKEA</a> will work just fine.</p>

<h5 id="chair">Chair</h5>
<p>I recommend going with an adjustable chair. It goes well with a standing desk setup. <a href="https://www.amazon.com/gp/product/B0030ZDZL8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B0030ZDZL8&amp;linkId=567c4bc5ba8004c9cbaa9b84523df305" target="_blank">A drafting stool from Boss Office</a> is a good enough choice or you can go with a <a href="https://www.amazon.com/gp/product/B000SMTJNO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B000SMTJNO&amp;linkId=accf3816166be8f2672dfe307b664e8b" target="_blank">cheaper option instead</a>.</p>

<h4 id="hardware">Hardware</h4>
<p>People have their own preferences and every project has different needs. I recommend going with a laptop and a monitor set up. It allows you to have enough real estate while working at your desk and using the same laptop at a meeting.</p>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/B00XZGUL8W/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00XZGUL8W&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=0974e0eeb4efad8a255d5b4334c45c6b"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=B00XZGUL8W&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=B00XZGUL8W" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<h5 id="laptop">Laptop</h5>
<p>The best laptop out there is the latest <a href="https://www.amazon.com/gp/product/B00XZGUL8W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B00XZGUL8W&amp;linkId=20605e5b91ef2f18bba56d24526ad640" target="_blank">Mac Book Pro</a>. I usually choose the latest and greatest processor, RAM and of course a solid state drive. It will get you pretty far with this setup. You can set it up with the tools like <a href="https://github.com/pivotal-sprout/sprout-wrap" target="_blank">Sprout Wrap</a> to install the necessary development environment and applications. The top quality is the strength of Apple products that comes with a high price. That being said, you usually get what you paid for.</p>

<p>You can get a similar Windows PC laptop if you choose to work under the Windows operating system. Installing Linux on either a Mac Book Pro or a PC is also an option. You can install <a href="https://www.ubuntu.com/desktop/developers" target="_blank">Ubuntu</a> side by side with the host operating system or use a virtual machine software like <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank">Virtual Box</a> [Free] or <a href="http://www.parallels.com/" target="_blank">Parallels</a> [Paid].</p>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/B016QO64FI/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B016QO64FI&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=6dbcf43fe93648bae52df247ba719bd5"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=B016QO64FI&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=B016QO64FI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<h5 id="keyboard">Keyboard</h5>
<p>The most durable keyboard that I found is the <a href="https://www.amazon.com/gp/product/B016QO64FI/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B016QO64FI&amp;linkId=1f7154e4a0a09ba7865c13746a4375dd" target="_blank">Apple Magic Keyboard</a>. The latest model removes all the hassle of Bluetooth pairing. The keys are lower so you’re able to type faster.</p>

<h5 id="monitor">Monitor</h5>
<p><a href="http://www.theverge.com/2016/6/23/12020510/apple-thunderbolt-display-discontinued" target="_blank">Apple discontinued its Cinema Display</a> so I recommend going with a <a href="https://www.amazon.com/gp/product/B00P0EQD1Q/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B00P0EQD1Q&amp;linkId=f991852d45006247070bc4bd517584fb" target="_blank">Dell 27 inch monitor</a> instead.</p>

<h5 id="mouse--trackpad--trackball">Mouse / Trackpad / Trackball</h5>
<p>I’m a fan of <a href="https://www.amazon.com/gp/product/B016QO5YWC/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B016QO5YWC&amp;linkId=944323b2bd44eae76aa9297bfac7184e" target="_blank">Apple Magic Trackpad</a>. It supports force touch on a Mac plus it’s wide which is useful. It’s durable and it’s easy to pair it with your laptop over Bluetooth. Depending on your preferences, you may go with a mouse or a trackball. There are a plenty <a href="http://www.programmerfriendly.com/the-best-mouse-for-programming/" target="_blank">developer friendly mice and trackballs to choose from</a>.</p>

<h4 id="software">Software</h4>
<p>You want to make sure to account for major software. If you develop web apps, you may purchase some fonts and assets. If you develop for a proprietary system like Apple, Microsoft or Unity you often have to pay to develop on their platform. The price varies depending on your tools, team size, and services.</p>

<h4 id="external-services">External Services</h4>
<p>You will use a number of external services starting from your back end servers going all the way to localization services and more. Consider using an external service if it saves your software engineer time. Here are the most popular services that you may look into:</p>

<h5 id="google-apps">Google Apps</h5>
<p>Most of the companies are now running on <a href="https://goo.gl/6kjVau" target="_blank">Google G Suite</a> which provides you with a lot of services starting from Email, Calendar to Cloud Storage and Servers. If you would like your engineers to have a company email address, the easiest option is to use Google Apps for Business.</p>

<h5 id="trello-pivotaltracker-or-jira">Trello, PivotalTracker or Jira</h5>
<p>In a healthy company, there is always more work than you can handle. You’ll need to track it somewhere so you don’t forget. I prefer <a href="https://trello.com/alextamoykin/recommend" target="_blank">Trello</a> since it makes it simple to organize your project. They have a free plan and paid business plans with more features. If you need something more sophisticated, check out <a href="https://www.pivotaltracker.com/" target="_blank">PivotalTracker</a> or <a href="https://www.atlassian.com/software/jira" target="_blank">Jira</a>.</p>

<div class="right-align">
<img src="/assets/images/octocat.jpg" />
</div>

<h5 id="github-or-bitbucket">Github or Bitbucket</h5>
<p>Using a version control system for your code is an industry best practice. <a href="https://github.com" target="_blank">Github</a> makes it easy to store your code and it provides tools for collaboration. If you’re short on budget, you can check out <a href="https://bitbucket.org" target="_blank">Bitbucket</a> to start with. They have unlimited private repositories with some limits with the number of users.</p>

<h5 id="lastpass-or-1password">LastPass or 1Password</h5>
<p>You want to make sure you keep your passwords safe and secure. Do not use the same password everywhere. You’ll get hacked at some point and you don’t want all your other sites to get hacked as well. Both <a href="https://lastpass.com/f?17171532" target="_blank">LastPass</a> and <a href="https://agilebits.com/" target="_blank">1Password</a> are good choices for a team of an individual.</p>

<h4 id="team-events">Team events</h4>
<p>I recommend taking the whole team out for an event every quarter. It keeps people re-energized. It’s a good chance to socialize outside of the office and celebrate major milestones, new developers, etc. You can get creative and choose a team building activity like an escape room or card racing, plus get the team out for dinner afterward. Have fun!</p>

<p><img src="/assets/images/party.gif" alt="Party Hard" /></p>

<h4 id="final-words">Final words</h4>
<p>Your team is the most valuable asset you have at the company. A manager’s job is to set up engineers for success. Buying software, hardware or gear that saves your engineers time is well worth the money. Engineers have to work smart and so much of that depends on culture and morale. It may be as simple as buying your engineer coffee or lunch once in a while that keeps your engineers motivated.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Hidden Costs of Hiring a Software Engineer</title>
	  <link>//hidden-costs-of-hiring-a-software-engineer</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2020-03-22T15:55:16-07:00</pubDate>
	  <guid>//hidden-costs-of-hiring-a-software-engineer</guid>
	  <description><![CDATA[
	     <p>You did a lot of work interviewing candidates and you found the right person, congratulations! Your new software engineer will soon join the team and there are some things you should take care of before he/she comes on board. Each person has an extra cost in addition to their compensation. Knowing how much money you spend per new engineer helps you with hiring plans. Also, it makes product road-map planning process much easier. There are a lot of things to consider, but no worries, this post lists most of them.</p>

<h4 id="compensation">Compensation</h4>
<p>The highest item on almost every engineering budget is a <a href="/software-engineer-salary-dollar-dollar-bill-yall" target="_blank">software developer salary</a>. Good software engineers are well worth the money. You don’t want to be in a situation where you constantly have to clean up after a bad and cheaper engineer. It hurts morale and slows the team down. Find the right people and pay them what they’re worth.</p>

<h4 id="recruitment-fees">Recruitment Fees</h4>
<p>If you use external recruiters, they will most likely charge you from 15% to 25% of a developer annual salary. Good software engineers are not on the job market for a long time and the market is very competitive. It may be worth it for the right candidate. I recommend introducing an internal referral program where people receive a bonus when they refer a developer from their personal network.</p>

<h4 id="furniture">Furniture</h4>

<h5 id="desk">Desk</h5>
<p>Your developers will spend most of their work day at the desk and you want to make sure they are comfortable. I recommend going with an adjustable desk. You can put it up or down depending on your preference and height. Since you spend most of the time typing in front of the computer, the key is to move around and a standing desk allows you to do so. There should be enough space on a table for a monitor, a laptop, a keyboard, a mouse / trackpad, etc. You can go very expensive with high-end models like <a href="https://www.geekdesk.com/" target="_blank">Geek Desk</a> or a simple <a href="http://www.ikea.com/us/en/catalog/products/S49084965/" target="_blank">standing desk from IKEA</a> will work just fine.</p>

<h5 id="chair">Chair</h5>
<p>I recommend going with an adjustable chair. It goes well with a standing desk setup. <a href="https://www.amazon.com/gp/product/B0030ZDZL8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B0030ZDZL8&amp;linkId=567c4bc5ba8004c9cbaa9b84523df305" target="_blank">A drafting stool from Boss Office</a> is a good enough choice or you can go with a <a href="https://www.amazon.com/gp/product/B000SMTJNO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B000SMTJNO&amp;linkId=accf3816166be8f2672dfe307b664e8b" target="_blank">cheaper option instead</a>.</p>

<h4 id="hardware">Hardware</h4>
<p>People have their own preferences and every project has different needs. I recommend going with a laptop and a monitor set up. It allows you to have enough real estate while working at your desk and using the same laptop at a meeting.</p>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/B00XZGUL8W/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00XZGUL8W&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=0974e0eeb4efad8a255d5b4334c45c6b"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=B00XZGUL8W&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=B00XZGUL8W" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<h5 id="laptop">Laptop</h5>
<p>The best laptop out there is the latest <a href="https://www.amazon.com/gp/product/B00XZGUL8W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B00XZGUL8W&amp;linkId=20605e5b91ef2f18bba56d24526ad640" target="_blank">Mac Book Pro</a>. I usually choose the latest and greatest processor, RAM and of course a solid state drive. It will get you pretty far with this setup. You can set it up with the tools like <a href="https://github.com/pivotal-sprout/sprout-wrap" target="_blank">Sprout Wrap</a> to install the necessary development environment and applications. The top quality is the strength of Apple products that comes with a high price. That being said, you usually get what you paid for.</p>

<p>You can get a similar Windows PC laptop if you choose to work under the Windows operating system. Installing Linux on either a Mac Book Pro or a PC is also an option. You can install <a href="https://www.ubuntu.com/desktop/developers" target="_blank">Ubuntu</a> side by side with the host operating system or use a virtual machine software like <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank">Virtual Box</a> [Free] or <a href="http://www.parallels.com/" target="_blank">Parallels</a> [Paid].</p>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/B016QO64FI/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B016QO64FI&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=6dbcf43fe93648bae52df247ba719bd5"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=B016QO64FI&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=B016QO64FI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<h5 id="keyboard">Keyboard</h5>
<p>The most durable keyboard that I found is the <a href="https://www.amazon.com/gp/product/B016QO64FI/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B016QO64FI&amp;linkId=1f7154e4a0a09ba7865c13746a4375dd" target="_blank">Apple Magic Keyboard</a>. The latest model removes all the hassle of Bluetooth pairing. The keys are lower so you’re able to type faster.</p>

<h5 id="monitor">Monitor</h5>
<p><a href="http://www.theverge.com/2016/6/23/12020510/apple-thunderbolt-display-discontinued" target="_blank">Apple discontinued its Cinema Display</a> so I recommend going with a <a href="https://www.amazon.com/gp/product/B00P0EQD1Q/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B00P0EQD1Q&amp;linkId=f991852d45006247070bc4bd517584fb" target="_blank">Dell 27 inch monitor</a> instead.</p>

<h5 id="mouse--trackpad--trackball">Mouse / Trackpad / Trackball</h5>
<p>I’m a fan of <a href="https://www.amazon.com/gp/product/B016QO5YWC/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B016QO5YWC&amp;linkId=944323b2bd44eae76aa9297bfac7184e" target="_blank">Apple Magic Trackpad</a>. It supports force touch on a Mac plus it’s wide which is useful. It’s durable and it’s easy to pair it with your laptop over Bluetooth. Depending on your preferences, you may go with a mouse or a trackball. There are a plenty <a href="http://www.programmerfriendly.com/the-best-mouse-for-programming/" target="_blank">developer friendly mice and trackballs to choose from</a>.</p>

<h4 id="software">Software</h4>
<p>You want to make sure to account for major software. If you develop web apps, you may purchase some fonts and assets. If you develop for a proprietary system like Apple, Microsoft or Unity you often have to pay to develop on their platform. The price varies depending on your tools, team size, and services.</p>

<h4 id="external-services">External Services</h4>
<p>You will use a number of external services starting from your back end servers going all the way to localization services and more. Consider using an external service if it saves your software engineer time. Here are the most popular services that you may look into:</p>

<h5 id="google-apps">Google Apps</h5>
<p>Most of the companies are now running on <a href="https://goo.gl/6kjVau" target="_blank">Google G Suite</a> which provides you with a lot of services starting from Email, Calendar to Cloud Storage and Servers. If you would like your engineers to have a company email address, the easiest option is to use Google Apps for Business.</p>

<h5 id="trello-pivotaltracker-or-jira">Trello, PivotalTracker or Jira</h5>
<p>In a healthy company, there is always more work than you can handle. You’ll need to track it somewhere so you don’t forget. I prefer <a href="https://trello.com/alextamoykin/recommend" target="_blank">Trello</a> since it makes it simple to organize your project. They have a free plan and paid business plans with more features. If you need something more sophisticated, check out <a href="https://www.pivotaltracker.com/" target="_blank">PivotalTracker</a> or <a href="https://www.atlassian.com/software/jira" target="_blank">Jira</a>.</p>

<div class="right-align">
<img src="/assets/images/octocat.jpg" />
</div>

<h5 id="github-or-bitbucket">Github or Bitbucket</h5>
<p>Using a version control system for your code is an industry best practice. <a href="https://github.com" target="_blank">Github</a> makes it easy to store your code and it provides tools for collaboration. If you’re short on budget, you can check out <a href="https://bitbucket.org" target="_blank">Bitbucket</a> to start with. They have unlimited private repositories with some limits with the number of users.</p>

<h5 id="lastpass-or-1password">LastPass or 1Password</h5>
<p>You want to make sure you keep your passwords safe and secure. Do not use the same password everywhere. You’ll get hacked at some point and you don’t want all your other sites to get hacked as well. Both <a href="https://lastpass.com/f?17171532" target="_blank">LastPass</a> and <a href="https://agilebits.com/" target="_blank">1Password</a> are good choices for a team of an individual.</p>

<h4 id="team-events">Team events</h4>
<p>I recommend taking the whole team out for an event every quarter. It keeps people re-energized. It’s a good chance to socialize outside of the office and celebrate major milestones, new developers, etc. You can get creative and choose a team building activity like an escape room or card racing, plus get the team out for dinner afterward. Have fun!</p>

<p><img src="/assets/images/party.gif" alt="Party Hard" /></p>

<h4 id="final-words">Final words</h4>
<p>Your team is the most valuable asset you have at the company. A manager’s job is to set up engineers for success. Buying software, hardware or gear that saves your engineers time is well worth the money. Engineers have to work smart and so much of that depends on culture and morale. It may be as simple as buying your engineer coffee or lunch once in a while that keeps your engineers motivated.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Do You Have To Become a Manager To Advance As a Software Engineer?</title>
	  <link>//do-you-have-to-become-a-manager-to-advance-as-a-software-engineer</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2018-08-10T00:00:00-07:00</pubDate>
	  <guid>//do-you-have-to-become-a-manager-to-advance-as-a-software-engineer</guid>
	  <description><![CDATA[
	     <p>The short answer is no. Some people say you have to become a manager in order to advance in your career as a software engineer. This is not necessarily true. It depends on what company your work for, the type of work you do, and your personal preference. After reading this post, you’ll know the path to advance as a software engineer regardless of becoming a manager or not.</p>

<h3 id="why-advancing-in-your-career-benefits-everyone">Why advancing in your career benefits everyone</h3>

<p>When you grow, you’re able to deliver a better quality product, your company gets better as a result of that. In addition to it, you solve harder challenges, <a href="/software-engineer-salary-dollar-dollar-bill-yall">make more money</a>, have more impact at the company, and it’s more fun!</p>

<h3 id="how">How</h3>

<p>In technology companies (i.e. companies where technology plays a major part in product development) engineering management recognizes the value of growing their engineers regardless of them becoming managers or not. Here comes a typical engineering ladder:</p>

<p><img src="/assets/images/engineering_ladder_diagram.png" alt="Typical Engineering Ladder" async="true" /></p>

<p>Different companies have different levels and ladders. Underlying principals stay the same. The goal of the ladder is to provide a framework for engineers to grow within the company.</p>

<p>As you can see, all engineers start from Software Engineer I and make it’s way to Staff Software Engineer. A Staff Software engineer demonstrates a great level of individual contributions in addition to leading moderate size projects and teams. At this point, the engineer has a choice of focusing on management skills or technical skills. If the engineer decides to take the management track, the engineer becomes an Engineering Manager, then a Director of Engineering, VP of Engineering, and CTO. All management related roles include growing the team, hiring, people management, resource planning, and so on.</p>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/1594484805/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1594484805&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=40f71fdebcea2a56f8f674b048a6c765"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1594484805&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=1594484805" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<p>One of the basic principals of people management is keeping the team motivated. I highly recommend reading the book called <a href="https://www.amazon.com/gp/product/1594484805/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=1594484805&amp;linkId=d1dced0c8f563243a3ff97864a66a382" target="_blank">Drive by Daniel Pink.</a>. It’s a great book talking about what drives us as human beings. You want to make sure to provide people on your team with autonomy, mastery, and purpose to keep your teammates motivated. It goes over the reasons behind it with some case studies and some suggestions on implementing it at your workplace. Another good read is the all-time classic called <a href="https://www.amazon.com/gp/product/0321934113/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0321934113&amp;linkId=df3daf1e07ef06b56ad51bbbaa32511a" target="_blank">Peopleware</a>.</p>

<p>Alternatively, the engineer has a choice of staying on the technical track to become a Principal Software Engineer and then a Senior Principal Software Engineer. In this role, the engineer makes technological and architectural contributions across the entire company and improves engineering performance as a result of that.</p>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/0134032802/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0134032802&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=993a83c211014757e438477ed1087438"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0134032802&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0134032802" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>
<p>It’s important to note that a Principal Software Engineer also has to have some managerial skills since the impact of this person’s work spans across the entire organization. There are numerous books on the subject. My favorite is <a href="https://www.amazon.com/gp/product/0134032802/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0134032802&amp;linkId=46a5776c76ddec05de77943cb1798fba" target="_blank">The Art of Scalability</a>. It starts by describing different functions of the technical organization, how they are all connected together, and how it connects with technology. It’s interesting to note that even though the technology aspect is quite hard to implement, it’s connecting technology with business functions of the organization is what gives the best results.</p>

<p>No matter which way you go, as long as you grow within the company, you’ll have more impact, bring more value and you’ll get paid more. At the end of the days, it’s just a personal preference. If you like coding and you’re not a big fan of people management, you can safely stick to the technical track. If you’re passionate about hiring, mentoring, and people management then talk to your manager about getting on the management track when the right time comes.</p>

<h3 id="final-words">Final words</h3>

<p>We spend so much of our life working on products. You want to make sure you’re happy at your workplace. Talk to your manager about your long-term career goals and plans. Everybody wins when you grow. Work hard, have fun and the right things will happen.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Developer Ethics. 5 Ways To Apply Your Unique Skill To Make A Difference</title>
	  <link>//developer-ethics-apply-your-unique-skill-to-make-a-difference</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2018-03-11T00:00:00-08:00</pubDate>
	  <guid>//developer-ethics-apply-your-unique-skill-to-make-a-difference</guid>
	  <description><![CDATA[
	     <p>As software engineers, we develop products affecting lives of millions of people every single day. This post helps you make better product and engineering decisions.</p>

<h2 id="software-development-is-a-unique-skill-to-have">Software development is a unique skill to have</h2>

<p>Software engineering is really hard. It may look easy on the surface, especially after doing a couple of online courses. It is relatively straightforward to build software by following a template like with <a href="http://rubyonrails.org/" target="_blank">Ruby on Rails</a>. However, no solution is perfect. Sooner or later you’ll need to deviate from the template and things get much more complicated. That’s where you need to know  <a href="https://en.wikipedia.org/wiki/Data_structure" target="_blank">data structures</a>, <a href="https://en.wikipedia.org/wiki/Big_O_notation" target="_blank">Big O notation</a>, <a href="https://en.wikipedia.org/wiki/Software_architecture" target="_blank">software architecture</a>, and many more other things. It takes a lifetime to master all these concepts. In addition to it, software changes rapidly. Technologies that are used to be relevant 5 years ago are no longer relevant. You need to keep up with it in order to stay current. In order to really succeed in software development, the person needs to be detail oriented. That’s why there are many software developers on the job market and there are not that many good ones. If you have this unique skill to write software, you should use it wisely. In wrong hands, your software can overcharge, miss lead, or sometimes even kill people. With big power, comes great responsibility.</p>

<p><img src="https://media.giphy.com/media/fItgT774J3nWw/200w_d.gif" alt="Master Yoda" async="true" /></p>

<h2 id="how-to-apply-your-skill">How to apply your skill</h2>

<h3 id="align-with-the-company-mission">1) Align with the company mission</h3>

<p>If you’re not aligned with your company’s mission, you’re simply wasting your time. Make sure the company you work for does something you believe in. This way, you make better product decisions, you’re more engaged, and more productive. It is also better for your career since you grow as a software engineer faster at the company you’re aligned with.</p>

<h3 id="keep-code-standards-high">2) Keep code standards high</h3>

<p>It’s important to keep the right balance between quality and speed of delivery. We all have deadlines and milestones. Even at crunch time, keep in mind that cutting corners will backfire on you sooner or later. A bug in a system may cost you wasted developer hours, money, customers or sometimes even people’s lives. Make sure your software is solid, write automated tests, do code reviews, etc. Engineering best practices are here for a reason. That being said, sometimes you have to introduce <a href="/5-rules-of-managing-technical-debt-how-to-keep-moving-fast-today-and-tomorrow">technical debt</a>. Make sure to pay it off.</p>

<h3 id="respect-privacy">3) Respect Privacy</h3>

<p>Be mindful of customer data and security. Encrypt sensitive data and personally identifiable information. Put yourself in the shoes of a real customer before implementing your feature.</p>

<h3 id="improve-human-society">4) Improve Human Society</h3>

<p>Think about what your product does besides just making money. Is it improving people lives? Does it make us human beings better? If the answer to these question is yes, you’re in a good place. Make sure you maintain the right balance between doing good and making money. There is always a way to make both things work.</p>

<h3 id="share-the-knowledge">5) Share the knowledge</h3>

<p>Go beyond coding during the day and getting a paycheck. Chances are you’re using free <a href="https://opensource.org/" target="_blank">Open Source</a> packages like <a href="https://nodejs.org/" target="_blank">Node.js</a> or even <a href="https://en.wikipedia.org/wiki/Linux" target="_blank">Linux</a>. Give back to the community. There are many different ways to do it ranging from making open source contributions to writing a blog post or doing a talk at a local <a href="https://meetup.com/" target="_blank">meetup</a>. Together, we can accomplish a lot more.</p>

<h2 id="final-words">Final Words</h2>

<p>I hope this post inspires you to do great things. Since an early age, I always believed in improving human society using technology. Humans can build tools. It’s what got humankind this far. Software is a great tool most of us use every day. Enough talk. So go ahead and build something great.</p>

	  ]]></description>
	</item>

	<item>
	  <title>5 Steps To Hire Best Software Engineers. 0 to 100 real quick!</title>
	  <link>//5-steps-to-hire-best-software-engineers-0-to-100-real-quick</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2017-02-05T00:00:00-08:00</pubDate>
	  <guid>//5-steps-to-hire-best-software-engineers-0-to-100-real-quick</guid>
	  <description><![CDATA[
	     <div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/0812993012/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0812993012&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=2120756ab226e93d40edaaa7fb74a759"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0812993012&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0812993012" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<h3 id="why">Why</h3>
<p>Hiring is important. Your team is the most valuable asset of the company. Products come and go, markets and technologies change. The team is what makes a company a success! If you’re running a tech company, your software engineers are going to play a vital part in your success. This post explains how to hire best engineers.</p>

<blockquote>
  <p>If you give a good idea to a mediocre team, they will screw it up. If you give a mediocre idea to a brilliant team, they will either fix it or throw it away and come up with something better. - Ed Catmull. Co-Founder of Pixar and the author of <a href="https://www.amazon.com/gp/product/0812993012/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0812993012&amp;linkId=4f4cc7ef29a896fb2d82c61b4f0a582a" target="_blank">Creativity, Inc</a></p>
</blockquote>

<h3 id="sourcing-candidates">1. Sourcing candidates</h3>
<p>The first step, source a lot of candidates. Hiring pipeline is a funnel. There should be a lot of candidates at the very top of the funnel. Only the best engineers who are the right fit will get the offer. In my experience, from 10 engineers there is 1 decent engineer. Also, keep in mind that about 50% of candidates accept the offer. In order to find the right people, source a lot of candidates. Here are the places to look at:</p>

<ul>
  <li><strong>References.</strong> This is the most effective way to get candidates. If a person you trust recommends you an engineer whom he/she worked with before, you should contact this candidate as soon as possible. Great developers want to work with more great developers and this kind of candidates tend to fit well culturally.</li>
  <li><strong>LinkedIn.</strong> Look at some top developer profiles on LinkedIn. On each profile, there is usually a section called “People Also Viewed” with even more profiles. You can click on each of them and then, rinse, repeat. Reach out to developers asking for their interest. You never know who is looking or who is ready to move on.</li>
  <li><strong>Job Postings.</strong> Create a job posting on <a href="https://jobs.github.com/post#create" target="_blank">Github</a>, <a href="http://talent.stackoverflow.com/jobs/create?cw=1" target="_blank">StackOverflow</a> or <a href="https://angel.co/recruiting" target="_blank">Angel List</a>. Keep in mind, the market is hot, so make sure your posting looks attractive.</li>
</ul>

<h3 id="phone-screen">2. Phone screen</h3>
<p>Now that you got in touch with your prospective candidates, schedule a phone screen with them. You’ll have to do a lot of phone screens so it’s important to keep it efficient. I usually do a 45-minute call which is broken down into 3 parts:</p>

<ul>
  <li><strong>Ice-breaker.</strong> I tell about the opportunity and ask questions about the resume. Starting with a question like “How much do you know about the company X ?” can save you some time so you can focus on filling the gaps. Then I ask a couple of questions about the resume. The key here is to keep your questions focused. In this case, you can verify whether they really have the experience listed.</li>
  <li><strong>Simple coding exercise.</strong> I usually do interviews over a video chat like Google Hangout. I ask a candidate to share the screen and implement a simple coding challenge. The candidate is encouraged to ask questions and walk me through the implementation. This step is meant to be a conversation rather than coding in silence. Seeing a person code in real time reveals a lot of things like debugging skills, algorithm choices and communication skills.</li>
  <li><strong>Finishing questions.</strong> This is where high-level architecture or framework knowledge questions go. At the end of the interview, I answer questions the candidate has for me.</li>
</ul>

<h3 id="in-house-interview">3. In-house interview</h3>

<p><img src="/assets/images/job_interview_prank.gif" alt="Job interview prank" async="true" /></p>

<blockquote>
  <p>Be mindful about your and candidate’s time.</p>
</blockquote>

<p>Bring the candidate on-site to show them around the office and meet the team. Your team’s time is valuable, so is the candidate time. Some companies prefer to have a full day on-site interview. I usually keep it short with just two rounds of interviews with developers. Developers go in pairs. Make sure the team synced up before the interview and everybody knows which questions to answer. It’s important to probe for these things:</p>

<ul>
  <li><strong>Code quality.</strong> The most important thing is to figure out if they can write great quality code in a reasonable timeframe. It’s good to give a candidate a moderately complex problem and work with them on coding a solution. You want to make sure the candidate makes reasonable choices. It’s ok to make minor mistakes if they can see it and fix it. Keep in mind that the code you see during the interview will be the code you’ll see in your code base if the person gets hired.</li>
  <li><strong>Cultural fit.</strong> Would you want to work next to this person every day? Does the candidate communicate well? Do you like the person’s attitude? If you’re interviewing a person, these are the questions to ask yourself.</li>
</ul>

<blockquote>
  <p>Treat the candidate the same way you would like to be treated.</p>
</blockquote>

<p>Developer time is a finite resource. If it’s clear that the person is not a fit from the first pair of interviewers, tell the candidate so and stop the interview. Have you ever been in the interview where you didn’t hear anything back? It’s not fun to be in this situation so treat people the way you would like to be treated. Tell the candidate why it’s not the right fit and what they can improve. If you see the potential, tell the candidate that you would like to touch base in the next 6 to 12 months to see if the situation is improved. If you’re not comfortable delivering this feedback in person on the day of the interview then walk out the candidate and follow up the next day over the phone or email.</p>

<p>On the other end, if the candidate made it to the end of the in-house interview, communicate to the candidate that the interview is finished. Tell the candidate that you’ll get back to him/her in the next couple of days.</p>

<h3 id="references">4. References</h3>
<p>Request at least 3 references and call each of them. Ask them about their experience working with the candidate. Ask what the person is good at and what he/she needs to improve. Keep in mind that it will take time since people have their own schedules. It’s important to move quickly. If you’re super excited about the candidate you can make an offer contingent on a reference check.</p>

<h3 id="offer">5. Offer</h3>
<p>You should be excited about the candidate you would like to hire. Get all participants in the room, have each interviewer to write down their outcome. Each person’s outcome should be unaffected by anybody’s opinion. Go around the room where each person reveals the score with the reasoning behind it. If there is a consensus in the room, it’s a pretty easy decision to make. If you’re on the fence, it may be tempting to bring the candidate for another round for more information. From my experience, you don’t get more information after the in-house interview. Make a decision with the information you have. If you’re not sure, the answer is no.</p>

<p>Keep in mind, great software engineers are not on a job market for a long time. You have to move quick. After you know the outcome, communicate it to the candidate. If the answer is no, explain why politely. If the answer is yes, communicate it to the candidate and send the candidate an offer letter. Give a candidate some time to think and follow up on a decision. Good luck!</p>

<h3 id="final-words">Final words</h3>
<p>Hiring is a long play game. You should never hire people you don’t like. Even if you have a lot of work to do, it’s never worth it. Be patient and keep interviewing. Every person counts and hiring the right software engineer will greatly increase your chances of success!</p>

	  ]]></description>
	</item>

	<item>
	  <title>Why Developer Athletes Get The Best Engineering Jobs</title>
	  <link>//why-developer-athletes-get-the-best-engineering-jobs</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-11-13T00:00:00-08:00</pubDate>
	  <guid>//why-developer-athletes-get-the-best-engineering-jobs</guid>
	  <description><![CDATA[
	     <h3 id="who-is-a-developer-athlete">Who is a developer athlete</h3>

<p>Let’s first define a developer athlete. As I previously outlined in the <a href="/10-steps-to-become-a-senior-software-engineer/">10 Steps To Become a Senior Software Engineer post</a>, you can become very efficient at computer programming, then what ? Once you know your techstack in and out, it’s time to expand your horizons and become a developer athlete. A developer athlete can dive into any techstack and be productive very fast by building on existing experience in computer engineering.</p>

<h3 id="why-would-you-want-to-be-a-developer-athlete">Why would you want to be a developer athlete</h3>

<p>A developer athlete is a generalist computer software engineer. These kind of players are much more valuable on the team because of the following reasons:</p>

<ol>
  <li>Techstacks change frequently. The whole entire techstack changes completely every 5 years. I went through several techstack changes in my career.</li>
  <li>The company (especially a startup) changes it’s course frequently. In order to stay agile, you have to be open to solving different problems and to using new tools. Developer athletes occupy the best engineering jobs and get the best <a href="/software-engineer-salary-dollar-dollar-bill-yall">software engineer salary</a>.</li>
  <li>Operating in one techstack becomes boring over time. Great players become bored from doing the same thing over and over again. They branch out into a different technology to keep themselves engaged at work.</li>
</ol>

<h3 id="how-do-you-become-an-athlete">How do you become an athlete</h3>

<p><img src="/assets/images/cat_workout.gif" alt="Cat workout" /></p>

<h4 id="demonstrate-the-can-do-anything-attitude">1. Demonstrate the “can do anything” attitude</h4>

<p>You have to get outside of your comfort zone and to be open to diving into any technology. It sounds crazy, and you’ll be surprised how far apart it puts you against your competition. You make your team a lot stronger and lot more resilient by being able to deliver quality work in any techstack. It is true that you don’t go deep into a specific technology and it doesn’t matter as much since you’re already an expert in one techstack. At some point, your team will lose an engineer and the ability to jump in and help out is crucial for the business.</p>

<h4 id="pay-attention-to-the-basics">2. Pay attention to the basics</h4>

<blockquote>
  <p>Focus on fundamentals, the rest will change anyway</p>
</blockquote>

<p>As you get comfortable with changing techstacks, you’ll see that fundamentals stay the same in every single one of them. Whether you’re a web developer writing your next project in Javascript or doing app development in Swift, the fundamentals are the same. All programs are compiled into machine code that gets executed on a processor. It’s true that you don’t have to worry as much about some low level aspects like memory management when using high level programming languages. You still need to understand what happens under the hood in order to build software that performs well.</p>

<h4 id="stay-open-minded">3. Stay open minded</h4>

<p>One phrase that I often hear from junior developers is: “I hate language X and I will never do it.”. Never say never. If you would like to step up your game, you need to appreciate a particular technology for it’s strengths. You’ll also need to know it’s weaknesses. Even though a lot of people “hate” PHP, we wouldn’t be here without it. Most of the software problems that I’ve seen are not about the language you use, it’s about your architecture.</p>

<h4 id="stay-current">4. Stay current</h4>

<p>I learn at least one new programming language and one new framework a year. I picked up Swift 3.0 as a language and Android as a whole new platform this year. Once you master the fundamentals and become efficient at one techstack, you’ll start recognizing patterns. It helps you to take your learning speed onto the whole another level where you can pick up pretty much any techstack quickly. The key here is to pay attention to tech industry dynamics and play around with new technologies. You never know, it may be the best tool for the job on your next project.</p>

<h4 id="exercise-eat-and-sleep-well">5. Exercise, eat and sleep well</h4>

<p>As you grow, your responsibilities grow with it so as the impact of your decisions. The ability to be present in a high stakes meeting or the ability to focus while coding is key. Think of yourself as an athlete that needs rest before the next race. Your brain needs rest while sleeping. Your body needs an exercise and the right nutrition to operate well. All these systems are connected and it affects your ability to execute during the day.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Software Engineer Salary: Dollar Dollar Bill Y'All</title>
	  <link>//software-engineer-salary-dollar-dollar-bill-yall</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-10-16T00:00:00-07:00</pubDate>
	  <guid>//software-engineer-salary-dollar-dollar-bill-yall</guid>
	  <description><![CDATA[
	     <p>Are software engineers fairly compensated at your company? Do you or your colleagues focus on building the product instead of getting a raise? Everyone needs to be properly incentivised in order for the team to succeed. Fair software developer salary plays a big part in it. After reading this blog post, you’ll know to play this game right.</p>

<h2 id="the-best-a-salary-can-do-for-you-is-make-you-forget-about-it">The best a salary can do for you is make you forget about it</h2>
<p>If you want to know the actual numbers, keep reading till the end. What matters more than numbers is <em>you and your team focusing on building the product</em>. This is how you win. On the other end, trying to maximize your salary is a slippery slope. You can’t win this game because of the following reasons:</p>

<ol>
  <li>You can always find a place that will pay you more</li>
  <li>Focusing on a promotion doesn’t make you a better software engineer</li>
  <li>The company (especially if it’s an early stage startup) has limited cash that will evaporate if everyone in a company focuses on getting more salary</li>
</ol>

<h2 id="a-higher-salary-doesnt-mean-a-better-job">A higher salary doesn’t mean a better job</h2>
<p>Imagine you’re interviewing at multiple companies and you get an offer that is way above what everyone is willing to pay. You may be excited like this dude:
<img src="/assets/images/excited.gif" alt="Excited dude" async="true" />
If a company wants to pay you a salary significantly above the market, in most cases, there is a reason for it. It may be a big company with a lot of cash and boring work to do. Or the company may be struggling to find people who believe in their mission. Don’t get the high number distract you. Make sure you join a solid team that you can learn from. You’ll spend a lot of time with this group of people every day. Find the company with the vision you believe in. These things matter more than your salary in the grand scheme of things.</p>

<h2 id="ask-for-the-right-number-no-more-no-less">Ask for the right number. No more, no less.</h2>
<p>You should ask for a fair market salary in your geographic area. Look at the salary statistic sites like <a href="https://salary.com" target="blank">salary.com</a> for your experience level and take it as a guiding factor. Don’t accept the offer drastically below or above your current level since you don’t want to be in either of these two situations:</p>

<ol>
  <li>You are underpaid. Let’s say you got excited about a new hot startup. You really want to work there but they say they can’t pay you a reasonable salary for some reason. Maybe money is not super important to you because of your lifestyle and you say yes to it. Sooner or later, your friend developer from another company will tell you how much he/she makes and you’ll eventually quit.</li>
  <li>You are overpaid. The employer really wants to hire you and they decide to pay a price above your level. Even though you’ll get paid a lot of money, your employer will have extremely high expectations of you. Most likely, these expectations will be unrealistic and they will be pressured to terminate you after reviewing engineering budget. In addition to it, your colleague at the same company will eventually know that you’re overpaid. News spread out quickly and it will ruin team morale.</li>
</ol>

<h2 id="negotiation-is-key">Negotiation is key</h2>
<div class="left-align">
<a href="https://www.amazon.com/gp/product/0931213207/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0931213207&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=99431d63288d3fd28e93cacc1f9e26f4"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0931213207&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0931213207" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<p>One of the most important skills to get the right developer salary is a negotiation. I recommend reading <a href="https://www.amazon.com/gp/product/0931213207/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0931213207&amp;linkId=cadf10a661a16a5100bc1d5f9d6dfeed" target="_blank">Negotiating Your Salary: How To Make $1000 a Minute</a>. It explains basic negotiation tactics for salary negotiation. One key advice that I took from this book is to avoid revealing your salary expectations until you make sure it’s the right fit. After being on both sides of the hiring process, I can definitely see how it helps both parties focus on what’s important. Revealing your salary expectations which may or may not fit in a pre-defined budget can be very distracting which can finish a conversation in the very beginning.</p>

<h2 id="how-important-tech-for-your-employer">How important tech for your employer</h2>
<p>Salary negotiation is a two-sided process. Let’s see how it looks from the employer’s perspective. In general, companies can be subdivided into tech companies and non-tech companies. In tech companies, technology plays a crucial role in product development. In other words, if the engineering department disappears, the company is in a big trouble. Engineers are valued in tech companies the most. In this situation, the main focus of the employer is to find top class developers. Every developer makes a massive impact on the business and there is not many great developers available in a current hot job market. You’ll learn the most in such a company and the employer will generally have no problem paying you what you’re worth.</p>

<p>On the other side, in non-tech companies, the main product is powered by an external technology as a service or operationally. Technology is a nice to have addition to the product. In this kind of environment, engineering has a secondary focus in the company. When something is not your primary focus, you would like to get it done cheap and fast. Non-tech companies can afford to hire low-quality talent because of the low technology impact for their business. It’s a good starting point if you are a junior developer. You won’t experience significant growth here and you won’t get paid as much. Make sure you choose the right company for your career stage.</p>

<h2 id="how-much-is-a-senior-software-engineer-salary">How much is a senior software engineer salary</h2>
<p><img src="/assets/images/kanye-west-make-it-rain-dollar.gif" alt="Kanye west makes it rain" />
Another reason to become a <a href="https://alextamoykin.com/10-steps-to-become-a-senior-software-engineer/">Senior Software Engineer</a> is a pretty good salary, comparing to the other professions. It depends on many factors. Junior software engineer salary in Los Angeles starts from $80,000 and it may go to $200,000 and above for a principal role at some companies. It depends on many factors like cost of living, geographic area, technical stack, job market etc.</p>

<h2 id="final-words">Final words</h2>
<p>Focus on your growth and the right thing will happen. The company will become stronger because you deliver a better product and your compensation package will grow with it. In a healthy company, it will always be the case. The main asset of the company, especially in the startup world is <em>the team</em>. If your team grows, the company grows. Companies you want to work in understand it and that’s why they have regular performance reviews and promotions.</p>

	  ]]></description>
	</item>

	<item>
	  <title>10 Steps to become a Senior Software Engineer</title>
	  <link>//10-steps-to-become-a-senior-software-engineer/</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2014-12-22T20:54:34-08:00</pubDate>
	  <guid>//10-steps-to-become-a-senior-software-engineer/</guid>
	  <description><![CDATA[
	     <h2 id="what">What</h2>

<p>Software engineers go through several stages in their careers. They start from a Junior role, then they move to a Mid Level role. Then they become senior. This blog post has 10 steps that help you to become a Senior Software Engineer.</p>

<h2 id="why-bother">Why bother?</h2>

<ul>
  <li>Get paid more! Your salary grows as you level up</li>
  <li>Advance in your career. Senior Software Engineers are moving towards Architect, Team Lead, CTO kind of roles</li>
  <li>Take on bigger challenges. As you grow you make a bigger impact</li>
</ul>

<h2 id="how">How</h2>

<p>Software engineering is hard. The industry is always changing and you need to keep up with it. You need to put constant effort and time. There is always more to learn than you can possibly absorb. Many engineers who finish a several month boot camp don’t realize how much more they need to learn on top of it. No worries, there is a clear path to becoming a senior software engineer in almost any area of software development.</p>

<h2 id="step-0-choose-your-path-and-stick-to-it">Step 0: choose your path and stick to it!</h2>

<blockquote>
  <p>do one thing and do it well - Doug McIlroy : <a title="Unix Philosophy" href="http://en.wikipedia.org/wiki/Unix_philosophy" target="_blank">Unix Philosophy</a></p>
</blockquote>

<p>I can’t emphasize this enough! It is really important to choose a specialty and a technical stack that you will be working with. Sticking to it and not getting distracted is what will make you a specialist.</p>

<p>It’s an important choice to make. Here is how to do it:</p>

<ul>
  <li>Choose your specialty. It’s what you want to do. For example: Web development or Mobile development or DevOps etc.</li>
  <li>Choose a technical stack within your specialty. For example: if you chose web development, you’ll need to choose between Ruby on Rails, Python and Django, JavaScript and MEAN etc. If you chose mobile, you’ll need to choose between iOS or Android, etc.</li>
  <li>Stick to it and master it.</li>
</ul>

<p>I’m not saying that you shouldn’t get familiar with anything else outside of your main specialty. A well rounded <a title="T-Shaped skills" href="http://en.wikipedia.org/wiki/T-shaped_skills" target="_blank">T-Shaped</a> Software Engineer knows about other aspects of programming too. Although he/she knows their main specialty extremely well.</p>

<p>Now that you’ve chosen your specialty, you have a lot of things to learn. Take your time. It will take you several years to read all these books and practice necessary skills. Get through this challenge one skill at the time.</p>

<p>I’ll be using the following technical stacks going forward: Ruby on Rails for web development, iOS for mobile development. It is just because I have experience working with it. I can speak to it personally. At the end of the says it’s just a matter of taste. If you choose some other stack, you’ll need to find different books.</p>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/020161622X/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=020161622X&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=07a66bca50a3f99c2dcccebe19c623a8"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=020161622X&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=020161622X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<h2 id="step-1-lay-the-foundations">Step 1. Lay the foundations</h2>

<p>Read <a title="The Pragmatic Programmer book" href="https://www.amazon.com/gp/product/020161622X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=020161622X&amp;linkId=e1b8dec90a96de9b9b9aefeaa655f533" target="_blank">The Pragmatic Programmer</a> book. It’s a good starting point on the path to software mastery. The book summarizes best high level practices. It’s language / technology agnostic. It doesn’t matter which tech stack you choose, the main principles stay the same.</p>

<h2 id="step-2-master-your-programming-language">Step 2. Master your programming language</h2>

<p>You’ll be using many languages day to day depending on the technology stack of your choice. Although, majority of your code will be written in one language. For example: a Ruby on Rails developer uses Ruby primarily. An AngularJS developer uses JavaScript most of the time. Identifying the language of your choice and mastering it is crucial for your career. Learn it, master it! You’ll be using this language every day. Choose your language and read an advance book on it.</p>

<ul>
  <li>
    <p>For a Ruby Developer – <a title="The Programming Ruby book" href="https://www.amazon.com/gp/product/1937785491/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=1937785491&amp;linkId=979b95e39f1235b2e11713249df32d9f" target="_blank">Programming Ruby</a></p>
  </li>
  <li>
    <p>For an iOS Developer – <a title="The Swift book" href="https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11" target="_blank">The Swift Programming Language</a></p>
  </li>
</ul>

<h2 id="step-3-learn-your-framework">Step 3. Learn your framework</h2>

<p>Choose one, learn it:</p>

<ul>
  <li>For a Rails Developer – <a title="The Rails Tutorial website" href="https://www.railstutorial.org/" target="_blank">Rails Tutorial</a> by Michael Hartl</li>
  <li>For an iOS Developer – <a title="The iOS programming book" href="https://www.amazon.com/gp/product/0134390733/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0134390733&amp;linkId=43a00f47136ff908d9e251e709b16eda" target="_blank">iOS programming: The Big Nerd Ranch Guide</a></li>
</ul>

<h2 id="step-4-become-a-master-of-your-text-editor--ide">Step 4. Become a master of your text editor / IDE</h2>

<p>Again. Choose one, master it and stick to it. If you chose VIM, stay with VIM and become a master of it.</p>

<h2 id="step-5-use-your-version-control-system-like-a-pro">Step 5. Use your Version Control System like a pro</h2>

<p>I recommend using Git. Here is the resource that I like: <a title="The pro git book" href="http://git-scm.com/book" target="_blank">Pro git</a> – free online ebook with a complete breakdown on every aspect of git</p>

<h2 id="step-6-commit-to-doing-test-driven-development">Step 6. Commit to doing Test Driven Development</h2>

<p>Choose a book specific to your tech stack, learn it. Get into a habit of doing it every day. Quality code comes with writing tests.</p>

<ul>
  <li>For a Ruby on Rails Developer – <a title="The Rails Test Prescriptions book" href="https://www.amazon.com/gp/product/1941222196/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=1941222196&amp;linkId=3b98c05172097ba36db0f10fb9377573" target="_blank">Rails Test Prescriptions</a></li>
  <li>For an iOS Developer – <a title="Test Driven iOS Development" href="https://www.amazon.com/gp/product/B007RNK0W6/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B007RNK0W6&amp;linkId=ac221568a7596351a33d14a31f05ddf1" target="_blank">Test Driven iOS Development</a></li>
</ul>

<h2 id="step-7-refactor-as-a-habit">Step 7. Refactor as a habit</h2>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/0201485672/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201485672&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=5dbe0a96b64a8a96acf765a3aa0a810f"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0201485672&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0201485672" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<p>The codebase grows in complexity as you add more functionality. In order to keep your codebase manageable you need to refactor. If you don’t refactor as you go, you’ll soon come to a sad place where even a small change is hard, bugs are inevitable and nobody wants to deal with your messy codebase. Just make your life easier. Don’t delay your refactor. Get into a habit of refactoring. Here is a good book on how to do it: <a title="Refactoring: Improving the Design of Existing Code" href="https://www.amazon.com/gp/product/0201485672/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0201485672&amp;linkId=640c40d8fa8bb2477fe5f78e5652934b" target="_blank">Refactoring: Improving the Design of Existing Code</a> by Martin Fowler</p>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/0321127420/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321127420&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=b60f61c2fc9ff8e06a3c6ab92de06f71"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0321127420&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0321127420" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<h2 id="step-8-learn-software-architecture">Step 8. Learn software architecture</h2>

<p>Depending on the stack you choose, find a good book on architecture. Here is one that I recommend by Martin Fowler. It’s called <a title="Enterprise Application Architecture" href="https://www.amazon.com/gp/product/0321127420/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0321127420&amp;linkId=86ad176f357a761d3741721e634abb7b" target="_blank">Patterns of Enterprise Application Architecture</a></p>

<h2 id="step-9-unleash-the-power-of-the-command-line">Step 9. Unleash the power of the command line</h2>

<p>The command line can feel intimidating at first. Although, as soon as you learn how to use it, you’ll become a lot more efficient in performing basic tasks. That alone makes you a better developer since you are able to achieve more in less time.</p>

<p>Then you can take it to the next level. Use shell to automate common tasks and build your <a title="My dotfiles repo as an example" href="https://github.com/fsproru/dotfiles" target="_blank">dotfiles</a>. If you’re working on a Mac or any Linux distribution, learn shell. Here is a good book on it by Mark Bates: <a title="Conquering The Command Line" href="http://conqueringthecommandline.com/book" target="_blank">Conquering the Command Line</a></p>

<h2 id="step-10-code-code-code">Step 10. Code code code!</h2>

<p>Every single day. Like in any sport, you need to practice what you learned in order for knowledge to stick.</p>

<h2 id="takeaway">Takeaway</h2>

<p>Yes, becoming Senior Software Engineer is hard. It takes a lot of time and commitment. Different people learn at different speed, but on average, it takes about 10 years to become a solid senior dev. It’s a big investment in time for a big return.</p>

<p>Software Engineers have the bright future. They are in high demand on the job market. Their salary grows proportionally with their experience. It’s a rapidly growing and a relatively new field. Every day of a software engineer is a challenge. A challenge of changing people’s lives. Go ahead and take on this challenge by becoming a Senior Software Engineer one skill at the time.</p>

<p>Cheers,</p>

<p>Alex</p>

<p><em>Photo by <a href="&quot;https://www.flickr.com/photos/lachlanhardy&quot;">lachlanhardy</a></em></p>

	  ]]></description>
	</item>


</channel>
</rss>
