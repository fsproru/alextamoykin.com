<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>alextamoykin.com</title>
   
   <link>http://alextamoykin.com/</link>
   <description>Building world-class software, teams, and products.</description>
   <language>en-us</language>
   <managingEditor> Alex Tamoykin</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>10 Steps to become a Senior Software Engineer</title>
	  <link>//why-you-should-start-learning-react-native-as-a-mobile-developer</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2020-03-22T15:55:16-07:00</pubDate>
	  <guid>//why-you-should-start-learning-react-native-as-a-mobile-developer</guid>
	  <description><![CDATA[
	     <p>If your product needs to be in the hands of users using a mobile device, you should look into using React Native. React Native is a framework allowing you to have a single codebase powering both the iOS and the Android app. This way you have the same team working on both apps instead of hiring two different teams and keeping both apps in sync. That being said, it’s not a silver bullet, there are some gotchas. After reading this post, you’ll know when and how to use React Native for your mobile app.</p>

<h2 id="what-is-react-native">What is React Native</h2>

<p><a href="http://www.reactnative.com/" target="_blank">React Native</a> is a mobile framework allowing for building mobile apps with the Javascript language. The app follows the same convention of the React framework. Once the app is coded up, you can build two different distributions from a single codebase. In other words, you can have both, an iOS and an Android app done by the same developer (or a team of developers).</p>

<h2 id="advantages-of-react-native">Advantages of React Native</h2>

<p>Two apps for the price of one, sounds great right? That’s not exactly true, here is why:</p>

<h3 id="apps-for-14-of-the-effort">2 apps for 1.4 of the effort</h3>

<p>I wish it will be a real 2 for 1 and it’s not really the case. It’s more of 2 apps for 1.4 effort it would otherwise take you to build an individual app. Which is still a great win.</p>

<h3 id="easier-to-maintain-the-app">Easier to maintain the app</h3>
<p>In addition to building both apps faster with this technology, it’s easier to maintain both the iOS and the Android app. Both apps are powered by the same codebase and maintained by the same developer (or a team of developers). If you want to get really fancy, you can have your backend written in Node.js which allows you to utilize the same developer implementing each feature across the stack since it’s written in the same language.</p>

<h2 id="disadvantages-of-react-native">Disadvantages of React Native</h2>

<p>Even the advantages of using React Native sound exciting, you shouldn’t use it in every single project for the following reasons:</p>

<h3 id="hard-to-access-native-features">Hard to access native features</h3>
<p>When you need to fall back to the low level API like the animation framework to add some rich custom animations, you need to write native code. If you have two apps (iOS and Android), it means you need to write the native code for each platform (one in Swift/Objective-C, another one in Kotlin/Java). Writing native code requires the knowledge of two different languages and two different platforms which takes significant amount of time to learn. After you’re done writing your native components, you’ll need to integrate it back to the React Native app which is tricky. You’ll need to use a Javascript bridge between the two different runtimes (the Javascript runtime and the native runtime).</p>

<h3 id="hard-to-parallelize-your-operations">Hard to parallelize your operations</h3>
<p>The React Native app runs inside the Javascript interpreter. Even though Javascript support asynchronousity very well as a language, it doesn’t support native threads which native runtime does. If you need to do some work in the background or leverage multiple threads (in other words if you app needs to do some multitasking), you won’t be able to do it effectively in React Native. You’ll need to fallback to writing some native code which leads to the previous point.</p>

<h3 id="dealing-with-different-size-devices-is-challenging">Dealing with different size devices is challenging</h3>
<p>By having a single codebase powering both apps, you now need to support all possible screen sizes and dimensions. iOS has a set defined set of supported devices, Android on the other hand has a lot of variety. Writing your components in a way so it shows up nicely on each screen is a challenge. This is easier to achieve with two different native apps since you limit the possible screen sizes per each app.</p>

<h2 id="when-you-should-use-react-native">When you should use React Native</h2>
<p>Long story short, React Native is a great fit for utilitarian apps. It’s simple apps that don’t require a lot of advance UI features, no custom animations. In other words, I wouldn’t build the next Snapchat with it. On the other hand if you know you’ll need a not of advance UI for your product, you should consider building both apps natively. There is an option of doing most of the app in React Native and do just a little pieces of it natively as long as we need native functionality in a couple of places. That being said, you don’t want to end up in a situation where you started on one path and ended up completely on the other side.</p>

<h2 id="final-words">Final Words</h2>
<p>Technology evolves quickly. After working with technology for the most of my life, I came to a realization that the speed with which technology evolves also increases over time. We build new technologies on top of the existing ones and repeat it over and over again. As software engineers and entrepreneurs we should have a vision for the product which allows us to choose the right tool for the job. So go ahead and experiment with some new technology and see if it’s worth using it to take your product to the next level.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Developer Ethics. 5 Ways To Apply Your Unique Skill To Make A Difference</title>
	  <link>//developer-ethics-apply-your-unique-skill-to-make-a-difference</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2018-03-11T00:00:00-08:00</pubDate>
	  <guid>//developer-ethics-apply-your-unique-skill-to-make-a-difference</guid>
	  <description><![CDATA[
	     <p>As software engineers, we develop products affecting lives of millions of people every single day. This post helps you make better product and engineering decisions.</p>

<h2 id="software-development-is-a-unique-skill-to-have">Software development is a unique skill to have</h2>

<p>Software engineering is really hard. It may look easy on the surface, especially after doing a couple of online courses. It is relatively straightforward to build software by following a template like with <a href="http://rubyonrails.org/" target="_blank">Ruby on Rails</a>. However, no solution is perfect. Sooner or later you’ll need to deviate from the template and things get much more complicated. That’s where you need to know  <a href="https://en.wikipedia.org/wiki/Data_structure" target="_blank">data structures</a>, <a href="https://en.wikipedia.org/wiki/Big_O_notation" target="_blank">Big O notation</a>, <a href="https://en.wikipedia.org/wiki/Software_architecture" target="_blank">software architecture</a>, and many more other things. It takes a lifetime to master all these concepts. In addition to it, software changes rapidly. Technologies that are used to be relevant 5 years ago are no longer relevant. You need to keep up with it in order to stay current. In order to really succeed in software development, the person needs to be detail oriented. That’s why there are many software developers on the job market and there are not that many good ones. If you have this unique skill to write software, you should use it wisely. In wrong hands, your software can overcharge, miss lead, or sometimes even kill people. With big power, comes great responsibility.</p>

<p><img src="https://media.giphy.com/media/fItgT774J3nWw/200w_d.gif" alt="Master Yoda" async="true" /></p>

<h2 id="how-to-apply-your-skill">How to apply your skill</h2>

<h3 id="align-with-the-company-mission">1) Align with the company mission</h3>

<p>If you’re not aligned with your company’s mission, you’re simply wasting your time. Make sure the company you work for does something you believe in. This way, you make better product decisions, you’re more engaged, and more productive. It is also better for your career since you grow as a software engineer faster at the company you’re aligned with.</p>

<h3 id="keep-code-standards-high">2) Keep code standards high</h3>

<p>It’s important to keep the right balance between quality and speed of delivery. We all have deadlines and milestones. Even at crunch time, keep in mind that cutting corners will backfire on you sooner or later. A bug in a system may cost you wasted developer hours, money, customers or sometimes even people’s lives. Make sure your software is solid, write automated tests, do code reviews, etc. Engineering best practices are here for a reason. That being said, sometimes you have to introduce <a href="/5-rules-of-managing-technical-debt-how-to-keep-moving-fast-today-and-tomorrow">technical debt</a>. Make sure to pay it off.</p>

<h3 id="respect-privacy">3) Respect Privacy</h3>

<p>Be mindful of customer data and security. Encrypt sensitive data and personally identifiable information. Put yourself in the shoes of a real customer before implementing your feature.</p>

<h3 id="improve-human-society">4) Improve Human Society</h3>

<p>Think about what your product does besides just making money. Is it improving people lives? Does it make us human beings better? If the answer to these question is yes, you’re in a good place. Make sure you maintain the right balance between doing good and making money. There is always a way to make both things work.</p>

<h3 id="share-the-knowledge">5) Share the knowledge</h3>

<p>Go beyond coding during the day and getting a paycheck. Chances are you’re using free <a href="https://opensource.org/" target="_blank">Open Source</a> packages like <a href="https://nodejs.org/" target="_blank">Node.js</a> or even <a href="https://en.wikipedia.org/wiki/Linux" target="_blank">Linux</a>. Give back to the community. There are many different ways to do it ranging from making open source contributions to writing a blog post or doing a talk at a local <a href="https://meetup.com/" target="_blank">meetup</a>. Together, we can accomplish a lot more.</p>

<h2 id="final-words">Final Words</h2>

<p>I hope this post inspires you to do great things. Since an early age, I always believed in improving human society using technology. Humans can build tools. It’s what got humankind this far. Software is a great tool most of us use every day. Enough talk. So go ahead and build something great.</p>

	  ]]></description>
	</item>

	<item>
	  <title>10 Steps to become a Senior Software Engineer</title>
	  <link>//10-steps-to-become-a-senior-software-engineer/</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2014-12-22T20:54:34-08:00</pubDate>
	  <guid>//10-steps-to-become-a-senior-software-engineer/</guid>
	  <description><![CDATA[
	     <h2 id="what">What</h2>

<p>Software engineers go through several stages in their careers. They start from a Junior role, then they move to a Mid Level role. Then they become senior. This blog post has 10 steps that help you to become a Senior Software Engineer.</p>

<h2 id="why-bother">Why bother?</h2>

<ul>
  <li>Get paid more! Your salary grows as you level up</li>
  <li>Advance in your career. Senior Software Engineers are moving towards Architect, Team Lead, CTO kind of roles</li>
  <li>Take on bigger challenges. As you grow you make a bigger impact</li>
</ul>

<h2 id="how">How</h2>

<p>Software engineering is hard. The industry is always changing and you need to keep up with it. You need to put constant effort and time. There is always more to learn than you can possibly absorb. Many engineers who finish a several month boot camp don’t realize how much more they need to learn on top of it. No worries, there is a clear path to becoming a senior software engineer in almost any area of software development.</p>

<h2 id="step-0-choose-your-path-and-stick-to-it">Step 0: choose your path and stick to it!</h2>

<blockquote>
  <p>do one thing and do it well - Doug McIlroy : <a title="Unix Philosophy" href="http://en.wikipedia.org/wiki/Unix_philosophy" target="_blank">Unix Philosophy</a></p>
</blockquote>

<p>I can’t emphasize this enough! It is really important to choose a specialty and a technical stack that you will be working with. Sticking to it and not getting distracted is what will make you a specialist.</p>

<p>It’s an important choice to make. Here is how to do it:</p>

<ul>
  <li>Choose your specialty. It’s what you want to do. For example: Web development or Mobile development or DevOps etc.</li>
  <li>Choose a technical stack within your specialty. For example: if you chose web development, you’ll need to choose between Ruby on Rails, Python and Django, JavaScript and MEAN etc. If you chose mobile, you’ll need to choose between iOS or Android, etc.</li>
  <li>Stick to it and master it.</li>
</ul>

<p>I’m not saying that you shouldn’t get familiar with anything else outside of your main specialty. A well rounded <a title="T-Shaped skills" href="http://en.wikipedia.org/wiki/T-shaped_skills" target="_blank">T-Shaped</a> Software Engineer knows about other aspects of programming too. Although he/she knows their main specialty extremely well.</p>

<p>Now that you’ve chosen your specialty, you have a lot of things to learn. Take your time. It will take you several years to read all these books and practice necessary skills. Get through this challenge one skill at the time.</p>

<p>I’ll be using the following technical stacks going forward: Ruby on Rails for web development, iOS for mobile development. It is just because I have experience working with it. I can speak to it personally. At the end of the says it’s just a matter of taste. If you choose some other stack, you’ll need to find different books.</p>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/020161622X/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=020161622X&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=07a66bca50a3f99c2dcccebe19c623a8"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=020161622X&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=020161622X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<h2 id="step-1-lay-the-foundations">Step 1. Lay the foundations</h2>

<p>Read <a title="The Pragmatic Programmer book" href="https://www.amazon.com/gp/product/020161622X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=020161622X&amp;linkId=e1b8dec90a96de9b9b9aefeaa655f533" target="_blank">The Pragmatic Programmer</a> book. It’s a good starting point on the path to software mastery. The book summarizes best high level practices. It’s language / technology agnostic. It doesn’t matter which tech stack you choose, the main principles stay the same.</p>

<h2 id="step-2-master-your-programming-language">Step 2. Master your programming language</h2>

<p>You’ll be using many languages day to day depending on the technology stack of your choice. Although, majority of your code will be written in one language. For example: a Ruby on Rails developer uses Ruby primarily. An AngularJS developer uses JavaScript most of the time. Identifying the language of your choice and mastering it is crucial for your career. Learn it, master it! You’ll be using this language every day. Choose your language and read an advance book on it.</p>

<ul>
  <li>
    <p>For a Ruby Developer – <a title="The Programming Ruby book" href="https://www.amazon.com/gp/product/1937785491/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=1937785491&amp;linkId=979b95e39f1235b2e11713249df32d9f" target="_blank">Programming Ruby</a></p>
  </li>
  <li>
    <p>For an iOS Developer – <a title="The Swift book" href="https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11" target="_blank">The Swift Programming Language</a></p>
  </li>
</ul>

<h2 id="step-3-learn-your-framework">Step 3. Learn your framework</h2>

<p>Choose one, learn it:</p>

<ul>
  <li>For a Rails Developer – <a title="The Rails Tutorial website" href="https://www.railstutorial.org/" target="_blank">Rails Tutorial</a> by Michael Hartl</li>
  <li>For an iOS Developer – <a title="The iOS programming book" href="https://www.amazon.com/gp/product/0134390733/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0134390733&amp;linkId=43a00f47136ff908d9e251e709b16eda" target="_blank">iOS programming: The Big Nerd Ranch Guide</a></li>
</ul>

<h2 id="step-4-become-a-master-of-your-text-editor--ide">Step 4. Become a master of your text editor / IDE</h2>

<p>Again. Choose one, master it and stick to it. If you chose VIM, stay with VIM and become a master of it.</p>

<h2 id="step-5-use-your-version-control-system-like-a-pro">Step 5. Use your Version Control System like a pro</h2>

<p>I recommend using Git. Here is the resource that I like: <a title="The pro git book" href="http://git-scm.com/book" target="_blank">Pro git</a> – free online ebook with a complete breakdown on every aspect of git</p>

<h2 id="step-6-commit-to-doing-test-driven-development">Step 6. Commit to doing Test Driven Development</h2>

<p>Choose a book specific to your tech stack, learn it. Get into a habit of doing it every day. Quality code comes with writing tests.</p>

<ul>
  <li>For a Ruby on Rails Developer – <a title="The Rails Test Prescriptions book" href="https://www.amazon.com/gp/product/1941222196/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=1941222196&amp;linkId=3b98c05172097ba36db0f10fb9377573" target="_blank">Rails Test Prescriptions</a></li>
  <li>For an iOS Developer – <a title="Test Driven iOS Development" href="https://www.amazon.com/gp/product/B007RNK0W6/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B007RNK0W6&amp;linkId=ac221568a7596351a33d14a31f05ddf1" target="_blank">Test Driven iOS Development</a></li>
</ul>

<h2 id="step-7-refactor-as-a-habit">Step 7. Refactor as a habit</h2>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/0201485672/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201485672&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=5dbe0a96b64a8a96acf765a3aa0a810f"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0201485672&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0201485672" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<p>The codebase grows in complexity as you add more functionality. In order to keep your codebase manageable you need to refactor. If you don’t refactor as you go, you’ll soon come to a sad place where even a small change is hard, bugs are inevitable and nobody wants to deal with your messy codebase. Just make your life easier. Don’t delay your refactor. Get into a habit of refactoring. Here is a good book on how to do it: <a title="Refactoring: Improving the Design of Existing Code" href="https://www.amazon.com/gp/product/0201485672/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0201485672&amp;linkId=640c40d8fa8bb2477fe5f78e5652934b" target="_blank">Refactoring: Improving the Design of Existing Code</a> by Martin Fowler</p>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/0321127420/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321127420&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=b60f61c2fc9ff8e06a3c6ab92de06f71"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0321127420&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0321127420" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<h2 id="step-8-learn-software-architecture">Step 8. Learn software architecture</h2>

<p>Depending on the stack you choose, find a good book on architecture. Here is one that I recommend by Martin Fowler. It’s called <a title="Enterprise Application Architecture" href="https://www.amazon.com/gp/product/0321127420/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0321127420&amp;linkId=86ad176f357a761d3741721e634abb7b" target="_blank">Patterns of Enterprise Application Architecture</a></p>

<h2 id="step-9-unleash-the-power-of-the-command-line">Step 9. Unleash the power of the command line</h2>

<p>The command line can feel intimidating at first. Although, as soon as you learn how to use it, you’ll become a lot more efficient in performing basic tasks. That alone makes you a better developer since you are able to achieve more in less time.</p>

<p>Then you can take it to the next level. Use shell to automate common tasks and build your <a title="My dotfiles repo as an example" href="https://github.com/fsproru/dotfiles" target="_blank">dotfiles</a>. If you’re working on a Mac or any Linux distribution, learn shell. Here is a good book on it by Mark Bates: <a title="Conquering The Command Line" href="http://conqueringthecommandline.com/book" target="_blank">Conquering the Command Line</a></p>

<h2 id="step-10-code-code-code">Step 10. Code code code!</h2>

<p>Every single day. Like in any sport, you need to practice what you learned in order for knowledge to stick.</p>

<h2 id="takeaway">Takeaway</h2>

<p>Yes, becoming Senior Software Engineer is hard. It takes a lot of time and commitment. Different people learn at different speed, but on average, it takes about 10 years to become a solid senior dev. It’s a big investment in time for a big return.</p>

<p>Software Engineers have the bright future. They are in high demand on the job market. Their salary grows proportionally with their experience. It’s a rapidly growing and a relatively new field. Every day of a software engineer is a challenge. A challenge of changing people’s lives. Go ahead and take on this challenge by becoming a Senior Software Engineer one skill at the time.</p>

<p>Cheers,</p>

<p>Alex</p>

<p><em>Photo by <a href="&quot;https://www.flickr.com/photos/lachlanhardy&quot;">lachlanhardy</a></em></p>

	  ]]></description>
	</item>


</channel>
</rss>
