<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>howtoprogrambetter.com</title>
   
   <link>http://howtoprogrambetter.com/</link>
   <description>Learn How To Program and become a Better Software Engineer with Alex Tamoykin</description>
   <language>en-us</language>
   <managingEditor> Alex Tamoykin</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Test Driven Development with Xcode</title>
	  <link>//test-driven-development-with-xcode/</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-03-13T22:11:26-07:00</pubDate>
	  <guid>//test-driven-development-with-xcode/</guid>
	  <description><![CDATA[
	     <p>Test Driven Development is a great way to take your code to a whole another level. In this presentation, we’ll talk about what is TDD, why TDD is awesome and how to do it in Xcode using Swift and XCTest</p>

<p>Here is the link to a <a href="https://youtu.be/06-9Xsd8saA">Video Recording</a></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/06-9Xsd8saA?controls=0" frameborder="0" allowfullscreen=""></iframe>

<p>and <a href="https://speakerdeck.com/fsproru/test-driven-development-with-xcode">Slides</a></p>

<script async="" class="speakerdeck-embed" data-id="c7250296330e420e857540912eee7a4f" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p><br />
Presented at <a href="http://www.meetup.com/CocoaHeads-LA/events/225155127/" target="_blank">CocoaHeads LA – Testing Edition</a></p>

<p>Enjoy,</p>

<p>Alex</p>

	  ]]></description>
	</item>

	<item>
	  <title>Interview at Swift Coders Podcast</title>
	  <link>//interview-at-swift-coders-podcast/</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-03-06T20:35:22-08:00</pubDate>
	  <guid>//interview-at-swift-coders-podcast/</guid>
	  <description><![CDATA[
	     <p>We’re big proponents of <a href="https://swift.org/" target="_blank" rel="nofollow">Swift</a>, Apple’s new programing language at <a href="http://rightbalance.io/" target="_blank" rel="nofollow">The Right Balance</a>. It’s exciting to see the Swift community evolving. It was great to speak at the opening podcast dedicated to Swift Development called <a href="http://swiftcoders.org/" target="_blank" rel="nofollow">Swift Coders</a>. Kudos to <a href="https://twitter.com/garricn" target="_blank" rel="nofollow">Garric Nahapetian</a> for putting it together.</p>

<p>Check out <a href="https://itunes.apple.com/us/podcast/swiftcoders/id1082937962?mt=2&amp;i=362557025" target="_blank" rel="nofollow">the first episode here</a>, we hope that you really like it.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Equality Operators in Swift: Double equal vs Tripe equal and how to define even your own Quadruple Equal operator</title>
	  <link>//equality-operators-in-swift-double-equal-vs-tripe-equal-and-how-to-define-even-your-own-quadruple-equal-operator/</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2015-07-12T14:51:33-07:00</pubDate>
	  <guid>//equality-operators-in-swift-double-equal-vs-tripe-equal-and-how-to-define-even-your-own-quadruple-equal-operator/</guid>
	  <description><![CDATA[
	     <p>Yes, a quadruple operator. Bare with me, we’ll get there by the end of this post. In order to figure out how equivalence operators work, let’s start with a simple example:</p>

<h1 id="double-equal">Double equal</h1>

<p>A double equal operator (aka ==) compares <strong>values</strong>. Let’s look at the simple example below:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="mi">5</span> <span class="o">==</span> <span class="mi">5</span>                             <span class="c1">// =&gt; true</span>
<span class="s">"same string"</span> <span class="o">==</span> <span class="s">"same string"</span>     <span class="c1">// =&gt; true</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>                 <span class="c1">// =&gt; true</span>
<span class="s">"one string"</span> <span class="o">==</span> <span class="s">"different string"</span> <span class="c1">// =&gt; false</span></code></pre></figure>

<p>The left-hand side and the right-hand side are different objects in all three cases. Swift compares basic types with no problem. Let’s see how Swift is doing with our custom octocat classes:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">Octocat</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">legs</span><span class="p">:</span><span class="kt">Int</span>
    <span class="k">var</span> <span class="nv">kind</span><span class="p">:</span><span class="kt">String</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">legs</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="nv">kind</span><span class="p">:</span><span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">legs</span> <span class="o">=</span> <span class="n">legs</span>
        <span class="k">self</span><span class="o">.</span><span class="n">kind</span> <span class="o">=</span> <span class="n">kind</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">eight_leg_octo</span> <span class="o">=</span> <span class="kt">Octocat</span><span class="p">(</span>
    <span class="nv">legs</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span> <span class="nv">kind</span><span class="p">:</span><span class="s">"Coder"</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">another_eight_leg_octo</span> <span class="o">=</span> <span class="kt">Octocat</span><span class="p">(</span>
    <span class="nv">legs</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="nv">kind</span><span class="p">:</span> <span class="s">"Coder"</span><span class="p">)</span>

<span class="c1">// ERROR: Cannot invoke '==' with an argument list of type Octocat, Octocat</span>
<span class="n">eight_leg_octo</span> <span class="o">==</span> <span class="n">another_eight_leg_octo</span></code></pre></figure>

<p>Error! Swift doesn’t know how to compare octocats. C’mon Swift! It’s not that hard, all you need is to compare the number of legs. Although it seems obvious for the author of this code, Swift doesn’t know how to compare custom objects. Every custom object has a meaning. It is pretty reasonable to push the responsibility of defining equivalence to the author. In order to do that, we need to define the equivalence operator for the Octocat class. All you need to do is to return true or false depending whether the left-hand side is equal to the right-hand side. Note that the equivalence operator is redefined outside of the class. But the Octocat type is specified inside parameters.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="o">==</span><span class="p">(</span><span class="nv">left</span><span class="p">:</span><span class="kt">Octocat</span><span class="p">,</span> <span class="nv">right</span><span class="p">:</span><span class="kt">Octocat</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">left</span><span class="o">.</span><span class="n">legs</span> <span class="o">==</span> <span class="k">right</span><span class="o">.</span><span class="n">legs</span>
<span class="p">}</span></code></pre></figure>

<p>Now Swift is all happy and our octocats are indeed equal.</p>

<h1 id="triple-equal">Triple equal</h1>

<p>The triple equal (aka ===) operator compares <strong>identity</strong>. If the variable on the left points to the same exact object that the variable on the right, then it returns true. It returns false otherwise. Here is the example:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">Skateboard</span> <span class="p">{}</span>
<span class="k">let</span> <span class="nv">red_skate</span> <span class="o">=</span> <span class="kt">Skateboard</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">same_red_skate</span> <span class="o">=</span> <span class="n">red_skate</span>

<span class="n">red_skate</span> <span class="o">===</span> <span class="n">same_red_skate</span> <span class="c1">// =&gt; true</span>

<span class="k">let</span> <span class="nv">blue_skate</span> <span class="o">=</span> <span class="kt">Skateboard</span><span class="p">()</span>
<span class="n">red_skate</span> <span class="o">===</span> <span class="n">blue_skate</span>     <span class="c1">// =&gt; false</span></code></pre></figure>

<p>The <em>red_skate</em> variable and the <em>same_red_skate</em> variable point to the same exact instance of the <em>Skateboard</em> class. That’s why our tripe equal operator returns us true. The variable <em>blue_skate</em> on the other hand points to a different instance than what the <em>red_skate</em> variable points to. Therefore, the triple equal operator returns us false in the second case.</p>

<h1 id="custom-operators">Custom operators</h1>

<p>But wait, but there is more. Just to make things more fun, let’s introduce a quadruple equal operator for our Octocat class. Why not? It turns out that you can introduce pretty much any custom operator in Swift pretty easily. It’s a two step process. First, you’ll need to define a new operator. Be careful, it defines this new operator globally:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">infix</span> <span class="k">operator</span> <span class="o">====</span> <span class="p">{}</span></code></pre></figure>

<p>Then, you’ll need to implement it. Our quadruple equal operator makes absolutely sure that Octocats are the same. It compares the number of legs and the kind or an Octocat <img src="http://howtoprogrambetter.com/wp-includes/images/smilies/simple-smile.png" alt=":-)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="o">====</span><span class="p">(</span><span class="nv">left</span><span class="p">:</span><span class="kt">Octocat</span><span class="p">,</span> <span class="nv">right</span><span class="p">:</span><span class="kt">Octocat</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">left</span><span class="o">.</span><span class="n">legs</span> <span class="o">==</span> <span class="k">right</span><span class="o">.</span><span class="n">legs</span>
        <span class="o">&amp;&amp;</span> <span class="k">left</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="k">right</span><span class="o">.</span><span class="n">kind</span>
<span class="p">}</span></code></pre></figure>

<p>Now that we have it, let’s use it:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="n">eight_leg_octo</span> <span class="o">====</span> <span class="n">another_eight_leg_octo</span> <span class="c1">// =&gt; true</span></code></pre></figure>

<h1 id="recap">Recap</h1>

<p>Swift has two major mechanisms for comparing objects. The equality operator and the identity operator. The equality operator compares values. The identity operator checks whether variables point to the same instance. Swift provides us with a way of defining custom operators. I can see it being useful in certain cases but you can easily take it too far. Before defining a new custom operator, ask yourself whether you can accomplish the same goal with existing operators.</p>

<p>Cheers,</p>

<p>Alex</p>

<p><em>Photo by <a href="https://www.flickr.com/photos/ssoosay">ssoosay</a></em></p>

	  ]]></description>
	</item>

	<item>
	  <title>Data Types in Swift</title>
	  <link>//data-types-in-swift/</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2015-03-08T11:09:50-07:00</pubDate>
	  <guid>//data-types-in-swift/</guid>
	  <description><![CDATA[
	     <p>I’m currently teaching a <a title="Mobile Development at General Assembly" href="https://generalassemb.ly/education/mobile-development" target="_blank">mobile development course at GA</a>. I’ll be sharing my swift lessons one by one. Lesson 1: Data Types.After reading this blog post you’ll be able to learn and use the basic data types in Swift.I’m going to briefly introduce a data type. Then I’ll show the syntax for creating it and what you can do with it.</p>

<p>Ready, get set, go!</p>

<h2 id="string">String</h2>

<p>The String datatype is used for storing and manipulating text. You start defining a string by using a double quotes symbol following by your text. Finish defining your string by using a second double quotes symbol.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="s">""</span>                    <span class="c1">// an empty string</span>
<span class="s">"hello world"</span>         <span class="c1">// a string with words</span>

<span class="nf">countElements</span><span class="p">(</span><span class="s">"dude"</span><span class="p">)</span> <span class="c1">// =&gt; 4</span>
<span class="s">"dude"</span><span class="o">.</span><span class="n">isEmpty</span>        <span class="c1">// =&gt; false</span>
<span class="s">""</span><span class="o">.</span><span class="n">isEmpty</span>            <span class="c1">// =&gt; true</span></code></pre></figure>

<h2 id="boolean">Boolean</h2>

<p>A boolean can be either true or false. It’s useful in conditions inside control flow statements like if. It also helps with checking whether a certain condition is met.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kc">true</span>  <span class="c1">// a boolean with a value of true</span>
<span class="kc">false</span> <span class="c1">// a boolean with a value offalse</span>

<span class="k">let</span> <span class="nv">age</span> <span class="o">=</span> <span class="mi">19</span>
<span class="k">if</span> <span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span> <span class="p">{</span>
  <span class="nf">println</span><span class="p">(</span><span class="s">"Congratulations! Now you can now get a California driver license."</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<h2 id="range">Range</h2>

<p>The Range data type is used to define a range of values. It’s very handy to define long sequences.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="mi">0</span><span class="o">...</span><span class="mi">3</span> <span class="c1">// =&gt; 0,1,2,3</span>
<span class="mi">0</span><span class="o">..&lt;</span><span class="mi">3</span> <span class="c1">// =&gt; 0,1,2&lt;/pre&gt;</span></code></pre></figure>

<h2 id="integer">Integer</h2>

<p>An integer describes a whole number without a decimal point. It’s useful for performing any sort of math on whole numbers.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="mi">1</span>     <span class="c1">// an integer with a value of 1</span>

<span class="mi">1</span> <span class="o">-</span> <span class="mi">2</span> <span class="c1">// =&gt; -1</span>
<span class="mi">3</span> <span class="o">+</span> <span class="mi">2</span> <span class="c1">// =&gt; 5</span>
<span class="mi">2</span> <span class="o">*</span> <span class="mi">2</span> <span class="c1">// =&gt; 4</span></code></pre></figure>

<h2 id="double--float">Double / Float</h2>

<p>Doubles and Floats are used for numbers with precision. A double is twice as precise as a float.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="mf">4.2</span> <span class="c1">// a double with a value of 4.2</span>

<span class="k">let</span> <span class="nv">my_float</span> <span class="p">:</span> <span class="kt">Float</span> <span class="o">=</span> <span class="mf">4.2</span> <span class="c1">// If you want to use float to consume some memory, you'll need to explicitly specify avariable'stype&lt;/pre&gt;</span></code></pre></figure>

<h2 id="array">Array</h2>

<p>Array is a zero indexed, ordered collection of elements.Arrays come in handy when you need to store and operate on a collection of elements.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="p">[</span><span class="s">"a"</span><span class="p">,</span><span class="s">"b"</span><span class="p">,</span><span class="s">"c"</span><span class="p">,</span><span class="s">"d"</span><span class="p">]</span>    <span class="c1">// an array of characters</span>
<span class="p">[</span><span class="mf">1.2</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="mf">6.7</span><span class="p">,</span> <span class="mf">5.6</span><span class="p">]</span> <span class="c1">// an array of numbers</span>

<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>        <span class="c1">// =&gt; [1,2,3,4]</span>
<span class="k">let</span> <span class="nv">my_array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>
<span class="n">my_array</span><span class="o">.</span><span class="n">count</span>       <span class="c1">// =&gt; 4</span>

<span class="c1">// retrieving the first element of an array</span>
<span class="n">my_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>          <span class="c1">// =&gt; 1</span></code></pre></figure>

<h2 id="dictionary">Dictionary</h2>

<p>A dictionary is a collection of key value pairs. A value is stored and retrieved from a dictionary by it’s key. Dictionaries are useful for managing different sets of data. For example keeping a track of heroes and their superpowers 😉</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="c1">// A dictionary with 3 key value pairs</span>
<span class="k">var</span> <span class="nv">heroes</span> <span class="o">=</span> <span class="p">[</span>
 <span class="s">"wonder_woman"</span><span class="p">:</span> <span class="p">[</span><span class="s">"strong"</span><span class="p">],</span>
 <span class="s">"aqua_man"</span><span class="p">:</span> <span class="p">[</span><span class="s">"can breathe underwater"</span><span class="p">],</span>
 <span class="s">"wonder twins"</span><span class="p">:</span> <span class="p">[</span><span class="s">"take forms of other things"</span><span class="p">]</span>
<span class="p">]</span>

<span class="c1">// retrieving values using keys</span>
<span class="n">heroes</span><span class="p">[</span><span class="s">"wonder_woman"</span><span class="p">]</span> <span class="c1">// =&gt; strong</span>
<span class="n">heroes</span><span class="p">[</span><span class="s">"aqua_man"</span><span class="p">]</span>     <span class="c1">// =&gt; can breathe underwater</span>

<span class="c1">// inserting a new key / value pair</span>
<span class="n">heroes</span><span class="p">[</span><span class="s">"spiderman"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">"spidey sense"</span><span class="p">,</span> <span class="s">"throw a web"</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span></code></pre></figure>

<p>Feel free to play with this code in the playgrounds. Every data type has a lot more useful methods on it.</p>

<p>Enjoy,</p>

<p>Alex</p>

<p><em>Photo by <a href="https://www.flickr.com/photos/yukop">yukop</a></em></p>

	  ]]></description>
	</item>

	<item>
	  <title>10 Steps to become a Senior Software Engineer</title>
	  <link>//10-steps-to-become-a-senior-software-engineer/</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2014-12-22T20:54:34-08:00</pubDate>
	  <guid>//10-steps-to-become-a-senior-software-engineer/</guid>
	  <description><![CDATA[
	     <h2 id="what">What</h2>

<p>Software engineers go through several stages in their careers. They start from a Junior role, then they move to a Mid Level role. Then they become senior. This blog post has 10 steps that help you to become a Senior Software Engineer.</p>

<h2 id="why-bother">Why bother?</h2>

<ul>
  <li>Get paid more! Your salary grows as you level up</li>
  <li>Advance in your career. Senior Software Engineers are moving towards Architect, Team Lead, CTO kind of roles</li>
  <li>Take on bigger challenges. As you grow you make a bigger impact</li>
</ul>

<h2 id="how">How</h2>

<p>Software engineering is hard. The industry is always changing and you need to keep up with it. You need to put constant effort and time. There is always more to learn than you can possibly absorb. Many engineers who finish a several month boot camp don’t realize how much more they need to learn on top of it. No worries, there is a clear path to becoming a senior software engineer in almost any area of software development.</p>

<h2 id="step-0-choose-your-path-and-stick-to-it">Step 0: choose your path and stick to it!</h2>

<blockquote>
  <p>do one thing and do it well</p>
</blockquote>

<blockquote>
  <p>Doug McIlroy : <a title="Unix Philosophy" href="http://en.wikipedia.org/wiki/Unix_philosophy" target="_blank">Unix Philosophy</a></p>
</blockquote>

<p>I can’t emphasize this enough! It is really important to choose a specialty and a technical stack that you will be working with. Sticking to it and not getting distracted is what will make you a specialist.</p>

<p>It’s an important choice to make. Here is how to do it:</p>

<ul>
  <li>Choose your specialty. It’s what you want to do. For example: Web development or Mobile development or DevOps etc.</li>
  <li>Choose a technical stack within your specialty. For example: if you chose web development, you’ll need to choose between Ruby on Rails, Python and Django, JavaScript and MEAN etc. If you chose mobile, you’ll need to choose between iOS or Android, etc.</li>
  <li>Stick to it and master it.</li>
</ul>

<p>I’m not saying that you shouldn’t get familiar with anything else outside of your main specialty. A well rounded <a title="T-Shaped skills" href="http://en.wikipedia.org/wiki/T-shaped_skills" target="_blank">T-Shaped</a> Software Engineer knows about other aspects of programming too. Although he/she knows their main specialty extremely well.</p>

<p>Now that you’ve chosen your specialty, you have a lot of things to learn. Take your time. It will take you several years to read all these books and practice necessary skills. Get through this challenge one skill at the time.</p>

<p>I’ll be using the following technical stacks going forward: Ruby on Rails for web development, iOS for mobile development. It is just because I have experience working with it. I can speak to it personally. At the end of the says it’s just a matter of taste. If you choose some other stack, you’ll need to find different books.</p>

<h2 id="step-1-lay-the-foundations">Step 1. Lay the foundations</h2>

<p>Read <a title="The Pragmatic Programmer book" href="http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X" target="_blank">The Pragmatic Programmer</a> book. It’s a good starting point on the path to software mastery. The book summarizes best high level practices. It’s language / technology agnostic. It doesn’t matter which tech stack you choose, the main principles stay the same.</p>

<h2 id="step-2-master-your-programming-language">Step 2. Master your programming language</h2>

<p>You’ll be using many languages day to day depending on the technology stack of your choice. Although, majority of your code will be written in one language. For example: a Ruby on Rails developer uses Ruby primarily. An AngularJS developer uses JavaScript most of the time. Identifying the language of your choice and mastering it is crucial for your career. Learn it, master it! You’ll be using this language every day. Choose your language and read an advance book on it.</p>

<ul>
  <li>
    <p>For a Ruby Developer – <a title="The Programming Ruby book" href="https://pragprog.com/book/ruby4/programming-ruby-1-9-2-0" target="_blank">Programming Ruby</a></p>
  </li>
  <li>
    <p>For an iOS Developer – <a title="The Swift book" href="https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11" target="_blank">The Swift Programming Language</a></p>
  </li>
</ul>

<h2 id="step-3-learn-your-framework">Step 3. Learn your framework</h2>

<p>Choose one, learn it:</p>

<ul>
  <li>For a Rails Developer – <a title="The Rails Tutorial website" href="https://www.railstutorial.org/" target="_blank">Rails Tutorial</a> by Michael Hartl</li>
  <li>For an iOS Developer – <a title="The iOS programming book" href="http://www.bignerdranch.com/we-write/ios-programming.html" target="_blank">iOS programming: The Big Nerd Ranch Guide</a></li>
</ul>

<h2 id="step-4-become-a-master-of-your-text-editor--ide">Step 4. Become a master of your text editor / IDE</h2>

<p>Again. Choose one, master it and stick to it. If you chose VIM, stay with VIM and become a master of it.</p>

<h2 id="step-5-use-your-version-control-system-like-a-pro">Step 5. Use your Version Control System like a pro</h2>

<p>I recommend using Git. Here is the resource that I like: <a title="The pro git book" href="http://git-scm.com/book" target="_blank">Pro git</a> – free online ebook with a complete breakdown on every aspect of git</p>

<h2 id="step-6-commit-to-doing-test-driven-development">Step 6. Commit to doing Test Driven Development</h2>

<p>Choose a book specific to your tech stack, learn it. Get into a habit of doing it every day. Quality code comes with writing tests.</p>

<ul>
  <li>For a Ruby on Rails Developer – <a title="The Rails Test Prescriptions book" href="https://pragprog.com/book/nrtest/rails-test-prescriptions" target="_blank">Rails Test Prescriptions</a></li>
  <li>For an iOS Developer – <a title="Test Driven iOS Development" href="http://www.amazon.com/Test-Driven-iOS-Development-Developers-Library/dp/0321774183" target="_blank">Test Driven iOS Development</a></li>
</ul>

<h2 id="step-7-refactor-as-a-habit">Step 7. Refactor as a habit</h2>

<p>The codebase grows in complexity as you add more functionality. In order to keep your codebase manageable you need to refactor. If you don’t refactor as you go, you’ll soon come to a sad place where even a small change is hard, bugs are inevitable and nobody wants to deal with your messy codebase. Just make your life easier. Don’t delay your refactor. Get into a habit of refactoring. Here is a good book on how to do it: <a title="Refactoring: Improving the Design of Existing Code" href="http://www.amazon.com/gp/product/0201485672" target="_blank">Refactoring: Improving the Design of Existing Code</a> by Martin Fowler</p>

<h2 id="step-8-learn-software-architecture">Step 8. Learn software architecture</h2>

<p>Depending on the stack you choose, find a good book on architecture. Here is one that I recommend by Martin Fowler. It’s called <a title="Enterprise Application Architecture" href="http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420" target="_blank">Patterns of Enterprise Application Architecture</a></p>

<h2 id="step-9-unleash-the-power-of-the-command-line">Step 9. Unleash the power of the command line</h2>

<p>The command line can feel intimidating at first. Although, as soon as you learn how to use it, you’ll become a lot more efficient in performing basic tasks. That alone makes you a better developer since you are able to achieve more in less time.</p>

<p>Then you can take it to the next level. Use shell to automate common tasks and build your <a title="My dotfiles repo as an example" href="https://github.com/fsproru/dotfiles" target="_blank">dotfiles</a>. If you’re working on a Mac or any Linux distribution, learn shell. Here is a good book on it by Mark Bates: <a title="Conquering The Command Line" href="http://conqueringthecommandline.com/book" target="_blank">Conquering the Command Line</a></p>

<h2 id="step-10-code-code-code">Step 10. Code code code!</h2>

<p>Every single day. Like in any sport, you need to practice what you learned in order for knowledge to stick.</p>

<h2 id="takeaway">Takeaway</h2>

<p>Yes, becoming Senior Software Engineer is hard. It takes a lot of time and commitment. Different people learn at different speed, but on average, it takes about 10 years to become a solid senior dev. It’s a big investment in time for a big return.</p>

<p>Software Engineers have the bright future. They are in high demand on the job market. Their salary grows proportionally with their experience. It’s a rapidly growing and a relatively new field. Every day of a software engineer is a challenge. A challenge of changing people’s lives. Go ahead and take on this challenge by becoming a Senior Software Engineer one skill at the time.</p>

<p>Cheers,</p>

<p>Alex</p>

<p><em>Photo by <a href="&quot;https://www.flickr.com/photos/lachlanhardy&quot;">lachlanhardy</a></em></p>

	  ]]></description>
	</item>

	<item>
	  <title>Running iOS tests on Travis CI</title>
	  <link>//running-ios-tests-on-travis-ci/</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2014-09-06T22:15:21-07:00</pubDate>
	  <guid>//running-ios-tests-on-travis-ci/</guid>
	  <description><![CDATA[
	     <h2 id="why">Why</h2>

<p>Did you ever ship buggy code in production ? If it is the case, you may consider setting up a CI server.</p>

<h2 id="span-styleline-height-15whatspan"><span style="line-height: 1.5;">What</span></h2>

<p>CI stands for <a title="CI explanation on Wikipedia" href="http://en.wikipedia.org/wiki/Continuous_integration" target="_blank">continuous integration</a>. CI Server is a machine that watches your main branch and runs your tests every time there are new commits. It ensures that you product is ready to ship from your main branch at any point in time.</p>

<h2 id="how">How</h2>

<p>Setting up and especially maintaining a CI server is pain in the neck. That’s why I prefer to use a CI service instead of hosting a server in house. They scale it, they maintain it, all I do is focus on development.</p>

<h2 id="setup">Setup</h2>

<p><em>Note: The following tutorial works for Cedar testing framework as well as XCTest. Tests should be set up as a test target (not a separate app).</em></p>

<ol>
  <li>Sign up for an account with Travis CI.</li>
</ol>

<ul>
  <li>Sign up <a title="Open Source Travis CI" href="https://travis-ci.org/" target="_blank">here</a> for a free account if your project is Open Source and it’s public.</li>
  <li>Sign up <a title="Travis CI Pro" href="https://travis-ci.com/" target="_blank">here</a> is your project is private.</li>
</ul>

<ol>
  <li>Enable the app.</li>
</ol>

<p>Sign into your account on Travis CI. Click on your profile on the top right and choose <em>accounts</em>. Choose the repo that you want to test and flip the switch to <em>on</em>.</p>

<ol>
  <li>Make sure that your scheme is shared.</li>
</ol>

<p>Open up your project in XCode. Go to Product-&gt;Scheme-&gt;Manage Schemes. Select the Target that you use for testing and check the <strong>Shared</strong> checkbox.</p>

<p><a href="http://howtoprogrambetter.com/wp-content/uploads/2014/09/shared_schemes_in_xcode.png"><img class="aligncenter size-full wp-image-530" alt="Shared scheme in Xcode" src="http://howtoprogrambetter.com/wp-content/uploads/2014/09/shared_schemes_in_xcode.png" width="640" height="174" /></a></p>

<ol>
  <li>Create .travis.yml file</li>
</ol>

<p>.travis.yml is the configuration file for your build on Travis CI. Here is the minimal .travis.yml file.  Replace <em>MyAwesomeApp</em> with your app name and save it in the root of your project.</p>

<pre class="lang:yaml decode:true" title="Minimal .travis.yml configuration file">language: objective-c
xcode_workspace: MyAwesomeApp.xcworkspace # if you're using cocoapods
# xcode_project: MyAwesomeApp.xcproject #if you're not using cocoapods
xcode_scheme: MyAwesomeApp
xcode_sdk: iphonesimulator7.1
script: xcodebuild -workspace MyAwesomeApp.xcworkspace -scheme MyAwesomeApp -sdk iphonesimulator7.1 -configuration Debug build test</pre>

<ol>
  <li>Commit everything, push it up to github and check out you triggered build.</li>
</ol>

<p>Cheers,</p>

<p>Alex</p>

	  ]]></description>
	</item>


</channel>
</rss>
