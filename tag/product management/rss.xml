<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>alextamoykin.com</title>
   
   <link>http://alextamoykin.com/</link>
   <description>Building world-class software, teams, and products.</description>
   <language>en-us</language>
   <managingEditor> Alex Tamoykin</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Unlock the power of Remote Workforce for Your Business</title>
	  <link>//unlock-the-power-of-remote-workforce-for-your-business</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2020-03-22T00:00:00-07:00</pubDate>
	  <guid>//unlock-the-power-of-remote-workforce-for-your-business</guid>
	  <description><![CDATA[
	     <h1 id="what-is-remote-workforce">What is Remote Workforce</h1>

<p>A traditional way to do business is to come to an office to do the work. In some industries like factory manufacturing, it’s the only option. That being said, with the current state of technology and especially for thought workers like software engineers, it’s no longer a requirement. With a high-performance laptop and an Internet connection, you can work from anywhere in the world, including your home office. Remote workforce unlocks limitless possibilities for your business like getting access to a larger and more cost-efficient pool of talent internationally.</p>

<h1 id="why-remote-is-great">Why Remote is Great</h1>

<h2 id="big-companies-go-remote">Big Companies Go Remote</h2>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/0804137501/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0804137501&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=371cd9783dd11848c153f3886880a408"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0804137501&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0804137501" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<p>Large companies like <a href="https://www.pluralsight.com/blog/teams/collaborating-at-github-with-a-60--remote-workforce" target="_blank">Github</a> (bought by Microsoft), <a href="https://www.glassdoor.com/Overview/Working-at-InVision-EI_IE912781.11,19.htm" target="_blank">InVision</a>, <a href="https://37signals.com/" target="_blank">37signals</a> (makers of <a href="https://basecamp.com/" target="_blank">Basecamp</a> and creators of <a href="https://rubyonrails.org/" target="_blank">Ruby on Rails</a>) already operate remotely. There are books written on a subject like <a href="https://www.amazon.com/gp/product/0804137501/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0804137501&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=7975a9b05dc299f15f7e104f0228bebc" target="_blank">Remote</a>.</p>

<p>More and more companies adopt remote work as a standard practice.</p>

<h2 id="the-world-is-your-oyster">The World is Your Oyster</h2>

<p>The remote workforce unlocks the possibility of hiring people outside of your city and even country. You can have a truly international team of professionals working in lockstep with you. Needless to say, that due to the cost of living difference between the United States and the rest of the world, you’ll get some amazingly skilled and motivated professionals at the fraction of the cost of a local US employee. No need to worry about immigration either. Remote workers can be hired as individual contractors for your business reducing the complexity of your payroll.</p>

<p>With remote, you’re tapping into a larger pool of talent than in your local city. It’s especially helpful if you’re looking to fulfill multiple roles at your company and the local job market is very competitive.</p>

<p>Worth noting that in some countries, higher education is more accessible and less costly than in the US. So yes, you can hire a remote worker who actually knows how software algorithms and data structures work ;-)</p>

<h2 id="more-productivity-and-focus">More Productivity and Focus</h2>

<div class="right-align">
<a target="_blank" href="https://www.amazon.com/gp/product/1455586692/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1455586692&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=6bba21ed40b76c40d75ee5518f222af8"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1455586692&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=1455586692" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<p>Working at the office, especially with an open floor plan, can be distracting. It’s very easy to spend your entire day between meetings, random conversations with your peers, especially with the hard work requiring a high amount of mental energy and concentration like software engineering.</p>

<p>Working remotely solves this problem. With a properly set up personal office, there are fewer distractions, leaving more time for individual contributions. A book on a subject is my all-time favorite: <a href="https://www.amazon.com/gp/product/1455586692/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1455586692&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=46b086be5569689988b467402a54c7ce" target="_blank">Deep Work</a>: Rules for Focused Success In a Distracted World.</p>

<h1 id="how-to-work-with-a-remote-team">How To Work With a Remote Team</h1>

<h2 id="video-calls">Video Calls</h2>

<p>Regular meetings like standups, sprint plannings, retrospectives, debugging sessions can happen over video calls. The most popular options are <a href="https://zoom.us/" target="_blank">Zoom</a>, <a href="https://www.gotomeeting.com/" target="_blank">GoToMeeting</a>, <a href="https://gsuite.google.com/products/meet/" target="_blank">Google Meet</a> (aka Google Hangouts). Most of the video conferencing software allows you to add multiple attendees, share your camera and your screen. It’s especially useful if you would like to walk your team through a presentation. If you have an issue you need some help with, you can have a video call with your remote co-worker to troubleshoot it over a screen sharing session.</p>

<h2 id="messaging--chat">Messaging / Chat</h2>

<p>With the evolution of the messaging software, it’s now more efficient to communicate over messaging than talking to a large group. The advantages of using messaging for your communication are that it’s searchable, can be referred to later on, and it works for communicating with your entire team regardless of the physical location of your team members. Most notable options are <a href="https://slack.com/" target="_blank">Slack</a>, <a href="https://products.office.com/en-us/microsoft-teams/group-chat-software" target="_blank">Microsoft Teams</a>, <a href="https://www.atlassian.com/software/hipchat/downloads" target="_blank">HipChat</a>.</p>

<h2 id="tracking-progress">Tracking Progress</h2>

<p>You most likely already use these tools to track your projects. <a href="https://www.atlassian.com/software/jira" target="_blank">Jira</a>, <a href="https://trello.com/" target="_blank">Trello</a>, <a href="http://asana.com" target="_blank">Asana</a>, <a href="https://monday.com/" target="_blank">Monday</a> or a good old school spreadsheet (yes, people still do it, and it works great!) are available to track your team’s progress. Remote team members are assigned some tickets to work on. Once the work is started, the ticket is moved to in progress, then in QA, and to done. All steps along the way you’ll know exactly who works on what and when the work is ready to be reviewed.</p>

<h2 id="pushing-code">Pushing Code</h2>

<p>Chances are that you’re already using these tools too. There is no need to host a private git repository on your secret server in a closet. Services like <a href="https://github.com/" target="_blank">Github</a>, <a href="https://about.gitlab.com/" target="_blank">GitLab</a>, and <a href="https://bitbucket.org/" target="_blank">BitBucket</a> are available for your team. You can set the individual permissions for each code repository and assign different permissions to your engineers as you see fit. All code gets pushed to the same repository. Remote workers will follow your standard code review procedure using the same code standards that you already have.</p>

<h2 id="testing">Testing</h2>

<p>Stopping by at your developer’s desk to see the progress is inefficient and distractive. So you should be already using services like <a href="https://developer.apple.com/testflight/" target="_blank">TestFlight</a> and <a href="https://firebase.google.com/products/app-distribution" target="_blank">Firebase</a> to distribute your test builds for your mobile app. The websites are deployed to your QA or staging environment for testing which you can access from your web browser. You can check the database with your database client like <a href="https://www.sequelpro.com/" target="_blank">Sequel Pro</a> or <a href="https://www.navicat.com/" target="_blank">Navicat</a>. Your API can be tested with <a href="https://www.postman.com/" target="_blank">Postman</a>. And your cloud is easy to manage using <a href="https://getcommandeer.com/" target="_blank">Commandeer</a>.</p>

<h2 id="security">Security</h2>

<p>Security is the top priority for remote workers. At <a href="https://rightbalance.io/" target="_blank">Right Balance</a>, we follow the best security practices like using <a href="https://en.wikipedia.org/wiki/Virtual_private_network" target="_blank">VPN</a>, <a href="https://en.wikipedia.org/wiki/Secure_Shell" target="_blank">SSH</a> keys, hard disk encryption, being able to erase a laptop remotely, and more.</p>

<h1 id="conclusion">Conclusion</h1>

<p>With the current state of technology, remote workers enable your business to achieve greater heights. And as you can see, it’s not that different from your current way of working anyway. At Right Balance, we’re always here to help with remote software engineering. With our top-level software engineers in Russia and Latin America, we’re able to have around the globe time zone coverage. Seamlessly integrating into your team, and delivering some fantastic results.</p>

<p>If you ever need software development help, don’t hesitate to reach out at contact@rightbalance.io or +1.424.259.2285.</p>

	  ]]></description>
	</item>

	<item>
	  <title>How to Reduce Manual QA, Increase Product Quality and Iterate Faster</title>
	  <link>//how-to-reduce-manual-qa-increase-quality-of-your-product-and-iterate-faster</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2017-11-12T00:00:00-08:00</pubDate>
	  <guid>//how-to-reduce-manual-qa-increase-quality-of-your-product-and-iterate-faster</guid>
	  <description><![CDATA[
	     <p>Product development is a very complex task involving ideation, product and project management, design, software engineering and testing. As you develop more features, manually testing every feature becomes impossible over time. The number of bugs increases and the development cycle slows down. This post demonstrates how to automate your quality assurance efforts to increase the quality of your product and iterate faster.</p>

<h3 id="why-reduce-manual-qa">Why reduce manual QA</h3>
<p>Let’s take a look at a typical software development cycle with only manual QA.</p>

<p><img src="/assets/images/development_cycle_with_manual_qa.jpg" alt="Software Development Cycle with Manual QA" async="true" /></p>

<p>Let’s say you have two teams, a software development team, and a QA team. Software engineers only write application code, the QA team tests the developed product. Once a new release is developed under phase 1, the software goes to the QA team. The QA team executes manual tests by going through the user interface and making sure the product works right in phase 2. If a bug is found in phase 3, the QA team tells the development team how to reproduce the bug. Sometimes a product manager is involved to prioritize bug fixes to go in certain releases. As you can see, it’s a complex process involving communication between developers and QA engineers on a regular basis. In addition to it, there are only so many manual tests that a human can execute per day.</p>

<p><strong>Manual QA doesn’t scale well.</strong> As I mentioned previously, what happens after you develop more and more features, a number of manual tests increases and teams usually make one of the following decisions. They either hire more QA staff (which may be challenging for startups with limited capital) or execute fewer tests. Unfortunately, most of the companies I’ve seen go with the second approach which causes bugs, loss of customers, and lost revenue.</p>

<p>There is another way, have computers execute tests for you.</p>

<h3 id="what-are-automated-tests">What are automated tests</h3>
<p>When you write a piece of software, you want to make sure it works correctly. Let’s say, you implemented a login screen in your mobile app. After you’re done with your task, you may go ahead, stand up the app and try logging into the system. After you move on to the next feature, you test the next feature is a similar way. As you develop more features, you can’t possibly test all features you developed to date. It will simply take you too much time to test every feature manually every time you change the code. What ends up happening is that you break previously developed functionality without even realizing it.</p>

<p>That’s where automated tests come in. An automated test is a piece of code that executes your manual test. You write it once and execute it with one command any number of times you want. In the example of the login screen, you write a test that stands up the app and taps into a field with an invisible finger, enters some information and checks that the user is successfully logged in.</p>

<p><img src="/assets/images/development_cycle_with_automated_qa.jpg" alt="Software Development Cycle with Automated QA" async="true" /></p>

<p>As you can see from the following diagram, all 3 steps of software development happen during the same development phase. It involves fewer people, it lowers communication overhead and increases quality (computers are more consistent at running tests than humans).</p>

<h3 id="how-to-automate-your-tests">How to automate your tests</h3>

<ul>
  <li>
    <h4 id="product-managers-to-provide-clear-requirements">Product Managers to provide clear requirements</h4>
    <p>Developing and trying to automate an undefined product is very expensive. If requirements constantly change, both, the application code and automated tests need to be constantly rewritten. In addition to it, it’s tough to identify the best testing strategy if you don’t know what kind of product you’re building. Make sure your product manager provides clear acceptance criteria for every user story.</p>
  </li>
  <li>
    <h4 id="engineers-write-unit-and-integration-tests">Engineers write unit and integration tests</h4>
    <p>The problem with a manual test is that you need to have a human executing it every single time which is expensive. If you automate your test, you spend a little more effort upfront by writing it. Then, you have your <a href="https://en.wikipedia.org/wiki/Continuous_integration" target="_blank">continuous integration</a> servers running tests for you as many times and as often as you would like.</p>
  </li>
  <li>
    <h4 id="dont-automate-every-single-thing">Don’t automate every single thing</h4>
    <p>It’s a delicate balance between what makes sense to automate and what doesn’t. You have to compare a time cost and a benefit. In some cases, an integration test gives you the most bang for the buck. In some cases, it’s easier to test an isolated piece of logic with a unit test instead.</p>
  </li>
  <li>
    <h4 id="qa-engineers-test-interactions-between-systems">QA engineers test interactions between systems</h4>
    <p>If your product consists of multiple systems (like a mobile front end, a web front end, multiple back-end services, etc), it’s important to test all pieces altogether. Software engineers make sure every system is functioning correctly. However, it doesn’t really matter if each piece works as expected if the system as a whole doesn’t work. Cross-functional tests are the toughest to write. Make sure you automate the tests you execute most often manually first to be more efficient.</p>
  </li>
</ul>

<h3 id="final-words">Final words</h3>
<p>Automated tests are a great way to increase quality and iterate faster. If you keep your tests healthy, you can ship your software to production at any time. It allows your business to move quicker, iterate and learn faster. Writing automated tests is an important skill for every software engineer. It takes some time to develop and it pays off big time. Every system is different. That’s why you need to constantly challenge yourself with writing fewer tests that cover more functionality.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Why Nothing Makes Me Happier Than Deleting Code</title>
	  <link>//why-nothing-makes-me-happier-than-deleting-code</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2017-04-02T00:00:00-07:00</pubDate>
	  <guid>//why-nothing-makes-me-happier-than-deleting-code</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. - Antoine de Saint-Exupery</p>
</blockquote>

<h3 id="what">What</h3>
<p>Wait, what? How can deleting code make you happy? Aren’t software engineers paid to write code? Great software engineers are hired to build great products. It indeed involves writing code and deleting unnecessary code makes writing new code even easier. This post explains how to leverage code deletion to your advantage as a software engineer.</p>

<h3 id="why">Why</h3>
<p>Deleting code benefits you, your team and your product. Here is why:</p>

<ul>
  <li>It makes your product easier to use.</li>
  <li>It reduces code complexity, lowers compile times, and lowers test suite run time.</li>
  <li>It makes developers happier. Less code, fewer problems.</li>
</ul>

<p><img src="/assets/images/less_code_fewer_problems.jpg" alt="Less Code Fewer Problems" /></p>

<h3 id="how">How</h3>

<h4 id="focus-on-the-core-experience">Focus on the core experience.</h4>
<p>It’s easy to get distracted by a new shiny feature of a competitor. It’s tempting to implement <a href="/why-throwing-more-features-at-the-product-doesnt-work">more and more features</a> to enhance core user experience. At the end of the days, your core experience has to work. This is what users will come back in your app for. More additional features will distract your user from core experience which you don’t want to do.</p>

<h4 id="use-analytics-to-determine-what-users-actually-use-delete-the-rest">Use analytics to determine what users actually use, delete the rest.</h4>
<p>If you don’t have analytics in your app, you make your product and business decisions based on assumptions. In order to make a real difference in your product development, choose your direction on actual metrics. This way you can see the effect of every feature you ship. Take a look at how the app is used. It may turn out that some portions of the app or a website aren’t used as much. At this point, you can either delete it to simplify the user experience. Alternatively, it gives you a chance to rebuild the under-performing areas of the app if it makes sense to do so.</p>

<h4 id="if-you-dont-need-it-delete-it">If you don’t need it, delete it.</h4>
<p>Over and over again, I hear the concern about leaving existing code in place just in case we need it in the future. The truth is, you don’t need it most of the time. Even if you’ll need it in the future, your system will change so significantly over time so you’ll need to rewrite it anyway. At the end of the days, if you need your old code, your version control system will help you with that. This mentality goes well with the <a href="https://en.wikipedia.org/wiki/You_aren't_gonna_need_it" target="_blank">YAGNI principle</a>.</p>

<h4 id="stick-to-the-kiss-principlehttpsenwikipediaorgwikikissprincipletargetblank">Stick to the <a href="https://en.wikipedia.org/wiki/KISS_principle" target="_blank">KISS principle</a>.</h4>
<p>Keeping things simple is the best thing you can do when building complex systems. Even if building extra capabilities for your product is a more exciting thing to do from a software development perspective, no one benefits from an over-engineered system. Complex systems are hard to use, hard to maintain and it’s prone to bugs. Keep your code simple and always seek opportunities to simplify already complicated pieces of your software architecture. It will pay big dividends over time.</p>

<p><img src="/assets/images/kiss.gif" alt="Kiss" /></p>

<h3 id="final-words">Final words</h3>
<p>At the end of the days, it doesn’t really matter how much code you write. What matters is how fast you can build quality software that drives the business towards success. It’s not fun to be a part of failing startup with great technology that doesn’t help the business. Nor it’s fun to be at the growing business and not being able to iterate fast because of high technical debt. In order to maintain the right balance, you need to determine what’s important for the business. Make important things work really well and leave the rest behind.</p>

	  ]]></description>
	</item>

	<item>
	  <title>3 Reasons Why Throwing More Features At The Product Doesn't Work</title>
	  <link>//why-throwing-more-features-at-the-product-doesnt-work</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-11-27T00:00:00-08:00</pubDate>
	  <guid>//why-throwing-more-features-at-the-product-doesnt-work</guid>
	  <description><![CDATA[
	     <p>You’ve been working on your product very hard. You’re excited to launch it. There is a lot of interesting product ideas that you incorporated into your product. You keep thinking: “Just one last feature and it will be perfect!”. Finally, you push the button, the product is live but it doesn’t perform the way you expected. Sounds familiar ? After reading this post, you’ll learn a better way to deliver a <em>better product faster</em>.</p>

<h4 id="why-adding-a-lot-of-features-slows-you-down">Why adding a lot of features slows you down</h4>
<p>If your awesome product has all features in the word, it’s exactly where the problem is. More features come at the cost of the following things:</p>

<ol>
  <li>The increase of a feedback loop. It takes longer to build more functionality into the product. It delays time to market and it delays getting valuable customer feedback.</li>
  <li>You don’t know what works until you test it. You’re not your target audience. What works for you will not necessarily work for your customer.</li>
  <li>Building a product gets harder the more features you add to it. User experience gets confusing.</li>
</ol>

<h4 id="agile-methodology-to-the-rescue">Agile methodology to the rescue</h4>
<p>The process of planning ahead for a complete product is called <a href="https://en.wikipedia.org/wiki/Waterfall_model" target="_blank">Waterfall</a> which is best illustrated in a classic comic from <a href="http://projectcartoon.com" target="_blank">project cartoon</a>:</p>

<p><img src="/assets/images/waterfall_comic.jpg" alt="Waterfall comic" /></p>

<p>As you may see from the picture above, there is a fundamental disconnect between how an implementor or even a customer sees the product and what customer actually needs. After numerous companies fell into this trap, a group of smart individuals invented the methodology called Agile which solves this problem. You can find the agile definition in <a href="http://agilemanifesto.org/" target="_blank">The Agile Manifesto</a>. The main idea is to short-circuit a long iteration cycle by building the product in small increments, testing it with a real customer, and pivoting. In other words, instead of planning for a rich feature set in advance, you plan for a <em>minimum</em> feature set needed, ship it, and learn from it. <em>Then and only then</em> you decide what to build next. Here are the main advantages of agile project management:</p>

<ol>
  <li>It shortens the feedback loop so you can iterate faster.</li>
  <li>You build a better product based on the customer input.</li>
  <li>The team feels a greater sense of ownership since it’s more involved working with the customer.</li>
</ol>

<h4 id="how-you-can-implement-the-agile-methodology-for-your-team">How you can implement the Agile methodology for your team</h4>

<div class="left-align">
<a target="_blank" href="https://www.amazon.com/gp/product/1934356581/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1934356581&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=4ec447bfbee241d0cf58ac54d9b36686"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=1934356581&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=1934356581" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>
<p>If you would like to know more about Agile, I encourage you to read <a href="https://www.amazon.com/gp/product/1934356581/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=1934356581&amp;linkId=be6e2304236fdbfe25fdfe58cd95926d" target="_blank">The Agile Samurai</a> from Pragmatic Programmers. It goes into greater detail about the agile process starting from inception to planning and execution.</p>

<p>Agile methodology (you may also hear the term called scrum) has many flavors and each team tweaks it to come up with its own flavor. Here are the main events in Agile:</p>

<h5 id="inception">Inception</h5>
<p>Once you go through the inception process, you’ll identify roles, goals, and risks of the project. This process may take from several hours to several days for big projects. The outcome of inception is the backlog of items for the first iteration.</p>

<h5 id="planning">Planning</h5>
<p>The first inception will serve as your first planning. That being said, you’ll need to get together with your team for a planning meeting at the beginning of every iteration to make sure everybody understands what needs to be done.</p>

<h5 id="daily-standup">Daily Standup</h5>
<p>Standups are quick check-ins where you go around the room and everyone shares a status update. The goal is to track progress and identify blocking issues early.</p>

<h5 id="retrospective">Retrospective</h5>
<p>This is one of the most important parts of Agile. The team gets together at the end of the iteration to discuss what worked, what didn’t so we can iterate on the process itself. Retrospective meetings are a safe place to express your thoughts so the team can improve.</p>

<h4 id="conclusion">Conclusion</h4>
<p>Using the right tool for the job is key. The Waterfall process is very different from Agile/Scrum. Which methodology is right for you is your choice. In some cases, it may be appropriate to go with a waterfall process if your product cycle is very long in your industry. For most of the tech startups, I recommend going with Agile since things move quickly and you need to invent and innovate.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Ship On Time: How to Give Accurate Software Estimates</title>
	  <link>//ship-on-time-how-to-give-accurate-software-estimates</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-10-30T00:00:00-07:00</pubDate>
	  <guid>//ship-on-time-how-to-give-accurate-software-estimates</guid>
	  <description><![CDATA[
	     <p>Imagine your CEO casually asks you: “Hey, how long would it take you to implement the feature X?”. You don’t want to disappoint your CEO and you’re feeling pressured for an answer, so you respond: “It’s pretty simple, I’ll get it done in a week.”. The CEO is happy, you’re fired up. As you’re working on the feature, you find our that you have an external dependency that makes it tricky. The code needs to be refactored and there are no tests. At the end of the week, the CEO shows up again. He/she already sold it to a prospective client but you now need to deliver bad news. We’ve all been there. After reading this post, you’ll know how to prevent it from happening.</p>

<h2 id="why-software-estimates-are-important">Why software estimates are important</h2>
<ol>
  <li>Stakeholders need it to make business decisions</li>
  <li>It helps you understand what you need to build</li>
  <li>It helps you understand how you need to build it</li>
</ol>

<h2 id="how-you-can-estimate">How you can estimate</h2>
<p>One of my old bosses from Russia brought up a simple formula:</p>

<blockquote>
  <p>Think of a worst possible case, double it and you’ll still be wrong. - My Old Boss</p>
</blockquote>

<p>Even though it sounds like a joke, there is something we can learn from it. You can’t predict it exactly right, period. You may know a lot of things, but you don’t know what you don’t know. A software is built on top of other software and you can’t control it completely. There is a technique that I developed over the years that will help you to get it very close. Here are the steps:</p>

<h3 id="gather-requirements">Gather requirements</h3>

<blockquote>
  <p>If you don’t know where you are going, you’ll end up someplace else. - Yogi Berra</p>
</blockquote>

<p>The minute someone asks you about a new feature, ask questions to clarify details. It will lead to more questions and unknowns. Rinse, repeat until you get all your questions answered.</p>

<p>Here is an example. Let’s say we would like to build new profile screen for your user. How should this screen look? Where should the avatar be located? What color is the font, what size it is ? How long should a bio be ? Should we allow editing the bio? Etc.</p>

<h3 id="break-it-down">Break it down</h3>
<p><img src="/assets/images/break_it_down.gif" alt="Break It Down" async="true" /></p>

<p>Now that you have all your questions answered, it’s time to do your homework and break it down. The goal is to break down every individual requirement into small tasks so you can clearly estimate each of them. If your estimate seems high, break down a big task into a set of smaller tasks. Keep breaking it down until your estimate is clear and reasonable. Some people prefer doing it in hours, some people use points. We’ll use hours in this example to keep it simple.</p>

<ul>
  <li>Profile screen scaffold - 0.5 hour</li>
  <li>Serve a user avatar URL from the back end - 1 hour</li>
  <li>Display an avatar image centered on the screen - 0.5 hour</li>
  <li>Serve a user bio from the back end - 0.5 hour</li>
  <li>Display a bio on the profile screen - 0.5 hour</li>
  <li>Create an edit bio endpoint on the back end - 1 hour</li>
  <li>Present a new edit bio screen when user taps on a bio - 1 hour</li>
  <li>Send a bio request and update the bio on the profile screen - 1.5 hours</li>
</ul>

<p>Total: 6.5 hours</p>

<p>This is just a hypothetical example. Your estimates may be different depending on the state of your app, your familiarity with the codebase or even the team you’re on. Factor risk in your individual estimates.</p>

<h3 id="estimate">Estimate</h3>
<p>If you made it to this point, you’re in a pretty good shape. The hardest part is already done and all you need to do is to plug numbers into a simple formula:</p>

<p><strong>Estimate = Total + (Risk Factor * Total)</strong></p>

<p>Yes, a risk factor. Always factor in a risk factor. There is always something that you didn’t think of or something is outside of your control. The exact number varies from project to project. I’ve seen projects executed with a 20% risk factor with an established team and a solid codebase. And I saw a risk factor being as high as 100% for systems that need to talk to some weird unreliable API.</p>

<h3 id="communicate">Communicate</h3>
<p>Communicate your estimate to your steak holders, commit to it and start development. Show progress often and ask for feedback. It allows you to accomplish the following:</p>

<ol>
  <li>It keeps stakeholders involved</li>
  <li>Stakeholders see your progress</li>
  <li>You can course correct early if anything changes</li>
</ol>

<p>I was once in a situation where a feature set wasn’t presented to a stakeholder properly in the very beginning. As a result, a stakeholder had different expectations. If we would show progress earlier, it would be easier to course correct.</p>

<h3 id="falling-behind-re-negotiate">Falling behind? Re-negotiate</h3>
<p>As with any commitment, here are the only things you can do:</p>

<ul>
  <li>Fulfill the commitment, or</li>
  <li>Avoid the commitment, or</li>
  <li>Re-negotiate</li>
</ul>

<p>Notice that failing to deliver on your commitment is not an option. Even though delivering bad news is uncomfortable, failing to deliver your commitment is even worse. People loose trust in your which is hard to recover from. Do one of the things above instead.</p>

<h2 id="final-words">Final words</h2>
<p>At the end of the days, it all comes down to communication. Chose your words wisely and make sure the other side understands you. You are a part of the team and getting expectations aligned makes everyone’s life easier. There is no harm in delivering even bad updates early. People will appreciate it in the long run. You’ll be off sometimes in your estimation and it’s fine as long as you can communicate clearly and re-negotiate. You’ll get better at estimation over time. You may also notice that estimation takes time. You’ll be in a better place if you take your time to estimate your project properly instead of giving a wrong estimate on the spot. Giving accurate estimates is a crucial soft skill for a <a href="/10-steps-to-become-a-senior-software-engineer/">Senior Software Engineer</a>.</p>

	  ]]></description>
	</item>


</channel>
</rss>
