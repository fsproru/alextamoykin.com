<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>alextamoykin.com</title>
   
   <link>http://alextamoykin.com/</link>
   <description>Building world-class software, teams, and products.</description>
   <language>en-us</language>
   <managingEditor> Alex Tamoykin</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Software Engineer Salary: Dollar Dollar Bill Y'All</title>
	  <link>//software-engineer-salary-dollar-dollar-bill-yall</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2016-10-16T00:00:00-07:00</pubDate>
	  <guid>//software-engineer-salary-dollar-dollar-bill-yall</guid>
	  <description><![CDATA[
	     <p>Are software engineers fairly compensated at your company? Do you or your colleagues focus on building the product instead of getting a raise? Everyone needs to be properly incentivised in order for the team to succeed. Fair software developer salary plays a big part in it. After reading this blog post, you’ll know to play this game right.</p>

<h2 id="the-best-a-salary-can-do-for-you-is-make-you-forget-about-it">The best a salary can do for you is make you forget about it</h2>
<p>If you want to know the actual numbers, keep reading till the end. What matters more than numbers is <em>you and your team focusing on building the product</em>. This is how you win. On the other end, trying to maximize your salary is a slippery slope. You can’t win this game because of the following reasons:</p>

<ol>
  <li>You can always find a place that will pay you more</li>
  <li>Focusing on a promotion doesn’t make you a better software engineer</li>
  <li>The company (especially if it’s an early stage startup) has limited cash that will evaporate if everyone in a company focuses on getting more salary</li>
</ol>

<h2 id="a-higher-salary-doesnt-mean-a-better-job">A higher salary doesn’t mean a better job</h2>
<p>Imagine you’re interviewing at multiple companies and you get an offer that is way above what everyone is willing to pay. You may be excited like this dude:
<img src="/assets/images/excited.gif" alt="Excited dude" async="true" />
If a company wants to pay you a salary significantly above the market, in most cases, there is a reason for it. It may be a big company with a lot of cash and boring work to do. Or the company may be struggling to find people who believe in their mission. Don’t get the high number distract you. Make sure you join a solid team that you can learn from. You’ll spend a lot of time with this group of people every day. Find the company with the vision you believe in. These things matter more than your salary in the grand scheme of things.</p>

<h2 id="ask-for-the-right-number-no-more-no-less">Ask for the right number. No more, no less.</h2>
<p>You should ask for a fair market salary in your geographic area. Look at the salary statistic sites like <a href="https://salary.com" target="blank">salary.com</a> for your experience level and take it as a guiding factor. Don’t accept the offer drastically below or above your current level since you don’t want to be in either of these two situations:</p>

<ol>
  <li>You are underpaid. Let’s say you got excited about a new hot startup. You really want to work there but they say they can’t pay you a reasonable salary for some reason. Maybe money is not super important to you because of your lifestyle and you say yes to it. Sooner or later, your friend developer from another company will tell you how much he/she makes and you’ll eventually quit.</li>
  <li>You are overpaid. The employer really wants to hire you and they decide to pay a price above your level. Even though you’ll get paid a lot of money, your employer will have extremely high expectations of you. Most likely, these expectations will be unrealistic and they will be pressured to terminate you after reviewing engineering budget. In addition to it, your colleague at the same company will eventually know that you’re overpaid. News spread out quickly and it will ruin team morale.</li>
</ol>

<h2 id="negotiation-is-key">Negotiation is key</h2>
<div class="left-align">
<a href="https://www.amazon.com/gp/product/0931213207/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0931213207&amp;linkCode=as2&amp;tag=howtoprogramb-20&amp;linkId=99431d63288d3fd28e93cacc1f9e26f4"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;MarketPlace=US&amp;ASIN=0931213207&amp;ServiceVersion=20070822&amp;ID=AsinImage&amp;WS=1&amp;Format=_SL250_&amp;tag=howtoprogramb-20" /></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=howtoprogramb-20&amp;l=am2&amp;o=1&amp;a=0931213207" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
</div>

<p>One of the most important skills to get the right developer salary is a negotiation. I recommend reading <a href="https://www.amazon.com/gp/product/0931213207/ref=as_li_tl?ie=UTF8&amp;tag=howtoprogramb-20&amp;camp=1789&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=0931213207&amp;linkId=cadf10a661a16a5100bc1d5f9d6dfeed" target="_blank">Negotiating Your Salary: How To Make $1000 a Minute</a>. It explains basic negotiation tactics for salary negotiation. One key advice that I took from this book is to avoid revealing your salary expectations until you make sure it’s the right fit. After being on both sides of the hiring process, I can definitely see how it helps both parties focus on what’s important. Revealing your salary expectations which may or may not fit in a pre-defined budget can be very distracting which can finish a conversation in the very beginning.</p>

<h2 id="how-important-tech-for-your-employer">How important tech for your employer</h2>
<p>Salary negotiation is a two-sided process. Let’s see how it looks from the employer’s perspective. In general, companies can be subdivided into tech companies and non-tech companies. In tech companies, technology plays a crucial role in product development. In other words, if the engineering department disappears, the company is in a big trouble. Engineers are valued in tech companies the most. In this situation, the main focus of the employer is to find top class developers. Every developer makes a massive impact on the business and there is not many great developers available in a current hot job market. You’ll learn the most in such a company and the employer will generally have no problem paying you what you’re worth.</p>

<p>On the other side, in non-tech companies, the main product is powered by an external technology as a service or operationally. Technology is a nice to have addition to the product. In this kind of environment, engineering has a secondary focus in the company. When something is not your primary focus, you would like to get it done cheap and fast. Non-tech companies can afford to hire low-quality talent because of the low technology impact for their business. It’s a good starting point if you are a junior developer. You won’t experience significant growth here and you won’t get paid as much. Make sure you choose the right company for your career stage.</p>

<h2 id="how-much-is-a-senior-software-engineer-salary">How much is a senior software engineer salary</h2>
<p><img src="/assets/images/kanye-west-make-it-rain-dollar.gif" alt="Kanye west makes it rain" />
Another reason to become a <a href="https://alextamoykin.com/10-steps-to-become-a-senior-software-engineer/">Senior Software Engineer</a> is a pretty good salary, comparing to the other professions. It depends on many factors. Junior software engineer salary in Los Angeles starts from $80,000 and it may go to $200,000 and above for a principal role at some companies. It depends on many factors like cost of living, geographic area, technical stack, job market etc.</p>

<h2 id="final-words">Final words</h2>
<p>Focus on your growth and the right thing will happen. The company will become stronger because you deliver a better product and your compensation package will grow with it. In a healthy company, it will always be the case. The main asset of the company, especially in the startup world is <em>the team</em>. If your team grows, the company grows. Companies you want to work in understand it and that’s why they have regular performance reviews and promotions.</p>

	  ]]></description>
	</item>

	<item>
	  <title>10 Steps to become a Senior Software Engineer</title>
	  <link>//10-steps-to-become-a-senior-software-engineer/</link>
	  <author>Alex Tamoykin</author>
	  <pubDate>2014-12-22T20:54:34-08:00</pubDate>
	  <guid>//10-steps-to-become-a-senior-software-engineer/</guid>
	  <description><![CDATA[
	     <h2 id="what">What</h2>

<p>Software engineers go through several stages in their careers. They start from a Junior role, then they move to a Mid Level role. Then they become senior. This blog post has 10 steps that help you to become a Senior Software Engineer.</p>

<h2 id="why-bother">Why bother?</h2>

<ul>
  <li>Get paid more! Your salary grows as you level up</li>
  <li>Advance in your career. Senior Software Engineers are moving towards Architect, Team Lead, CTO kind of roles</li>
  <li>Take on bigger challenges. As you grow you make a bigger impact</li>
</ul>

<h2 id="how">How</h2>

<p>Software engineering is hard. The industry is always changing and you need to keep up with it. You need to put constant effort and time. There is always more to learn than you can possibly absorb. Many engineers who finish a several month boot camp don’t realize how much more they need to learn on top of it. No worries, there is a clear path to becoming a senior software engineer in almost any area of software development.</p>

<h2 id="step-0-choose-your-path-and-stick-to-it">Step 0: choose your path and stick to it!</h2>

<blockquote>
  <p>do one thing and do it well</p>
</blockquote>

<blockquote>
  <p>Doug McIlroy : <a title="Unix Philosophy" href="http://en.wikipedia.org/wiki/Unix_philosophy" target="_blank">Unix Philosophy</a></p>
</blockquote>

<p>I can’t emphasize this enough! It is really important to choose a specialty and a technical stack that you will be working with. Sticking to it and not getting distracted is what will make you a specialist.</p>

<p>It’s an important choice to make. Here is how to do it:</p>

<ul>
  <li>Choose your specialty. It’s what you want to do. For example: Web development or Mobile development or DevOps etc.</li>
  <li>Choose a technical stack within your specialty. For example: if you chose web development, you’ll need to choose between Ruby on Rails, Python and Django, JavaScript and MEAN etc. If you chose mobile, you’ll need to choose between iOS or Android, etc.</li>
  <li>Stick to it and master it.</li>
</ul>

<p>I’m not saying that you shouldn’t get familiar with anything else outside of your main specialty. A well rounded <a title="T-Shaped skills" href="http://en.wikipedia.org/wiki/T-shaped_skills" target="_blank">T-Shaped</a> Software Engineer knows about other aspects of programming too. Although he/she knows their main specialty extremely well.</p>

<p>Now that you’ve chosen your specialty, you have a lot of things to learn. Take your time. It will take you several years to read all these books and practice necessary skills. Get through this challenge one skill at the time.</p>

<p>I’ll be using the following technical stacks going forward: Ruby on Rails for web development, iOS for mobile development. It is just because I have experience working with it. I can speak to it personally. At the end of the says it’s just a matter of taste. If you choose some other stack, you’ll need to find different books.</p>

<h2 id="step-1-lay-the-foundations">Step 1. Lay the foundations</h2>

<p>Read <a title="The Pragmatic Programmer book" href="http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X" target="_blank">The Pragmatic Programmer</a> book. It’s a good starting point on the path to software mastery. The book summarizes best high level practices. It’s language / technology agnostic. It doesn’t matter which tech stack you choose, the main principles stay the same.</p>

<h2 id="step-2-master-your-programming-language">Step 2. Master your programming language</h2>

<p>You’ll be using many languages day to day depending on the technology stack of your choice. Although, majority of your code will be written in one language. For example: a Ruby on Rails developer uses Ruby primarily. An AngularJS developer uses JavaScript most of the time. Identifying the language of your choice and mastering it is crucial for your career. Learn it, master it! You’ll be using this language every day. Choose your language and read an advance book on it.</p>

<ul>
  <li>
    <p>For a Ruby Developer – <a title="The Programming Ruby book" href="https://pragprog.com/book/ruby4/programming-ruby-1-9-2-0" target="_blank">Programming Ruby</a></p>
  </li>
  <li>
    <p>For an iOS Developer – <a title="The Swift book" href="https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11" target="_blank">The Swift Programming Language</a></p>
  </li>
</ul>

<h2 id="step-3-learn-your-framework">Step 3. Learn your framework</h2>

<p>Choose one, learn it:</p>

<ul>
  <li>For a Rails Developer – <a title="The Rails Tutorial website" href="https://www.railstutorial.org/" target="_blank">Rails Tutorial</a> by Michael Hartl</li>
  <li>For an iOS Developer – <a title="The iOS programming book" href="http://www.bignerdranch.com/we-write/ios-programming.html" target="_blank">iOS programming: The Big Nerd Ranch Guide</a></li>
</ul>

<h2 id="step-4-become-a-master-of-your-text-editor--ide">Step 4. Become a master of your text editor / IDE</h2>

<p>Again. Choose one, master it and stick to it. If you chose VIM, stay with VIM and become a master of it.</p>

<h2 id="step-5-use-your-version-control-system-like-a-pro">Step 5. Use your Version Control System like a pro</h2>

<p>I recommend using Git. Here is the resource that I like: <a title="The pro git book" href="http://git-scm.com/book" target="_blank">Pro git</a> – free online ebook with a complete breakdown on every aspect of git</p>

<h2 id="step-6-commit-to-doing-test-driven-development">Step 6. Commit to doing Test Driven Development</h2>

<p>Choose a book specific to your tech stack, learn it. Get into a habit of doing it every day. Quality code comes with writing tests.</p>

<ul>
  <li>For a Ruby on Rails Developer – <a title="The Rails Test Prescriptions book" href="https://pragprog.com/book/nrtest/rails-test-prescriptions" target="_blank">Rails Test Prescriptions</a></li>
  <li>For an iOS Developer – <a title="Test Driven iOS Development" href="http://www.amazon.com/Test-Driven-iOS-Development-Developers-Library/dp/0321774183" target="_blank">Test Driven iOS Development</a></li>
</ul>

<h2 id="step-7-refactor-as-a-habit">Step 7. Refactor as a habit</h2>

<p>The codebase grows in complexity as you add more functionality. In order to keep your codebase manageable you need to refactor. If you don’t refactor as you go, you’ll soon come to a sad place where even a small change is hard, bugs are inevitable and nobody wants to deal with your messy codebase. Just make your life easier. Don’t delay your refactor. Get into a habit of refactoring. Here is a good book on how to do it: <a title="Refactoring: Improving the Design of Existing Code" href="http://www.amazon.com/gp/product/0201485672" target="_blank">Refactoring: Improving the Design of Existing Code</a> by Martin Fowler</p>

<h2 id="step-8-learn-software-architecture">Step 8. Learn software architecture</h2>

<p>Depending on the stack you choose, find a good book on architecture. Here is one that I recommend by Martin Fowler. It’s called <a title="Enterprise Application Architecture" href="http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420" target="_blank">Patterns of Enterprise Application Architecture</a></p>

<h2 id="step-9-unleash-the-power-of-the-command-line">Step 9. Unleash the power of the command line</h2>

<p>The command line can feel intimidating at first. Although, as soon as you learn how to use it, you’ll become a lot more efficient in performing basic tasks. That alone makes you a better developer since you are able to achieve more in less time.</p>

<p>Then you can take it to the next level. Use shell to automate common tasks and build your <a title="My dotfiles repo as an example" href="https://github.com/fsproru/dotfiles" target="_blank">dotfiles</a>. If you’re working on a Mac or any Linux distribution, learn shell. Here is a good book on it by Mark Bates: <a title="Conquering The Command Line" href="http://conqueringthecommandline.com/book" target="_blank">Conquering the Command Line</a></p>

<h2 id="step-10-code-code-code">Step 10. Code code code!</h2>

<p>Every single day. Like in any sport, you need to practice what you learned in order for knowledge to stick.</p>

<h2 id="takeaway">Takeaway</h2>

<p>Yes, becoming Senior Software Engineer is hard. It takes a lot of time and commitment. Different people learn at different speed, but on average, it takes about 10 years to become a solid senior dev. It’s a big investment in time for a big return.</p>

<p>Software Engineers have the bright future. They are in high demand on the job market. Their salary grows proportionally with their experience. It’s a rapidly growing and a relatively new field. Every day of a software engineer is a challenge. A challenge of changing people’s lives. Go ahead and take on this challenge by becoming a Senior Software Engineer one skill at the time.</p>

<p>Cheers,</p>

<p>Alex</p>

<p><em>Photo by <a href="&quot;https://www.flickr.com/photos/lachlanhardy&quot;">lachlanhardy</a></em></p>

	  ]]></description>
	</item>


</channel>
</rss>
